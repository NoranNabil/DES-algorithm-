                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _p
                                     12 	.globl _e
                                     13 	.globl _s8
                                     14 	.globl _s7
                                     15 	.globl _s6
                                     16 	.globl _s5
                                     17 	.globl _s4
                                     18 	.globl _s3
                                     19 	.globl _s2
                                     20 	.globl _s1
                                     21 	.globl _fp
                                     22 	.globl _ip
                                     23 	.globl _pc2
                                     24 	.globl _pc1
                                     25 	.globl _main
                                     26 	.globl _rotate
                                     27 	.globl _G_Function
                                     28 	.globl _spi_receive
                                     29 	.globl _spi_init
                                     30 	.globl _spi_delay
                                     31 	.globl _TR1
                                     32 	.globl _RI
                                     33 	.globl _TI
                                     34 	.globl _d
                                     35 	.globl _c
                                     36 	.globl _b
                                     37 	.globl _a
                                     38 	.globl _RXD
                                     39 	.globl _TXD
                                     40 	.globl _miso
                                     41 	.globl _mosi
                                     42 	.globl _sclk
                                     43 	.globl _cs
                                     44 	.globl _TL1
                                     45 	.globl _TH1
                                     46 	.globl _TMOD
                                     47 	.globl _SBUF
                                     48 	.globl _SCON
                                     49 	.globl _P3
                                     50 	.globl _P2
                                     51 	.globl _final_original_key
                                     52 	.globl _final_plain_text
                                     53 	.globl _Temp
                                     54 	.globl _temp
                                     55 	.globl _i
                                     56 	.globl _arr
                                     57 ;--------------------------------------------------------
                                     58 ; special function registers
                                     59 ;--------------------------------------------------------
                                     60 	.area RSEG    (ABS,DATA)
      000000                         61 	.org 0x0000
                           0000A0    62 _P2	=	0x00a0
                           0000B0    63 _P3	=	0x00b0
                           000098    64 _SCON	=	0x0098
                           000099    65 _SBUF	=	0x0099
                           000089    66 _TMOD	=	0x0089
                           00008D    67 _TH1	=	0x008d
                           00008B    68 _TL1	=	0x008b
                                     69 ;--------------------------------------------------------
                                     70 ; special function bits
                                     71 ;--------------------------------------------------------
                                     72 	.area RSEG    (ABS,DATA)
      000000                         73 	.org 0x0000
                           0000A0    74 _cs	=	0x00a0
                           0000A1    75 _sclk	=	0x00a1
                           0000A2    76 _mosi	=	0x00a2
                           0000A3    77 _miso	=	0x00a3
                           0000B1    78 _TXD	=	0x00b1
                           0000B0    79 _RXD	=	0x00b0
                           0000B2    80 _a	=	0x00b2
                           0000B3    81 _b	=	0x00b3
                           0000B4    82 _c	=	0x00b4
                           0000B5    83 _d	=	0x00b5
                           000099    84 _TI	=	0x0099
                           000098    85 _RI	=	0x0098
                           00008E    86 _TR1	=	0x008e
                                     87 ;--------------------------------------------------------
                                     88 ; overlayable register banks
                                     89 ;--------------------------------------------------------
                                     90 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         91 	.ds 8
                                     92 ;--------------------------------------------------------
                                     93 ; internal ram data
                                     94 ;--------------------------------------------------------
                                     95 	.area DSEG    (DATA)
      000000                         96 _arr::
      000000                         97 	.ds 16
      000010                         98 _i::
      000010                         99 	.ds 1
      000011                        100 _temp::
      000011                        101 	.ds 1
      000012                        102 _Temp::
      000012                        103 	.ds 4
      000016                        104 _final_plain_text::
      000016                        105 	.ds 8
      00001E                        106 _final_original_key::
      00001E                        107 	.ds 8
                                    108 ;--------------------------------------------------------
                                    109 ; overlayable items in internal ram
                                    110 ;--------------------------------------------------------
                                    111 ;--------------------------------------------------------
                                    112 ; Stack segment in internal ram
                                    113 ;--------------------------------------------------------
                                    114 	.area SSEG
      000000                        115 __start__stack:
      000000                        116 	.ds	1
                                    117 
                                    118 ;--------------------------------------------------------
                                    119 ; indirectly addressable internal ram data
                                    120 ;--------------------------------------------------------
                                    121 	.area ISEG    (DATA)
                                    122 ;--------------------------------------------------------
                                    123 ; absolute internal ram data
                                    124 ;--------------------------------------------------------
                                    125 	.area IABS    (ABS,DATA)
                                    126 	.area IABS    (ABS,DATA)
                                    127 ;--------------------------------------------------------
                                    128 ; bit data
                                    129 ;--------------------------------------------------------
                                    130 	.area BSEG    (BIT)
                                    131 ;--------------------------------------------------------
                                    132 ; paged external ram data
                                    133 ;--------------------------------------------------------
                                    134 	.area PSEG    (PAG,XDATA)
                                    135 ;--------------------------------------------------------
                                    136 ; uninitialized external ram data
                                    137 ;--------------------------------------------------------
                                    138 	.area XSEG    (XDATA)
                                    139 ;--------------------------------------------------------
                                    140 ; absolute external ram data
                                    141 ;--------------------------------------------------------
                                    142 	.area XABS    (ABS,XDATA)
                                    143 ;--------------------------------------------------------
                                    144 ; initialized external ram data
                                    145 ;--------------------------------------------------------
                                    146 	.area XISEG   (XDATA)
                                    147 	.area HOME    (CODE)
                                    148 	.area GSINIT0 (CODE)
                                    149 	.area GSINIT1 (CODE)
                                    150 	.area GSINIT2 (CODE)
                                    151 	.area GSINIT3 (CODE)
                                    152 	.area GSINIT4 (CODE)
                                    153 	.area GSINIT5 (CODE)
                                    154 	.area GSINIT  (CODE)
                                    155 	.area GSFINAL (CODE)
                                    156 	.area CSEG    (CODE)
                                    157 ;--------------------------------------------------------
                                    158 ; interrupt vector
                                    159 ;--------------------------------------------------------
                                    160 	.area HOME    (CODE)
      000000                        161 __interrupt_vect:
      000000 02r00r00         [24]  162 	ljmp	__sdcc_gsinit_startup
                                    163 ;--------------------------------------------------------
                                    164 ; global & static initialisations
                                    165 ;--------------------------------------------------------
                                    166 	.area HOME    (CODE)
                                    167 	.area GSINIT  (CODE)
                                    168 	.area GSFINAL (CODE)
                                    169 	.area GSINIT  (CODE)
                                    170 	.globl __sdcc_gsinit_startup
                                    171 	.globl __sdcc_program_startup
                                    172 	.globl __start__stack
                                    173 	.globl __mcs51_genXINIT
                                    174 	.globl __mcs51_genXRAMCLEAR
                                    175 	.globl __mcs51_genRAMCLEAR
                                    176 ;	main.c:301: __code uint8* arr[8]={s1,s2,s3,s4,s5,s6,s7,s8}; 
      000000 75*00rE8         [24]  177 	mov	(_arr + 0),#_s1
      000003 75*01s00         [24]  178 	mov	(_arr + 1),#(_s1 >> 8)
      000006 75*02r28         [24]  179 	mov	((_arr + 0x0002) + 0),#_s2
      000009 75*03s01         [24]  180 	mov	((_arr + 0x0002) + 1),#(_s2 >> 8)
      00000C 75*04r68         [24]  181 	mov	((_arr + 0x0004) + 0),#_s3
      00000F 75*05s01         [24]  182 	mov	((_arr + 0x0004) + 1),#(_s3 >> 8)
      000012 75*06rA8         [24]  183 	mov	((_arr + 0x0006) + 0),#_s4
      000015 75*07s01         [24]  184 	mov	((_arr + 0x0006) + 1),#(_s4 >> 8)
      000018 75*08rE8         [24]  185 	mov	((_arr + 0x0008) + 0),#_s5
      00001B 75*09s01         [24]  186 	mov	((_arr + 0x0008) + 1),#(_s5 >> 8)
      00001E 75*0Ar28         [24]  187 	mov	((_arr + 0x000a) + 0),#_s6
      000021 75*0Bs02         [24]  188 	mov	((_arr + 0x000a) + 1),#(_s6 >> 8)
      000024 75*0Cr68         [24]  189 	mov	((_arr + 0x000c) + 0),#_s7
      000027 75*0Ds02         [24]  190 	mov	((_arr + 0x000c) + 1),#(_s7 >> 8)
      00002A 75*0ErA8         [24]  191 	mov	((_arr + 0x000e) + 0),#_s8
      00002D 75*0Fs02         [24]  192 	mov	((_arr + 0x000e) + 1),#(_s8 >> 8)
                                    193 ;	main.c:303: uint32 Temp = 0;
      000030 E4               [12]  194 	clr	a
      000031 F5*12            [12]  195 	mov	_Temp,a
      000033 F5*13            [12]  196 	mov	(_Temp + 1),a
      000035 F5*14            [12]  197 	mov	(_Temp + 2),a
      000037 F5*15            [12]  198 	mov	(_Temp + 3),a
                                    199 ;	main.c:581: DATA final_plain_text = {.Array = {0x76, 0x35 ,0x49 ,0xd3, 0x8b, 0x57, 0xc, 0xe}};
      000039 75*16 76         [24]  200 	mov	_final_plain_text,#0x76
      00003C 75*17 35         [24]  201 	mov	(_final_plain_text + 0x0001),#0x35
      00003F 75*18 49         [24]  202 	mov	(_final_plain_text + 0x0002),#0x49
      000042 75*19 D3         [24]  203 	mov	(_final_plain_text + 0x0003),#0xd3
      000045 75*1A 8B         [24]  204 	mov	(_final_plain_text + 0x0004),#0x8b
      000048 75*1B 57         [24]  205 	mov	(_final_plain_text + 0x0005),#0x57
      00004B 75*1C 0C         [24]  206 	mov	(_final_plain_text + 0x0006),#0x0c
      00004E 75*1D 0E         [24]  207 	mov	(_final_plain_text + 0x0007),#0x0e
                                    208 ;	main.c:582: DATA final_original_key =  {.Array = {0x4b,0x41,0x53,0x48,0x49,0x53,0x41,0x42}};
      000051 75*1E 4B         [24]  209 	mov	_final_original_key,#0x4b
      000054 75*1F 41         [24]  210 	mov	(_final_original_key + 0x0001),#0x41
      000057 75*20 53         [24]  211 	mov	(_final_original_key + 0x0002),#0x53
      00005A 75*21 48         [24]  212 	mov	(_final_original_key + 0x0003),#0x48
      00005D 75*22 49         [24]  213 	mov	(_final_original_key + 0x0004),#0x49
      000060 75*23 53         [24]  214 	mov	(_final_original_key + 0x0005),#0x53
      000063 75*24 41         [24]  215 	mov	(_final_original_key + 0x0006),#0x41
      000066 75*25 42         [24]  216 	mov	(_final_original_key + 0x0007),#0x42
                                    217 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  218 	ljmp	__sdcc_program_startup
                                    219 ;--------------------------------------------------------
                                    220 ; Home
                                    221 ;--------------------------------------------------------
                                    222 	.area HOME    (CODE)
                                    223 	.area HOME    (CODE)
      000003                        224 __sdcc_program_startup:
      000003 02r0Er44         [24]  225 	ljmp	_main
                                    226 ;	return from main will return to caller
                                    227 ;--------------------------------------------------------
                                    228 ; code
                                    229 ;--------------------------------------------------------
                                    230 	.area CSEG    (CODE)
                                    231 ;------------------------------------------------------------
                                    232 ;Allocation info for local variables in function 'spi_delay'
                                    233 ;------------------------------------------------------------
                                    234 ;j                         Allocated to registers r7 
                                    235 ;------------------------------------------------------------
                                    236 ;	main.c:118: void spi_delay (void){
                                    237 ;	-----------------------------------------
                                    238 ;	 function spi_delay
                                    239 ;	-----------------------------------------
      000000                        240 _spi_delay:
                           000007   241 	ar7 = 0x07
                           000006   242 	ar6 = 0x06
                           000005   243 	ar5 = 0x05
                           000004   244 	ar4 = 0x04
                           000003   245 	ar3 = 0x03
                           000002   246 	ar2 = 0x02
                           000001   247 	ar1 = 0x01
                           000000   248 	ar0 = 0x00
                                    249 ;	main.c:120: for (j = 0; j <2 ; j++);
      000000 7F 02            [12]  250 	mov	r7,#0x02
      000002                        251 00104$:
      000002 DF FE            [24]  252 	djnz	r7,00104$
                                    253 ;	main.c:121: }
      000004 22               [24]  254 	ret
                                    255 ;------------------------------------------------------------
                                    256 ;Allocation info for local variables in function 'spi_init'
                                    257 ;------------------------------------------------------------
                                    258 ;	main.c:123: void spi_init (void){
                                    259 ;	-----------------------------------------
                                    260 ;	 function spi_init
                                    261 ;	-----------------------------------------
      000005                        262 _spi_init:
                                    263 ;	main.c:124: cs   = 1;
                                    264 ;	assignBit
      000005 D2 A0            [12]  265 	setb	_cs
                                    266 ;	main.c:125: cs   = 0;
                                    267 ;	assignBit
      000007 C2 A0            [12]  268 	clr	_cs
                                    269 ;	main.c:126: sclk = 1;
                                    270 ;	assignBit
      000009 D2 A1            [12]  271 	setb	_sclk
                                    272 ;	main.c:127: sclk = 0;
                                    273 ;	assignBit
      00000B C2 A1            [12]  274 	clr	_sclk
                                    275 ;	main.c:128: mosi = 1; 
                                    276 ;	assignBit
      00000D D2 A2            [12]  277 	setb	_mosi
                                    278 ;	main.c:129: miso = 0;
                                    279 ;	assignBit
      00000F C2 A3            [12]  280 	clr	_miso
                                    281 ;	main.c:130: }
      000011 22               [24]  282 	ret
                                    283 ;------------------------------------------------------------
                                    284 ;Allocation info for local variables in function 'spi_receive'
                                    285 ;------------------------------------------------------------
                                    286 ;byte                      Allocated to registers r5 r6 r7 
                                    287 ;ir                        Allocated to registers r4 
                                    288 ;x                         Allocated to stack - _bp +1
                                    289 ;------------------------------------------------------------
                                    290 ;	main.c:132: void spi_receive (char *byte){
                                    291 ;	-----------------------------------------
                                    292 ;	 function spi_receive
                                    293 ;	-----------------------------------------
      000012                        294 _spi_receive:
      000012 C0*00            [24]  295 	push	_bp
      000014 85 81*00         [24]  296 	mov	_bp,sp
      000017 05 81            [12]  297 	inc	sp
      000019 AD 82            [24]  298 	mov	r5,dpl
      00001B AE 83            [24]  299 	mov	r6,dph
      00001D AF F0            [24]  300 	mov	r7,b
                                    301 ;	main.c:134: while (cs == 0);
      00001F                        302 00101$:
      00001F 30 A0 FD         [24]  303 	jnb	_cs,00101$
                                    304 ;	main.c:136: while (sclk == 0);
      000022 7C 00            [12]  305 	mov	r4,#0x00
      000024                        306 00104$:
      000024 30 A1 FD         [24]  307 	jnb	_sclk,00104$
                                    308 ;	main.c:137: x = mosi;
      000027 A8*00            [24]  309 	mov	r0,_bp
      000029 08               [12]  310 	inc	r0
      00002A A2 A2            [12]  311 	mov	c,_mosi
      00002C E4               [12]  312 	clr	a
      00002D 33               [12]  313 	rlc	a
      00002E F6               [12]  314 	mov	@r0,a
                                    315 ;	main.c:138: spi_delay ();
      00002F C0 07            [24]  316 	push	ar7
      000031 C0 06            [24]  317 	push	ar6
      000033 C0 05            [24]  318 	push	ar5
      000035 C0 04            [24]  319 	push	ar4
      000037 12r00r00         [24]  320 	lcall	_spi_delay
      00003A D0 04            [24]  321 	pop	ar4
      00003C D0 05            [24]  322 	pop	ar5
      00003E D0 06            [24]  323 	pop	ar6
      000040 D0 07            [24]  324 	pop	ar7
                                    325 ;	main.c:139: *byte = ((*byte & ~(1<<(ir))) | (x<<(ir)));
      000042 8D 82            [24]  326 	mov	dpl,r5
      000044 8E 83            [24]  327 	mov	dph,r6
      000046 8F F0            [24]  328 	mov	b,r7
      000048 12r00r00         [24]  329 	lcall	__gptrget
      00004B FA               [12]  330 	mov	r2,a
      00004C 8C 03            [24]  331 	mov	ar3,r4
      00004E 8B F0            [24]  332 	mov	b,r3
      000050 05 F0            [12]  333 	inc	b
      000052 74 01            [12]  334 	mov	a,#0x01
      000054 80 02            [24]  335 	sjmp	00133$
      000056                        336 00131$:
      000056 25 E0            [12]  337 	add	a,acc
      000058                        338 00133$:
      000058 D5 F0 FB         [24]  339 	djnz	b,00131$
      00005B F4               [12]  340 	cpl	a
      00005C 52 02            [12]  341 	anl	ar2,a
      00005E 8C F0            [24]  342 	mov	b,r4
      000060 05 F0            [12]  343 	inc	b
      000062 A8*00            [24]  344 	mov	r0,_bp
      000064 08               [12]  345 	inc	r0
      000065 E6               [12]  346 	mov	a,@r0
      000066 80 02            [24]  347 	sjmp	00136$
      000068                        348 00134$:
      000068 25 E0            [12]  349 	add	a,acc
      00006A                        350 00136$:
      00006A D5 F0 FB         [24]  351 	djnz	b,00134$
      00006D 42 02            [12]  352 	orl	ar2,a
      00006F 8D 82            [24]  353 	mov	dpl,r5
      000071 8E 83            [24]  354 	mov	dph,r6
      000073 8F F0            [24]  355 	mov	b,r7
      000075 EA               [12]  356 	mov	a,r2
      000076 12r00r00         [24]  357 	lcall	__gptrput
                                    358 ;	main.c:135: for (ir = 0 ; ir <8 ; ir++){
      000079 0C               [12]  359 	inc	r4
      00007A BC 08 00         [24]  360 	cjne	r4,#0x08,00137$
      00007D                        361 00137$:
      00007D 40 A5            [24]  362 	jc	00104$
                                    363 ;	main.c:142: }
      00007F 15 81            [12]  364 	dec	sp
      000081 D0*00            [24]  365 	pop	_bp
      000083 22               [24]  366 	ret
                                    367 ;------------------------------------------------------------
                                    368 ;Allocation info for local variables in function 'Permutation'
                                    369 ;------------------------------------------------------------
                                    370 ;permuted_text             Allocated to stack - _bp -5
                                    371 ;type                      Allocated to stack - _bp -6
                                    372 ;table                     Allocated to stack - _bp -9
                                    373 ;plain_text                Allocated to stack - _bp +1
                                    374 ;sloc0                     Allocated to stack - _bp +4
                                    375 ;------------------------------------------------------------
                                    376 ;	main.c:308: static void Permutation ( DATA *plain_text,DATA *permuted_text,uint8 type,uint8 *table){
                                    377 ;	-----------------------------------------
                                    378 ;	 function Permutation
                                    379 ;	-----------------------------------------
      000084                        380 _Permutation:
      000084 C0*00            [24]  381 	push	_bp
      000086 85 81*00         [24]  382 	mov	_bp,sp
      000089 C0 82            [24]  383 	push	dpl
      00008B C0 83            [24]  384 	push	dph
      00008D C0 F0            [24]  385 	push	b
      00008F 05 81            [12]  386 	inc	sp
      000091 05 81            [12]  387 	inc	sp
      000093 05 81            [12]  388 	inc	sp
                                    389 ;	main.c:309: for (i = 0 ;i < type ; i++){
      000095 75*10 00         [24]  390 	mov	_i,#0x00
      000098                        391 00103$:
      000098 E5*00            [12]  392 	mov	a,_bp
      00009A 24 FA            [12]  393 	add	a,#0xfa
      00009C F8               [12]  394 	mov	r0,a
      00009D C3               [12]  395 	clr	c
      00009E E5*10            [12]  396 	mov	a,_i
      0000A0 96               [12]  397 	subb	a,@r0
      0000A1 40 03            [24]  398 	jc	00115$
      0000A3 02r01rF2         [24]  399 	ljmp	00105$
      0000A6                        400 00115$:
                                    401 ;	main.c:312: temp = GET_BIT_ARRAY(plain_text->Array[((table[i] -1) / 8)],((table[i] -1) % 8));
      0000A6 E5*00            [12]  402 	mov	a,_bp
      0000A8 24 F7            [12]  403 	add	a,#0xf7
      0000AA F8               [12]  404 	mov	r0,a
      0000AB E5*10            [12]  405 	mov	a,_i
      0000AD 26               [12]  406 	add	a,@r0
      0000AE FA               [12]  407 	mov	r2,a
      0000AF E4               [12]  408 	clr	a
      0000B0 08               [12]  409 	inc	r0
      0000B1 36               [12]  410 	addc	a,@r0
      0000B2 FB               [12]  411 	mov	r3,a
      0000B3 08               [12]  412 	inc	r0
      0000B4 86 04            [24]  413 	mov	ar4,@r0
      0000B6 8A 82            [24]  414 	mov	dpl,r2
      0000B8 8B 83            [24]  415 	mov	dph,r3
      0000BA 8C F0            [24]  416 	mov	b,r4
      0000BC 12r00r00         [24]  417 	lcall	__gptrget
      0000BF FA               [12]  418 	mov	r2,a
      0000C0 7C 00            [12]  419 	mov	r4,#0x00
      0000C2 1A               [12]  420 	dec	r2
      0000C3 BA FF 01         [24]  421 	cjne	r2,#0xff,00116$
      0000C6 1C               [12]  422 	dec	r4
      0000C7                        423 00116$:
      0000C7 C0 04            [24]  424 	push	ar4
      0000C9 C0 02            [24]  425 	push	ar2
      0000CB 74 08            [12]  426 	mov	a,#0x08
      0000CD C0 E0            [24]  427 	push	acc
      0000CF E4               [12]  428 	clr	a
      0000D0 C0 E0            [24]  429 	push	acc
      0000D2 8A 82            [24]  430 	mov	dpl,r2
      0000D4 8C 83            [24]  431 	mov	dph,r4
      0000D6 12r00r00         [24]  432 	lcall	__divsint
      0000D9 AB 82            [24]  433 	mov	r3,dpl
      0000DB AF 83            [24]  434 	mov	r7,dph
      0000DD 15 81            [12]  435 	dec	sp
      0000DF 15 81            [12]  436 	dec	sp
      0000E1 D0 02            [24]  437 	pop	ar2
      0000E3 D0 04            [24]  438 	pop	ar4
      0000E5 A8*00            [24]  439 	mov	r0,_bp
      0000E7 08               [12]  440 	inc	r0
      0000E8 EB               [12]  441 	mov	a,r3
      0000E9 26               [12]  442 	add	a,@r0
      0000EA FB               [12]  443 	mov	r3,a
      0000EB EF               [12]  444 	mov	a,r7
      0000EC 08               [12]  445 	inc	r0
      0000ED 36               [12]  446 	addc	a,@r0
      0000EE FF               [12]  447 	mov	r7,a
      0000EF 08               [12]  448 	inc	r0
      0000F0 86 06            [24]  449 	mov	ar6,@r0
      0000F2 8B 82            [24]  450 	mov	dpl,r3
      0000F4 8F 83            [24]  451 	mov	dph,r7
      0000F6 8E F0            [24]  452 	mov	b,r6
      0000F8 12r00r00         [24]  453 	lcall	__gptrget
      0000FB FB               [12]  454 	mov	r3,a
      0000FC 7F 00            [12]  455 	mov	r7,#0x00
      0000FE C0 07            [24]  456 	push	ar7
      000100 C0 03            [24]  457 	push	ar3
      000102 74 08            [12]  458 	mov	a,#0x08
      000104 C0 E0            [24]  459 	push	acc
      000106 E4               [12]  460 	clr	a
      000107 C0 E0            [24]  461 	push	acc
      000109 8A 82            [24]  462 	mov	dpl,r2
      00010B 8C 83            [24]  463 	mov	dph,r4
      00010D 12r00r00         [24]  464 	lcall	__modsint
      000110 AD 82            [24]  465 	mov	r5,dpl
      000112 15 81            [12]  466 	dec	sp
      000114 15 81            [12]  467 	dec	sp
      000116 D0 03            [24]  468 	pop	ar3
      000118 D0 07            [24]  469 	pop	ar7
      00011A 8D F0            [24]  470 	mov	b,r5
      00011C 05 F0            [12]  471 	inc	b
      00011E 80 06            [24]  472 	sjmp	00118$
      000120                        473 00117$:
      000120 EB               [12]  474 	mov	a,r3
      000121 2B               [12]  475 	add	a,r3
      000122 FB               [12]  476 	mov	r3,a
      000123 EF               [12]  477 	mov	a,r7
      000124 33               [12]  478 	rlc	a
      000125 FF               [12]  479 	mov	r7,a
      000126                        480 00118$:
      000126 D5 F0 F7         [24]  481 	djnz	b,00117$
      000129 53 03 80         [24]  482 	anl	ar3,#0x80
      00012C E4               [12]  483 	clr	a
      00012D A2 E7            [12]  484 	mov	c,acc.7
      00012F CB               [12]  485 	xch	a,r3
      000130 33               [12]  486 	rlc	a
      000131 CB               [12]  487 	xch	a,r3
      000132 33               [12]  488 	rlc	a
      000133 CB               [12]  489 	xch	a,r3
      000134 54 01            [12]  490 	anl	a,#0x01
      000136 30 E0 02         [24]  491 	jnb	acc.0,00119$
      000139 44 FE            [12]  492 	orl	a,#0xfffffffe
      00013B                        493 00119$:
      00013B 8B*11            [24]  494 	mov	_temp,r3
                                    495 ;	main.c:315: WRITE_BIT_ARRAY(permuted_text->Array[(i/8)],(i%8),temp);
      00013D E5*00            [12]  496 	mov	a,_bp
      00013F 24 FB            [12]  497 	add	a,#0xfb
      000141 F8               [12]  498 	mov	r0,a
      000142 E5*00            [12]  499 	mov	a,_bp
      000144 24 04            [12]  500 	add	a,#0x04
      000146 F9               [12]  501 	mov	r1,a
      000147 E6               [12]  502 	mov	a,@r0
      000148 F7               [12]  503 	mov	@r1,a
      000149 08               [12]  504 	inc	r0
      00014A E6               [12]  505 	mov	a,@r0
      00014B 09               [12]  506 	inc	r1
      00014C F7               [12]  507 	mov	@r1,a
      00014D 08               [12]  508 	inc	r0
      00014E E6               [12]  509 	mov	a,@r0
      00014F 09               [12]  510 	inc	r1
      000150 F7               [12]  511 	mov	@r1,a
      000151 AB*10            [24]  512 	mov	r3,_i
      000153 7C 00            [12]  513 	mov	r4,#0x00
      000155 C0 04            [24]  514 	push	ar4
      000157 C0 03            [24]  515 	push	ar3
      000159 74 08            [12]  516 	mov	a,#0x08
      00015B C0 E0            [24]  517 	push	acc
      00015D E4               [12]  518 	clr	a
      00015E C0 E0            [24]  519 	push	acc
      000160 8B 82            [24]  520 	mov	dpl,r3
      000162 8C 83            [24]  521 	mov	dph,r4
      000164 12r00r00         [24]  522 	lcall	__divsint
      000167 AA 82            [24]  523 	mov	r2,dpl
      000169 AF 83            [24]  524 	mov	r7,dph
      00016B 15 81            [12]  525 	dec	sp
      00016D 15 81            [12]  526 	dec	sp
      00016F D0 03            [24]  527 	pop	ar3
      000171 D0 04            [24]  528 	pop	ar4
      000173 E5*00            [12]  529 	mov	a,_bp
      000175 24 04            [12]  530 	add	a,#0x04
      000177 F8               [12]  531 	mov	r0,a
      000178 EA               [12]  532 	mov	a,r2
      000179 26               [12]  533 	add	a,@r0
      00017A FA               [12]  534 	mov	r2,a
      00017B EF               [12]  535 	mov	a,r7
      00017C 08               [12]  536 	inc	r0
      00017D 36               [12]  537 	addc	a,@r0
      00017E FF               [12]  538 	mov	r7,a
      00017F 08               [12]  539 	inc	r0
      000180 86 06            [24]  540 	mov	ar6,@r0
      000182 E5*00            [12]  541 	mov	a,_bp
      000184 24 04            [12]  542 	add	a,#0x04
      000186 F8               [12]  543 	mov	r0,a
      000187 74 07            [12]  544 	mov	a,#0x07
      000189 5B               [12]  545 	anl	a,r3
      00018A F6               [12]  546 	mov	@r0,a
      00018B 08               [12]  547 	inc	r0
      00018C 76 00            [12]  548 	mov	@r0,#0x00
      00018E E5*00            [12]  549 	mov	a,_bp
      000190 24 04            [12]  550 	add	a,#0x04
      000192 F8               [12]  551 	mov	r0,a
      000193 86 F0            [24]  552 	mov	b,@r0
      000195 05 F0            [12]  553 	inc	b
      000197 7C 80            [12]  554 	mov	r4,#0x80
      000199 E4               [12]  555 	clr	a
      00019A FD               [12]  556 	mov	r5,a
      00019B 33               [12]  557 	rlc	a
      00019C 92 D2            [24]  558 	mov	ov,c
      00019E 80 08            [24]  559 	sjmp	00121$
      0001A0                        560 00120$:
      0001A0 A2 D2            [12]  561 	mov	c,ov
      0001A2 ED               [12]  562 	mov	a,r5
      0001A3 13               [12]  563 	rrc	a
      0001A4 FD               [12]  564 	mov	r5,a
      0001A5 EC               [12]  565 	mov	a,r4
      0001A6 13               [12]  566 	rrc	a
      0001A7 FC               [12]  567 	mov	r4,a
      0001A8                        568 00121$:
      0001A8 D5 F0 F5         [24]  569 	djnz	b,00120$
      0001AB EC               [12]  570 	mov	a,r4
      0001AC F4               [12]  571 	cpl	a
      0001AD FC               [12]  572 	mov	r4,a
      0001AE 8A 82            [24]  573 	mov	dpl,r2
      0001B0 8F 83            [24]  574 	mov	dph,r7
      0001B2 8E F0            [24]  575 	mov	b,r6
      0001B4 12r00r00         [24]  576 	lcall	__gptrget
      0001B7 52 04            [12]  577 	anl	ar4,a
      0001B9 AB*11            [24]  578 	mov	r3,_temp
      0001BB E4               [12]  579 	clr	a
      0001BC 54 01            [12]  580 	anl	a,#0x01
      0001BE A2 E0            [12]  581 	mov	c,acc.0
      0001C0 CB               [12]  582 	xch	a,r3
      0001C1 13               [12]  583 	rrc	a
      0001C2 CB               [12]  584 	xch	a,r3
      0001C3 13               [12]  585 	rrc	a
      0001C4 CB               [12]  586 	xch	a,r3
      0001C5 FD               [12]  587 	mov	r5,a
      0001C6 E5*00            [12]  588 	mov	a,_bp
      0001C8 24 04            [12]  589 	add	a,#0x04
      0001CA F8               [12]  590 	mov	r0,a
      0001CB 86 F0            [24]  591 	mov	b,@r0
      0001CD 05 F0            [12]  592 	inc	b
      0001CF ED               [12]  593 	mov	a,r5
      0001D0 33               [12]  594 	rlc	a
      0001D1 92 D2            [24]  595 	mov	ov,c
      0001D3 80 08            [24]  596 	sjmp	00123$
      0001D5                        597 00122$:
      0001D5 A2 D2            [12]  598 	mov	c,ov
      0001D7 ED               [12]  599 	mov	a,r5
      0001D8 13               [12]  600 	rrc	a
      0001D9 FD               [12]  601 	mov	r5,a
      0001DA EB               [12]  602 	mov	a,r3
      0001DB 13               [12]  603 	rrc	a
      0001DC FB               [12]  604 	mov	r3,a
      0001DD                        605 00123$:
      0001DD D5 F0 F5         [24]  606 	djnz	b,00122$
      0001E0 EB               [12]  607 	mov	a,r3
      0001E1 42 04            [12]  608 	orl	ar4,a
      0001E3 8A 82            [24]  609 	mov	dpl,r2
      0001E5 8F 83            [24]  610 	mov	dph,r7
      0001E7 8E F0            [24]  611 	mov	b,r6
      0001E9 EC               [12]  612 	mov	a,r4
      0001EA 12r00r00         [24]  613 	lcall	__gptrput
                                    614 ;	main.c:309: for (i = 0 ;i < type ; i++){
      0001ED 05*10            [12]  615 	inc	_i
      0001EF 02r00r98         [24]  616 	ljmp	00103$
      0001F2                        617 00105$:
                                    618 ;	main.c:317: }
      0001F2 85*00 81         [24]  619 	mov	sp,_bp
      0001F5 D0*00            [24]  620 	pop	_bp
      0001F7 22               [24]  621 	ret
                                    622 ;------------------------------------------------------------
                                    623 ;Allocation info for local variables in function 'G_Function'
                                    624 ;------------------------------------------------------------
                                    625 ;sub_key                   Allocated to stack - _bp -5
                                    626 ;out_g                     Allocated to stack - _bp -8
                                    627 ;round_text                Allocated to registers r5 r6 r7 
                                    628 ;j                         Allocated to stack - _bp +16
                                    629 ;in_s_box                  Allocated to registers r3 
                                    630 ;out_s_box                 Allocated to registers r3 
                                    631 ;raw_s                     Allocated to registers r2 
                                    632 ;column_s                  Allocated to registers r7 
                                    633 ;S_boxes_out               Allocated to registers r7 r6 r5 r4 
                                    634 ;sloc0                     Allocated to stack - _bp +1
                                    635 ;sloc1                     Allocated to stack - _bp +4
                                    636 ;sloc2                     Allocated to stack - _bp +8
                                    637 ;sloc3                     Allocated to stack - _bp +11
                                    638 ;sloc4                     Allocated to stack - _bp +24
                                    639 ;sloc5                     Allocated to stack - _bp +12
                                    640 ;------------------------------------------------------------
                                    641 ;	main.c:319: void G_Function (DATA *round_text,DATA *sub_key,DATA *out_g){
                                    642 ;	-----------------------------------------
                                    643 ;	 function G_Function
                                    644 ;	-----------------------------------------
      0001F8                        645 _G_Function:
      0001F8 C0*00            [24]  646 	push	_bp
      0001FA E5 81            [12]  647 	mov	a,sp
      0001FC F5*00            [12]  648 	mov	_bp,a
      0001FE 24 10            [12]  649 	add	a,#0x10
      000200 F5 81            [12]  650 	mov	sp,a
      000202 AD 82            [24]  651 	mov	r5,dpl
      000204 AE 83            [24]  652 	mov	r6,dph
      000206 AF F0            [24]  653 	mov	r7,b
                                    654 ;	main.c:322: Temp = 0;
      000208 E4               [12]  655 	clr	a
      000209 F5*12            [12]  656 	mov	_Temp,a
      00020B F5*13            [12]  657 	mov	(_Temp + 1),a
      00020D F5*14            [12]  658 	mov	(_Temp + 2),a
      00020F F5*15            [12]  659 	mov	(_Temp + 3),a
                                    660 ;	main.c:323: for (i = 4 ; i<8 ; i++){
      000211 75*10 04         [24]  661 	mov	_i,#0x04
      000214                        662 00107$:
                                    663 ;	main.c:324: Temp <<=8;
      000214 85*14*15         [24]  664 	mov	(_Temp + 3),(_Temp + 2)
      000217 85*13*14         [24]  665 	mov	(_Temp + 2),(_Temp + 1)
      00021A 85*12*13         [24]  666 	mov	(_Temp + 1),_Temp
      00021D 75*12 00         [24]  667 	mov	_Temp,#0x00
                                    668 ;	main.c:325: Temp |= round_text->Array[i];
      000220 E5*10            [12]  669 	mov	a,_i
      000222 2D               [12]  670 	add	a,r5
      000223 FA               [12]  671 	mov	r2,a
      000224 E4               [12]  672 	clr	a
      000225 3E               [12]  673 	addc	a,r6
      000226 FB               [12]  674 	mov	r3,a
      000227 8F 04            [24]  675 	mov	ar4,r7
      000229 8A 82            [24]  676 	mov	dpl,r2
      00022B 8B 83            [24]  677 	mov	dph,r3
      00022D 8C F0            [24]  678 	mov	b,r4
      00022F 12r00r00         [24]  679 	lcall	__gptrget
      000232 FA               [12]  680 	mov	r2,a
      000233 C0 05            [24]  681 	push	ar5
      000235 C0 06            [24]  682 	push	ar6
      000237 C0 07            [24]  683 	push	ar7
      000239 E4               [12]  684 	clr	a
      00023A FB               [12]  685 	mov	r3,a
      00023B FC               [12]  686 	mov	r4,a
      00023C FF               [12]  687 	mov	r7,a
      00023D EA               [12]  688 	mov	a,r2
      00023E 42*12            [12]  689 	orl	_Temp,a
      000240 EB               [12]  690 	mov	a,r3
      000241 42*13            [12]  691 	orl	(_Temp + 1),a
      000243 EC               [12]  692 	mov	a,r4
      000244 42*14            [12]  693 	orl	(_Temp + 2),a
      000246 EF               [12]  694 	mov	a,r7
      000247 42*15            [12]  695 	orl	(_Temp + 3),a
                                    696 ;	main.c:323: for (i = 4 ; i<8 ; i++){
      000249 05*10            [12]  697 	inc	_i
      00024B C3               [12]  698 	clr	c
      00024C E5*10            [12]  699 	mov	a,_i
      00024E 94 08            [12]  700 	subb	a,#0x08
      000250 D0 07            [24]  701 	pop	ar7
      000252 D0 06            [24]  702 	pop	ar6
      000254 D0 05            [24]  703 	pop	ar5
      000256 40 BC            [24]  704 	jc	00107$
                                    705 ;	main.c:328: for (i = 0 ;i <= 47 ; i++){ //arr = {f0 ,aa, f0, aa} >>> aa f0 aa f0
      000258 75*10 00         [24]  706 	mov	_i,#0x00
      00025B E5*00            [12]  707 	mov	a,_bp
      00025D 24 F8            [12]  708 	add	a,#0xf8
      00025F F8               [12]  709 	mov	r0,a
      000260 A9*00            [24]  710 	mov	r1,_bp
      000262 09               [12]  711 	inc	r1
      000263 E6               [12]  712 	mov	a,@r0
      000264 F7               [12]  713 	mov	@r1,a
      000265 08               [12]  714 	inc	r0
      000266 E6               [12]  715 	mov	a,@r0
      000267 09               [12]  716 	inc	r1
      000268 F7               [12]  717 	mov	@r1,a
      000269 08               [12]  718 	inc	r0
      00026A E6               [12]  719 	mov	a,@r0
      00026B 09               [12]  720 	inc	r1
      00026C F7               [12]  721 	mov	@r1,a
      00026D                        722 00109$:
                                    723 ;	main.c:330: temp =(uint8)(((Temp<<(e[i]-1)) & 0x80000000)>>31) ;
      00026D E5*10            [12]  724 	mov	a,_i
      00026F 90r02rE8         [24]  725 	mov	dptr,#_e
      000272 93               [24]  726 	movc	a,@a+dptr
      000273 FC               [12]  727 	mov	r4,a
      000274 1C               [12]  728 	dec	r4
      000275 8C F0            [24]  729 	mov	b,r4
      000277 05 F0            [12]  730 	inc	b
      000279 AF*12            [24]  731 	mov	r7,_Temp
      00027B AE*13            [24]  732 	mov	r6,(_Temp + 1)
      00027D AD*14            [24]  733 	mov	r5,(_Temp + 2)
      00027F AC*15            [24]  734 	mov	r4,(_Temp + 3)
      000281 80 0C            [24]  735 	sjmp	00180$
      000283                        736 00179$:
      000283 EF               [12]  737 	mov	a,r7
      000284 2F               [12]  738 	add	a,r7
      000285 FF               [12]  739 	mov	r7,a
      000286 EE               [12]  740 	mov	a,r6
      000287 33               [12]  741 	rlc	a
      000288 FE               [12]  742 	mov	r6,a
      000289 ED               [12]  743 	mov	a,r5
      00028A 33               [12]  744 	rlc	a
      00028B FD               [12]  745 	mov	r5,a
      00028C EC               [12]  746 	mov	a,r4
      00028D 33               [12]  747 	rlc	a
      00028E FC               [12]  748 	mov	r4,a
      00028F                        749 00180$:
      00028F D5 F0 F1         [24]  750 	djnz	b,00179$
      000292 53 04 80         [24]  751 	anl	ar4,#0x80
      000295 EC               [12]  752 	mov	a,r4
      000296 23               [12]  753 	rl	a
      000297 54 01            [12]  754 	anl	a,#0x01
      000299 FF               [12]  755 	mov	r7,a
      00029A 7E 00            [12]  756 	mov	r6,#0x00
      00029C 8F*11            [24]  757 	mov	_temp,r7
                                    758 ;	main.c:334: WRITE_BIT_ARRAY(out_g->Array[(i/8)],(i%8),temp); // 
      00029E AF*10            [24]  759 	mov	r7,_i
      0002A0 C0 07            [24]  760 	push	ar7
      0002A2 C0 06            [24]  761 	push	ar6
      0002A4 74 08            [12]  762 	mov	a,#0x08
      0002A6 C0 E0            [24]  763 	push	acc
      0002A8 E4               [12]  764 	clr	a
      0002A9 C0 E0            [24]  765 	push	acc
      0002AB 8F 82            [24]  766 	mov	dpl,r7
      0002AD 8E 83            [24]  767 	mov	dph,r6
      0002AF 12r00r00         [24]  768 	lcall	__divsint
      0002B2 AA 82            [24]  769 	mov	r2,dpl
      0002B4 AC 83            [24]  770 	mov	r4,dph
      0002B6 15 81            [12]  771 	dec	sp
      0002B8 15 81            [12]  772 	dec	sp
      0002BA D0 06            [24]  773 	pop	ar6
      0002BC D0 07            [24]  774 	pop	ar7
      0002BE A8*00            [24]  775 	mov	r0,_bp
      0002C0 08               [12]  776 	inc	r0
      0002C1 E5*00            [12]  777 	mov	a,_bp
      0002C3 24 08            [12]  778 	add	a,#0x08
      0002C5 F9               [12]  779 	mov	r1,a
      0002C6 EA               [12]  780 	mov	a,r2
      0002C7 26               [12]  781 	add	a,@r0
      0002C8 F7               [12]  782 	mov	@r1,a
      0002C9 EC               [12]  783 	mov	a,r4
      0002CA 08               [12]  784 	inc	r0
      0002CB 36               [12]  785 	addc	a,@r0
      0002CC 09               [12]  786 	inc	r1
      0002CD F7               [12]  787 	mov	@r1,a
      0002CE 08               [12]  788 	inc	r0
      0002CF E6               [12]  789 	mov	a,@r0
      0002D0 09               [12]  790 	inc	r1
      0002D1 F7               [12]  791 	mov	@r1,a
      0002D2 53 07 07         [24]  792 	anl	ar7,#0x07
      0002D5 7E 00            [12]  793 	mov	r6,#0x00
      0002D7 8F F0            [24]  794 	mov	b,r7
      0002D9 05 F0            [12]  795 	inc	b
      0002DB 7A 80            [12]  796 	mov	r2,#0x80
      0002DD E4               [12]  797 	clr	a
      0002DE FC               [12]  798 	mov	r4,a
      0002DF 33               [12]  799 	rlc	a
      0002E0 92 D2            [24]  800 	mov	ov,c
      0002E2 80 08            [24]  801 	sjmp	00182$
      0002E4                        802 00181$:
      0002E4 A2 D2            [12]  803 	mov	c,ov
      0002E6 EC               [12]  804 	mov	a,r4
      0002E7 13               [12]  805 	rrc	a
      0002E8 FC               [12]  806 	mov	r4,a
      0002E9 EA               [12]  807 	mov	a,r2
      0002EA 13               [12]  808 	rrc	a
      0002EB FA               [12]  809 	mov	r2,a
      0002EC                        810 00182$:
      0002EC D5 F0 F5         [24]  811 	djnz	b,00181$
      0002EF EA               [12]  812 	mov	a,r2
      0002F0 F4               [12]  813 	cpl	a
      0002F1 FA               [12]  814 	mov	r2,a
      0002F2 E5*00            [12]  815 	mov	a,_bp
      0002F4 24 08            [12]  816 	add	a,#0x08
      0002F6 F8               [12]  817 	mov	r0,a
      0002F7 86 82            [24]  818 	mov	dpl,@r0
      0002F9 08               [12]  819 	inc	r0
      0002FA 86 83            [24]  820 	mov	dph,@r0
      0002FC 08               [12]  821 	inc	r0
      0002FD 86 F0            [24]  822 	mov	b,@r0
      0002FF 12r00r00         [24]  823 	lcall	__gptrget
      000302 52 02            [12]  824 	anl	ar2,a
      000304 AB*11            [24]  825 	mov	r3,_temp
      000306 E4               [12]  826 	clr	a
      000307 C3               [12]  827 	clr	c
      000308 CB               [12]  828 	xch	a,r3
      000309 13               [12]  829 	rrc	a
      00030A CB               [12]  830 	xch	a,r3
      00030B 13               [12]  831 	rrc	a
      00030C CB               [12]  832 	xch	a,r3
      00030D FC               [12]  833 	mov	r4,a
      00030E 8F F0            [24]  834 	mov	b,r7
      000310 05 F0            [12]  835 	inc	b
      000312 EC               [12]  836 	mov	a,r4
      000313 33               [12]  837 	rlc	a
      000314 92 D2            [24]  838 	mov	ov,c
      000316 80 08            [24]  839 	sjmp	00184$
      000318                        840 00183$:
      000318 A2 D2            [12]  841 	mov	c,ov
      00031A EC               [12]  842 	mov	a,r4
      00031B 13               [12]  843 	rrc	a
      00031C FC               [12]  844 	mov	r4,a
      00031D EB               [12]  845 	mov	a,r3
      00031E 13               [12]  846 	rrc	a
      00031F FB               [12]  847 	mov	r3,a
      000320                        848 00184$:
      000320 D5 F0 F5         [24]  849 	djnz	b,00183$
      000323 EB               [12]  850 	mov	a,r3
      000324 42 02            [12]  851 	orl	ar2,a
      000326 E5*00            [12]  852 	mov	a,_bp
      000328 24 08            [12]  853 	add	a,#0x08
      00032A F8               [12]  854 	mov	r0,a
      00032B 86 82            [24]  855 	mov	dpl,@r0
      00032D 08               [12]  856 	inc	r0
      00032E 86 83            [24]  857 	mov	dph,@r0
      000330 08               [12]  858 	inc	r0
      000331 86 F0            [24]  859 	mov	b,@r0
      000333 EA               [12]  860 	mov	a,r2
      000334 12r00r00         [24]  861 	lcall	__gptrput
                                    862 ;	main.c:328: for (i = 0 ;i <= 47 ; i++){ //arr = {f0 ,aa, f0, aa} >>> aa f0 aa f0
      000337 05*10            [12]  863 	inc	_i
      000339 E5*10            [12]  864 	mov	a,_i
      00033B 24 D0            [12]  865 	add	a,#0xff - 0x2f
      00033D 40 03            [24]  866 	jc	00185$
      00033F 02r02r6D         [24]  867 	ljmp	00109$
      000342                        868 00185$:
                                    869 ;	main.c:339: for (i = 0; i<7 ;i++){
      000342 75*10 00         [24]  870 	mov	_i,#0x00
      000345                        871 00111$:
                                    872 ;	main.c:340: out_g->Array[i] ^=sub_key->Array[i];
      000345 A8*00            [24]  873 	mov	r0,_bp
      000347 08               [12]  874 	inc	r0
      000348 E5*10            [12]  875 	mov	a,_i
      00034A 26               [12]  876 	add	a,@r0
      00034B FF               [12]  877 	mov	r7,a
      00034C E4               [12]  878 	clr	a
      00034D 08               [12]  879 	inc	r0
      00034E 36               [12]  880 	addc	a,@r0
      00034F FE               [12]  881 	mov	r6,a
      000350 08               [12]  882 	inc	r0
      000351 86 05            [24]  883 	mov	ar5,@r0
      000353 A8*00            [24]  884 	mov	r0,_bp
      000355 08               [12]  885 	inc	r0
      000356 E5*00            [12]  886 	mov	a,_bp
      000358 24 04            [12]  887 	add	a,#0x04
      00035A F9               [12]  888 	mov	r1,a
      00035B E5*10            [12]  889 	mov	a,_i
      00035D 26               [12]  890 	add	a,@r0
      00035E F7               [12]  891 	mov	@r1,a
      00035F E4               [12]  892 	clr	a
      000360 08               [12]  893 	inc	r0
      000361 36               [12]  894 	addc	a,@r0
      000362 09               [12]  895 	inc	r1
      000363 F7               [12]  896 	mov	@r1,a
      000364 08               [12]  897 	inc	r0
      000365 E6               [12]  898 	mov	a,@r0
      000366 09               [12]  899 	inc	r1
      000367 F7               [12]  900 	mov	@r1,a
      000368 E5*00            [12]  901 	mov	a,_bp
      00036A 24 FB            [12]  902 	add	a,#0xfb
      00036C F8               [12]  903 	mov	r0,a
      00036D 86 02            [24]  904 	mov	ar2,@r0
      00036F 08               [12]  905 	inc	r0
      000370 86 03            [24]  906 	mov	ar3,@r0
      000372 08               [12]  907 	inc	r0
      000373 86 04            [24]  908 	mov	ar4,@r0
      000375 E5*10            [12]  909 	mov	a,_i
      000377 2A               [12]  910 	add	a,r2
      000378 FA               [12]  911 	mov	r2,a
      000379 E4               [12]  912 	clr	a
      00037A 3B               [12]  913 	addc	a,r3
      00037B FB               [12]  914 	mov	r3,a
      00037C 8A 82            [24]  915 	mov	dpl,r2
      00037E 8B 83            [24]  916 	mov	dph,r3
      000380 8C F0            [24]  917 	mov	b,r4
      000382 12r00r00         [24]  918 	lcall	__gptrget
      000385 FA               [12]  919 	mov	r2,a
      000386 E5*00            [12]  920 	mov	a,_bp
      000388 24 04            [12]  921 	add	a,#0x04
      00038A F8               [12]  922 	mov	r0,a
      00038B 86 82            [24]  923 	mov	dpl,@r0
      00038D 08               [12]  924 	inc	r0
      00038E 86 83            [24]  925 	mov	dph,@r0
      000390 08               [12]  926 	inc	r0
      000391 86 F0            [24]  927 	mov	b,@r0
      000393 12r00r00         [24]  928 	lcall	__gptrget
      000396 FC               [12]  929 	mov	r4,a
      000397 62 02            [12]  930 	xrl	ar2,a
      000399 8F 82            [24]  931 	mov	dpl,r7
      00039B 8E 83            [24]  932 	mov	dph,r6
      00039D 8D F0            [24]  933 	mov	b,r5
      00039F EA               [12]  934 	mov	a,r2
      0003A0 12r00r00         [24]  935 	lcall	__gptrput
                                    936 ;	main.c:339: for (i = 0; i<7 ;i++){
      0003A3 05*10            [12]  937 	inc	_i
      0003A5 74 F9            [12]  938 	mov	a,#0x100 - 0x07
      0003A7 25*10            [12]  939 	add	a,_i
      0003A9 50 9A            [24]  940 	jnc	00111$
                                    941 ;	main.c:346: uint32 S_boxes_out = 0;				// Output of the s-boxes
      0003AB E5*00            [12]  942 	mov	a,_bp
      0003AD 24 04            [12]  943 	add	a,#0x04
      0003AF F8               [12]  944 	mov	r0,a
      0003B0 E4               [12]  945 	clr	a
      0003B1 F6               [12]  946 	mov	@r0,a
      0003B2 08               [12]  947 	inc	r0
      0003B3 F6               [12]  948 	mov	@r0,a
      0003B4 08               [12]  949 	inc	r0
      0003B5 F6               [12]  950 	mov	@r0,a
      0003B6 08               [12]  951 	inc	r0
      0003B7 F6               [12]  952 	mov	@r0,a
                                    953 ;	main.c:347: for (j = 0; j < 8; j++){
      0003B8 E5*00            [12]  954 	mov	a,_bp
      0003BA 24 10            [12]  955 	add	a,#0x10
      0003BC F8               [12]  956 	mov	r0,a
      0003BD 76 00            [12]  957 	mov	@r0,#0x00
      0003BF                        958 00116$:
                                    959 ;	main.c:348: in_s_box  = 0;
      0003BF E5*00            [12]  960 	mov	a,_bp
      0003C1 24 0B            [12]  961 	add	a,#0x0b
      0003C3 F8               [12]  962 	mov	r0,a
      0003C4 76 00            [12]  963 	mov	@r0,#0x00
                                    964 ;	main.c:352: for (i = j*6 ;i < (j*6+6) ; i++){                // 0 6    6 12      12 18   18 24       24 30        30 36      36 42   42 48   
      0003C6 E5*00            [12]  965 	mov	a,_bp
      0003C8 24 10            [12]  966 	add	a,#0x10
      0003CA F8               [12]  967 	mov	r0,a
      0003CB E6               [12]  968 	mov	a,@r0
      0003CC 75 F0 06         [24]  969 	mov	b,#0x06
      0003CF A4               [48]  970 	mul	ab
      0003D0 F5*10            [12]  971 	mov	_i,a
      0003D2                        972 00114$:
      0003D2 E5*00            [12]  973 	mov	a,_bp
      0003D4 24 10            [12]  974 	add	a,#0x10
      0003D6 F8               [12]  975 	mov	r0,a
      0003D7 86 02            [24]  976 	mov	ar2,@r0
      0003D9 7B 00            [12]  977 	mov	r3,#0x00
      0003DB C0 02            [24]  978 	push	ar2
      0003DD C0 03            [24]  979 	push	ar3
      0003DF 90 00 06         [24]  980 	mov	dptr,#0x0006
      0003E2 12r00r00         [24]  981 	lcall	__mulint
      0003E5 AA 82            [24]  982 	mov	r2,dpl
      0003E7 AB 83            [24]  983 	mov	r3,dph
      0003E9 15 81            [12]  984 	dec	sp
      0003EB 15 81            [12]  985 	dec	sp
      0003ED 74 06            [12]  986 	mov	a,#0x06
      0003EF 2A               [12]  987 	add	a,r2
      0003F0 FA               [12]  988 	mov	r2,a
      0003F1 E4               [12]  989 	clr	a
      0003F2 3B               [12]  990 	addc	a,r3
      0003F3 FB               [12]  991 	mov	r3,a
      0003F4 AF*10            [24]  992 	mov	r7,_i
      0003F6 7E 00            [12]  993 	mov	r6,#0x00
      0003F8 C3               [12]  994 	clr	c
      0003F9 EF               [12]  995 	mov	a,r7
      0003FA 9A               [12]  996 	subb	a,r2
      0003FB EE               [12]  997 	mov	a,r6
      0003FC 64 80            [12]  998 	xrl	a,#0x80
      0003FE 8B F0            [24]  999 	mov	b,r3
      000400 63 F0 80         [24] 1000 	xrl	b,#0x80
      000403 95 F0            [12] 1001 	subb	a,b
      000405 50 79            [24] 1002 	jnc	00104$
                                   1003 ;	main.c:353: temp = GET_BIT_ARRAY(out_g->Array[(i/8)],(i%8));
      000407 C0 07            [24] 1004 	push	ar7
      000409 C0 06            [24] 1005 	push	ar6
      00040B 74 08            [12] 1006 	mov	a,#0x08
      00040D C0 E0            [24] 1007 	push	acc
      00040F E4               [12] 1008 	clr	a
      000410 C0 E0            [24] 1009 	push	acc
      000412 8F 82            [24] 1010 	mov	dpl,r7
      000414 8E 83            [24] 1011 	mov	dph,r6
      000416 12r00r00         [24] 1012 	lcall	__divsint
      000419 AA 82            [24] 1013 	mov	r2,dpl
      00041B AC 83            [24] 1014 	mov	r4,dph
      00041D 15 81            [12] 1015 	dec	sp
      00041F 15 81            [12] 1016 	dec	sp
      000421 D0 06            [24] 1017 	pop	ar6
      000423 D0 07            [24] 1018 	pop	ar7
      000425 A8*00            [24] 1019 	mov	r0,_bp
      000427 08               [12] 1020 	inc	r0
      000428 EA               [12] 1021 	mov	a,r2
      000429 26               [12] 1022 	add	a,@r0
      00042A FA               [12] 1023 	mov	r2,a
      00042B EC               [12] 1024 	mov	a,r4
      00042C 08               [12] 1025 	inc	r0
      00042D 36               [12] 1026 	addc	a,@r0
      00042E FB               [12] 1027 	mov	r3,a
      00042F 08               [12] 1028 	inc	r0
      000430 86 04            [24] 1029 	mov	ar4,@r0
      000432 8A 82            [24] 1030 	mov	dpl,r2
      000434 8B 83            [24] 1031 	mov	dph,r3
      000436 8C F0            [24] 1032 	mov	b,r4
      000438 12r00r00         [24] 1033 	lcall	__gptrget
      00043B FA               [12] 1034 	mov	r2,a
      00043C 7D 00            [12] 1035 	mov	r5,#0x00
      00043E 74 07            [12] 1036 	mov	a,#0x07
      000440 5F               [12] 1037 	anl	a,r7
      000441 FB               [12] 1038 	mov	r3,a
      000442 8B F0            [24] 1039 	mov	b,r3
      000444 05 F0            [12] 1040 	inc	b
      000446 AB 02            [24] 1041 	mov	r3,ar2
      000448 AC 05            [24] 1042 	mov	r4,ar5
      00044A 80 06            [24] 1043 	sjmp	00189$
      00044C                       1044 00188$:
      00044C EB               [12] 1045 	mov	a,r3
      00044D 2B               [12] 1046 	add	a,r3
      00044E FB               [12] 1047 	mov	r3,a
      00044F EC               [12] 1048 	mov	a,r4
      000450 33               [12] 1049 	rlc	a
      000451 FC               [12] 1050 	mov	r4,a
      000452                       1051 00189$:
      000452 D5 F0 F7         [24] 1052 	djnz	b,00188$
      000455 53 03 80         [24] 1053 	anl	ar3,#0x80
      000458 E4               [12] 1054 	clr	a
      000459 A2 E7            [12] 1055 	mov	c,acc.7
      00045B CB               [12] 1056 	xch	a,r3
      00045C 33               [12] 1057 	rlc	a
      00045D CB               [12] 1058 	xch	a,r3
      00045E 33               [12] 1059 	rlc	a
      00045F CB               [12] 1060 	xch	a,r3
      000460 54 01            [12] 1061 	anl	a,#0x01
      000462 30 E0 02         [24] 1062 	jnb	acc.0,00190$
      000465 44 FE            [12] 1063 	orl	a,#0xfffffffe
      000467                       1064 00190$:
      000467 FC               [12] 1065 	mov	r4,a
      000468 8B*11            [24] 1066 	mov	_temp,r3
                                   1067 ;	main.c:354: in_s_box <<= 1;	
      00046A E5*00            [12] 1068 	mov	a,_bp
      00046C 24 0B            [12] 1069 	add	a,#0x0b
      00046E F8               [12] 1070 	mov	r0,a
      00046F E6               [12] 1071 	mov	a,@r0
      000470 26               [12] 1072 	add	a,@r0
      000471 FB               [12] 1073 	mov	r3,a
                                   1074 ;	main.c:355: in_s_box |= temp ;
      000472 E5*00            [12] 1075 	mov	a,_bp
      000474 24 0B            [12] 1076 	add	a,#0x0b
      000476 F8               [12] 1077 	mov	r0,a
      000477 E5*11            [12] 1078 	mov	a,_temp
      000479 4B               [12] 1079 	orl	a,r3
      00047A F6               [12] 1080 	mov	@r0,a
                                   1081 ;	main.c:352: for (i = j*6 ;i < (j*6+6) ; i++){                // 0 6    6 12      12 18   18 24       24 30        30 36      36 42   42 48   
      00047B 05*10            [12] 1082 	inc	_i
      00047D 02r03rD2         [24] 1083 	ljmp	00114$
      000480                       1084 00104$:
                                   1085 ;	main.c:358: column_s = in_s_box & 0b00011110;
      000480 E5*00            [12] 1086 	mov	a,_bp
      000482 24 0B            [12] 1087 	add	a,#0x0b
      000484 F8               [12] 1088 	mov	r0,a
      000485 74 1E            [12] 1089 	mov	a,#0x1e
      000487 56               [12] 1090 	anl	a,@r0
                                   1091 ;	main.c:359: column_s >>= 1;
      000488 C3               [12] 1092 	clr	c
      000489 13               [12] 1093 	rrc	a
      00048A FF               [12] 1094 	mov	r7,a
                                   1095 ;	main.c:361: raw_s = GET_BIT(in_s_box,5);     
      00048B E5*00            [12] 1096 	mov	a,_bp
      00048D 24 0B            [12] 1097 	add	a,#0x0b
      00048F F8               [12] 1098 	mov	r0,a
      000490 E6               [12] 1099 	mov	a,@r0
      000491 A2 E5            [12] 1100 	mov	c,acc[5]
      000493 E4               [12] 1101 	clr	a
      000494 33               [12] 1102 	rlc	a
                                   1103 ;	main.c:362: raw_s <<= 1;
      000495 25 E0            [12] 1104 	add	a,acc
      000497 FA               [12] 1105 	mov	r2,a
                                   1106 ;	main.c:363: raw_s |= GET_BIT(in_s_box,0);
      000498 E5*00            [12] 1107 	mov	a,_bp
      00049A 24 0B            [12] 1108 	add	a,#0x0b
      00049C F8               [12] 1109 	mov	r0,a
      00049D E6               [12] 1110 	mov	a,@r0
      00049E 54 01            [12] 1111 	anl	a,#0x01
      0004A0 42 02            [12] 1112 	orl	ar2,a
                                   1113 ;	main.c:364: out_s_box = arr[j][raw_s * 16 + column_s];
      0004A2 E5*00            [12] 1114 	mov	a,_bp
      0004A4 24 10            [12] 1115 	add	a,#0x10
      0004A6 F8               [12] 1116 	mov	r0,a
      0004A7 E6               [12] 1117 	mov	a,@r0
      0004A8 25 E0            [12] 1118 	add	a,acc
      0004AA 24r00            [12] 1119 	add	a,#_arr
      0004AC F9               [12] 1120 	mov	r1,a
      0004AD 87 06            [24] 1121 	mov	ar6,@r1
      0004AF 09               [12] 1122 	inc	r1
      0004B0 87 05            [24] 1123 	mov	ar5,@r1
      0004B2 19               [12] 1124 	dec	r1
      0004B3 7C 00            [12] 1125 	mov	r4,#0x00
      0004B5 E5*00            [12] 1126 	mov	a,_bp
      0004B7 24 08            [12] 1127 	add	a,#0x08
      0004B9 F8               [12] 1128 	mov	r0,a
      0004BA A6 02            [24] 1129 	mov	@r0,ar2
      0004BC EC               [12] 1130 	mov	a,r4
      0004BD C4               [12] 1131 	swap	a
      0004BE 54 F0            [12] 1132 	anl	a,#0xf0
      0004C0 C6               [12] 1133 	xch	a,@r0
      0004C1 C4               [12] 1134 	swap	a
      0004C2 C6               [12] 1135 	xch	a,@r0
      0004C3 66               [12] 1136 	xrl	a,@r0
      0004C4 C6               [12] 1137 	xch	a,@r0
      0004C5 54 F0            [12] 1138 	anl	a,#0xf0
      0004C7 C6               [12] 1139 	xch	a,@r0
      0004C8 66               [12] 1140 	xrl	a,@r0
      0004C9 08               [12] 1141 	inc	r0
      0004CA F6               [12] 1142 	mov	@r0,a
      0004CB 8F 03            [24] 1143 	mov	ar3,r7
      0004CD 7C 00            [12] 1144 	mov	r4,#0x00
      0004CF E5*00            [12] 1145 	mov	a,_bp
      0004D1 24 08            [12] 1146 	add	a,#0x08
      0004D3 F8               [12] 1147 	mov	r0,a
      0004D4 EB               [12] 1148 	mov	a,r3
      0004D5 26               [12] 1149 	add	a,@r0
      0004D6 FB               [12] 1150 	mov	r3,a
      0004D7 EC               [12] 1151 	mov	a,r4
      0004D8 08               [12] 1152 	inc	r0
      0004D9 36               [12] 1153 	addc	a,@r0
      0004DA FC               [12] 1154 	mov	r4,a
      0004DB EB               [12] 1155 	mov	a,r3
      0004DC 2E               [12] 1156 	add	a,r6
      0004DD F5 82            [12] 1157 	mov	dpl,a
      0004DF EC               [12] 1158 	mov	a,r4
      0004E0 3D               [12] 1159 	addc	a,r5
      0004E1 F5 83            [12] 1160 	mov	dph,a
      0004E3 E4               [12] 1161 	clr	a
      0004E4 93               [24] 1162 	movc	a,@a+dptr
      0004E5 FB               [12] 1163 	mov	r3,a
                                   1164 ;	main.c:365: S_boxes_out <<= 4;
      0004E6 E5*00            [12] 1165 	mov	a,_bp
      0004E8 24 04            [12] 1166 	add	a,#0x04
      0004EA F8               [12] 1167 	mov	r0,a
      0004EB 08               [12] 1168 	inc	r0
      0004EC 08               [12] 1169 	inc	r0
      0004ED 86 05            [24] 1170 	mov	ar5,@r0
      0004EF 08               [12] 1171 	inc	r0
      0004F0 E6               [12] 1172 	mov	a,@r0
      0004F1 C4               [12] 1173 	swap	a
      0004F2 54 F0            [12] 1174 	anl	a,#0xf0
      0004F4 CD               [12] 1175 	xch	a,r5
      0004F5 C4               [12] 1176 	swap	a
      0004F6 CD               [12] 1177 	xch	a,r5
      0004F7 6D               [12] 1178 	xrl	a,r5
      0004F8 CD               [12] 1179 	xch	a,r5
      0004F9 54 F0            [12] 1180 	anl	a,#0xf0
      0004FB CD               [12] 1181 	xch	a,r5
      0004FC 6D               [12] 1182 	xrl	a,r5
      0004FD FC               [12] 1183 	mov	r4,a
      0004FE 18               [12] 1184 	dec	r0
      0004FF 18               [12] 1185 	dec	r0
      000500 E6               [12] 1186 	mov	a,@r0
      000501 C4               [12] 1187 	swap	a
      000502 54 0F            [12] 1188 	anl	a,#0x0f
      000504 4D               [12] 1189 	orl	a,r5
      000505 FD               [12] 1190 	mov	r5,a
      000506 18               [12] 1191 	dec	r0
      000507 86 07            [24] 1192 	mov	ar7,@r0
      000509 08               [12] 1193 	inc	r0
      00050A E6               [12] 1194 	mov	a,@r0
      00050B C4               [12] 1195 	swap	a
      00050C 54 F0            [12] 1196 	anl	a,#0xf0
      00050E CF               [12] 1197 	xch	a,r7
      00050F C4               [12] 1198 	swap	a
      000510 CF               [12] 1199 	xch	a,r7
      000511 6F               [12] 1200 	xrl	a,r7
      000512 CF               [12] 1201 	xch	a,r7
      000513 54 F0            [12] 1202 	anl	a,#0xf0
      000515 CF               [12] 1203 	xch	a,r7
      000516 6F               [12] 1204 	xrl	a,r7
      000517 FE               [12] 1205 	mov	r6,a
                                   1206 ;	main.c:366: S_boxes_out |= out_s_box; 
      000518 E5*00            [12] 1207 	mov	a,_bp
      00051A 24 0C            [12] 1208 	add	a,#0x0c
      00051C F8               [12] 1209 	mov	r0,a
      00051D A6 03            [24] 1210 	mov	@r0,ar3
      00051F 08               [12] 1211 	inc	r0
      000520 76 00            [12] 1212 	mov	@r0,#0x00
      000522 08               [12] 1213 	inc	r0
      000523 76 00            [12] 1214 	mov	@r0,#0x00
      000525 08               [12] 1215 	inc	r0
      000526 76 00            [12] 1216 	mov	@r0,#0x00
      000528 E5*00            [12] 1217 	mov	a,_bp
      00052A 24 0C            [12] 1218 	add	a,#0x0c
      00052C F8               [12] 1219 	mov	r0,a
      00052D E5*00            [12] 1220 	mov	a,_bp
      00052F 24 04            [12] 1221 	add	a,#0x04
      000531 F9               [12] 1222 	mov	r1,a
      000532 E6               [12] 1223 	mov	a,@r0
      000533 4F               [12] 1224 	orl	a,r7
      000534 F7               [12] 1225 	mov	@r1,a
      000535 08               [12] 1226 	inc	r0
      000536 E6               [12] 1227 	mov	a,@r0
      000537 4E               [12] 1228 	orl	a,r6
      000538 09               [12] 1229 	inc	r1
      000539 F7               [12] 1230 	mov	@r1,a
      00053A 08               [12] 1231 	inc	r0
      00053B E6               [12] 1232 	mov	a,@r0
      00053C 4D               [12] 1233 	orl	a,r5
      00053D 09               [12] 1234 	inc	r1
      00053E F7               [12] 1235 	mov	@r1,a
      00053F 08               [12] 1236 	inc	r0
      000540 E6               [12] 1237 	mov	a,@r0
      000541 4C               [12] 1238 	orl	a,r4
      000542 09               [12] 1239 	inc	r1
      000543 F7               [12] 1240 	mov	@r1,a
                                   1241 ;	main.c:347: for (j = 0; j < 8; j++){
      000544 E5*00            [12] 1242 	mov	a,_bp
      000546 24 10            [12] 1243 	add	a,#0x10
      000548 F8               [12] 1244 	mov	r0,a
      000549 06               [12] 1245 	inc	@r0
      00054A E5*00            [12] 1246 	mov	a,_bp
      00054C 24 10            [12] 1247 	add	a,#0x10
      00054E F8               [12] 1248 	mov	r0,a
      00054F B6 08 00         [24] 1249 	cjne	@r0,#0x08,00191$
      000552                       1250 00191$:
      000552 50 03            [24] 1251 	jnc	00192$
      000554 02r03rBF         [24] 1252 	ljmp	00116$
      000557                       1253 00192$:
                                   1254 ;	main.c:369: out_g->Half[0]=0;
      000557 A8*00            [24] 1255 	mov	r0,_bp
      000559 08               [12] 1256 	inc	r0
      00055A 86 82            [24] 1257 	mov	dpl,@r0
      00055C 08               [12] 1258 	inc	r0
      00055D 86 83            [24] 1259 	mov	dph,@r0
      00055F 08               [12] 1260 	inc	r0
      000560 86 F0            [24] 1261 	mov	b,@r0
      000562 E4               [12] 1262 	clr	a
      000563 12r00r00         [24] 1263 	lcall	__gptrput
      000566 A3               [24] 1264 	inc	dptr
      000567 12r00r00         [24] 1265 	lcall	__gptrput
      00056A A3               [24] 1266 	inc	dptr
      00056B 12r00r00         [24] 1267 	lcall	__gptrput
      00056E A3               [24] 1268 	inc	dptr
      00056F 12r00r00         [24] 1269 	lcall	__gptrput
                                   1270 ;	main.c:370: out_g->Half[1]=0;
      000572 A8*00            [24] 1271 	mov	r0,_bp
      000574 08               [12] 1272 	inc	r0
      000575 74 04            [12] 1273 	mov	a,#0x04
      000577 26               [12] 1274 	add	a,@r0
      000578 FA               [12] 1275 	mov	r2,a
      000579 E4               [12] 1276 	clr	a
      00057A 08               [12] 1277 	inc	r0
      00057B 36               [12] 1278 	addc	a,@r0
      00057C FB               [12] 1279 	mov	r3,a
      00057D 08               [12] 1280 	inc	r0
      00057E 86 04            [24] 1281 	mov	ar4,@r0
      000580 8A 82            [24] 1282 	mov	dpl,r2
      000582 8B 83            [24] 1283 	mov	dph,r3
      000584 8C F0            [24] 1284 	mov	b,r4
      000586 E4               [12] 1285 	clr	a
      000587 12r00r00         [24] 1286 	lcall	__gptrput
      00058A A3               [24] 1287 	inc	dptr
      00058B 12r00r00         [24] 1288 	lcall	__gptrput
      00058E A3               [24] 1289 	inc	dptr
      00058F 12r00r00         [24] 1290 	lcall	__gptrput
      000592 A3               [24] 1291 	inc	dptr
      000593 12r00r00         [24] 1292 	lcall	__gptrput
                                   1293 ;	main.c:372: for (i = 0 ;i <= 31 ; i++){
      000596 F5*10            [12] 1294 	mov	_i,a
      000598                       1295 00118$:
                                   1296 ;	main.c:373: temp = (uint8)(((S_boxes_out<<(p[i]-1)) & 0x80000000)>>31) ;//GET_BIT_ARRAY(S_boxes_out,(p[i] -1));
      000598 E5*10            [12] 1297 	mov	a,_i
      00059A 90r03r18         [24] 1298 	mov	dptr,#_p
      00059D 93               [24] 1299 	movc	a,@a+dptr
      00059E FC               [12] 1300 	mov	r4,a
      00059F 1C               [12] 1301 	dec	r4
      0005A0 8C F0            [24] 1302 	mov	b,r4
      0005A2 05 F0            [12] 1303 	inc	b
      0005A4 E5*00            [12] 1304 	mov	a,_bp
      0005A6 24 04            [12] 1305 	add	a,#0x04
      0005A8 F8               [12] 1306 	mov	r0,a
      0005A9 86 07            [24] 1307 	mov	ar7,@r0
      0005AB 08               [12] 1308 	inc	r0
      0005AC 86 06            [24] 1309 	mov	ar6,@r0
      0005AE 08               [12] 1310 	inc	r0
      0005AF 86 05            [24] 1311 	mov	ar5,@r0
      0005B1 08               [12] 1312 	inc	r0
      0005B2 86 04            [24] 1313 	mov	ar4,@r0
      0005B4 80 0C            [24] 1314 	sjmp	00194$
      0005B6                       1315 00193$:
      0005B6 EF               [12] 1316 	mov	a,r7
      0005B7 2F               [12] 1317 	add	a,r7
      0005B8 FF               [12] 1318 	mov	r7,a
      0005B9 EE               [12] 1319 	mov	a,r6
      0005BA 33               [12] 1320 	rlc	a
      0005BB FE               [12] 1321 	mov	r6,a
      0005BC ED               [12] 1322 	mov	a,r5
      0005BD 33               [12] 1323 	rlc	a
      0005BE FD               [12] 1324 	mov	r5,a
      0005BF EC               [12] 1325 	mov	a,r4
      0005C0 33               [12] 1326 	rlc	a
      0005C1 FC               [12] 1327 	mov	r4,a
      0005C2                       1328 00194$:
      0005C2 D5 F0 F1         [24] 1329 	djnz	b,00193$
      0005C5 53 04 80         [24] 1330 	anl	ar4,#0x80
      0005C8 EC               [12] 1331 	mov	a,r4
      0005C9 23               [12] 1332 	rl	a
      0005CA 54 01            [12] 1333 	anl	a,#0x01
      0005CC FF               [12] 1334 	mov	r7,a
      0005CD 7C 00            [12] 1335 	mov	r4,#0x00
      0005CF 8F*11            [24] 1336 	mov	_temp,r7
                                   1337 ;	main.c:374: WRITE_BIT_ARRAY(out_g->Array[((i+32) / 8)],((i+32) % 8),temp); // 
      0005D1 AB*10            [24] 1338 	mov	r3,_i
      0005D3 74 20            [12] 1339 	mov	a,#0x20
      0005D5 2B               [12] 1340 	add	a,r3
      0005D6 FF               [12] 1341 	mov	r7,a
      0005D7 E4               [12] 1342 	clr	a
      0005D8 3C               [12] 1343 	addc	a,r4
      0005D9 FE               [12] 1344 	mov	r6,a
      0005DA C0 07            [24] 1345 	push	ar7
      0005DC C0 06            [24] 1346 	push	ar6
      0005DE 74 08            [12] 1347 	mov	a,#0x08
      0005E0 C0 E0            [24] 1348 	push	acc
      0005E2 E4               [12] 1349 	clr	a
      0005E3 C0 E0            [24] 1350 	push	acc
      0005E5 8F 82            [24] 1351 	mov	dpl,r7
      0005E7 8E 83            [24] 1352 	mov	dph,r6
      0005E9 12r00r00         [24] 1353 	lcall	__divsint
      0005EC AA 82            [24] 1354 	mov	r2,dpl
      0005EE AC 83            [24] 1355 	mov	r4,dph
      0005F0 15 81            [12] 1356 	dec	sp
      0005F2 15 81            [12] 1357 	dec	sp
      0005F4 D0 06            [24] 1358 	pop	ar6
      0005F6 D0 07            [24] 1359 	pop	ar7
      0005F8 A8*00            [24] 1360 	mov	r0,_bp
      0005FA 08               [12] 1361 	inc	r0
      0005FB E5*00            [12] 1362 	mov	a,_bp
      0005FD 24 08            [12] 1363 	add	a,#0x08
      0005FF F9               [12] 1364 	mov	r1,a
      000600 EA               [12] 1365 	mov	a,r2
      000601 26               [12] 1366 	add	a,@r0
      000602 F7               [12] 1367 	mov	@r1,a
      000603 EC               [12] 1368 	mov	a,r4
      000604 08               [12] 1369 	inc	r0
      000605 36               [12] 1370 	addc	a,@r0
      000606 09               [12] 1371 	inc	r1
      000607 F7               [12] 1372 	mov	@r1,a
      000608 08               [12] 1373 	inc	r0
      000609 E6               [12] 1374 	mov	a,@r0
      00060A 09               [12] 1375 	inc	r1
      00060B F7               [12] 1376 	mov	@r1,a
      00060C 74 08            [12] 1377 	mov	a,#0x08
      00060E C0 E0            [24] 1378 	push	acc
      000610 E4               [12] 1379 	clr	a
      000611 C0 E0            [24] 1380 	push	acc
      000613 8F 82            [24] 1381 	mov	dpl,r7
      000615 8E 83            [24] 1382 	mov	dph,r6
      000617 12r00r00         [24] 1383 	lcall	__modsint
      00061A AF 82            [24] 1384 	mov	r7,dpl
      00061C AE 83            [24] 1385 	mov	r6,dph
      00061E 15 81            [12] 1386 	dec	sp
      000620 15 81            [12] 1387 	dec	sp
      000622 8F F0            [24] 1388 	mov	b,r7
      000624 05 F0            [12] 1389 	inc	b
      000626 7A 80            [12] 1390 	mov	r2,#0x80
      000628 E4               [12] 1391 	clr	a
      000629 FC               [12] 1392 	mov	r4,a
      00062A 33               [12] 1393 	rlc	a
      00062B 92 D2            [24] 1394 	mov	ov,c
      00062D 80 08            [24] 1395 	sjmp	00196$
      00062F                       1396 00195$:
      00062F A2 D2            [12] 1397 	mov	c,ov
      000631 EC               [12] 1398 	mov	a,r4
      000632 13               [12] 1399 	rrc	a
      000633 FC               [12] 1400 	mov	r4,a
      000634 EA               [12] 1401 	mov	a,r2
      000635 13               [12] 1402 	rrc	a
      000636 FA               [12] 1403 	mov	r2,a
      000637                       1404 00196$:
      000637 D5 F0 F5         [24] 1405 	djnz	b,00195$
      00063A EA               [12] 1406 	mov	a,r2
      00063B F4               [12] 1407 	cpl	a
      00063C FA               [12] 1408 	mov	r2,a
      00063D E5*00            [12] 1409 	mov	a,_bp
      00063F 24 08            [12] 1410 	add	a,#0x08
      000641 F8               [12] 1411 	mov	r0,a
      000642 86 82            [24] 1412 	mov	dpl,@r0
      000644 08               [12] 1413 	inc	r0
      000645 86 83            [24] 1414 	mov	dph,@r0
      000647 08               [12] 1415 	inc	r0
      000648 86 F0            [24] 1416 	mov	b,@r0
      00064A 12r00r00         [24] 1417 	lcall	__gptrget
      00064D 52 02            [12] 1418 	anl	ar2,a
      00064F AB*11            [24] 1419 	mov	r3,_temp
      000651 E4               [12] 1420 	clr	a
      000652 C3               [12] 1421 	clr	c
      000653 CB               [12] 1422 	xch	a,r3
      000654 13               [12] 1423 	rrc	a
      000655 CB               [12] 1424 	xch	a,r3
      000656 13               [12] 1425 	rrc	a
      000657 CB               [12] 1426 	xch	a,r3
      000658 FC               [12] 1427 	mov	r4,a
      000659 8F F0            [24] 1428 	mov	b,r7
      00065B 05 F0            [12] 1429 	inc	b
      00065D EC               [12] 1430 	mov	a,r4
      00065E 33               [12] 1431 	rlc	a
      00065F 92 D2            [24] 1432 	mov	ov,c
      000661 80 08            [24] 1433 	sjmp	00198$
      000663                       1434 00197$:
      000663 A2 D2            [12] 1435 	mov	c,ov
      000665 EC               [12] 1436 	mov	a,r4
      000666 13               [12] 1437 	rrc	a
      000667 FC               [12] 1438 	mov	r4,a
      000668 EB               [12] 1439 	mov	a,r3
      000669 13               [12] 1440 	rrc	a
      00066A FB               [12] 1441 	mov	r3,a
      00066B                       1442 00198$:
      00066B D5 F0 F5         [24] 1443 	djnz	b,00197$
      00066E EB               [12] 1444 	mov	a,r3
      00066F 42 02            [12] 1445 	orl	ar2,a
      000671 E5*00            [12] 1446 	mov	a,_bp
      000673 24 08            [12] 1447 	add	a,#0x08
      000675 F8               [12] 1448 	mov	r0,a
      000676 86 82            [24] 1449 	mov	dpl,@r0
      000678 08               [12] 1450 	inc	r0
      000679 86 83            [24] 1451 	mov	dph,@r0
      00067B 08               [12] 1452 	inc	r0
      00067C 86 F0            [24] 1453 	mov	b,@r0
      00067E EA               [12] 1454 	mov	a,r2
      00067F 12r00r00         [24] 1455 	lcall	__gptrput
                                   1456 ;	main.c:372: for (i = 0 ;i <= 31 ; i++){
      000682 05*10            [12] 1457 	inc	_i
      000684 E5*10            [12] 1458 	mov	a,_i
      000686 24 E0            [12] 1459 	add	a,#0xff - 0x1f
      000688 40 03            [24] 1460 	jc	00199$
      00068A 02r05r98         [24] 1461 	ljmp	00118$
      00068D                       1462 00199$:
                                   1463 ;	main.c:377: }
      00068D 85*00 81         [24] 1464 	mov	sp,_bp
      000690 D0*00            [24] 1465 	pop	_bp
      000692 22               [24] 1466 	ret
                                   1467 ;------------------------------------------------------------
                                   1468 ;Allocation info for local variables in function 'rotate'
                                   1469 ;------------------------------------------------------------
                                   1470 ;round                     Allocated to stack - _bp -3
                                   1471 ;sub_key                   Allocated to stack - _bp -6
                                   1472 ;Key                       Allocated to stack - _bp +1
                                   1473 ;sloc0                     Allocated to stack - _bp +4
                                   1474 ;sloc1                     Allocated to stack - _bp +8
                                   1475 ;sloc2                     Allocated to stack - _bp +11
                                   1476 ;sloc3                     Allocated to stack - _bp +14
                                   1477 ;sloc4                     Allocated to stack - _bp +17
                                   1478 ;------------------------------------------------------------
                                   1479 ;	main.c:388: void rotate(DATA *Key,uint8 round,DATA *sub_key){ // arrr[]={ab,12,cd,45} temp |=ab >>temp =000000 ab >>> 00 00 ab 00
                                   1480 ;	-----------------------------------------
                                   1481 ;	 function rotate
                                   1482 ;	-----------------------------------------
      000693                       1483 _rotate:
      000693 C0*00            [24] 1484 	push	_bp
      000695 85 81*00         [24] 1485 	mov	_bp,sp
      000698 C0 82            [24] 1486 	push	dpl
      00069A C0 83            [24] 1487 	push	dph
      00069C C0 F0            [24] 1488 	push	b
      00069E E5 81            [12] 1489 	mov	a,sp
      0006A0 24 11            [12] 1490 	add	a,#0x11
      0006A2 F5 81            [12] 1491 	mov	sp,a
                                   1492 ;	main.c:389: Temp = 0;
      0006A4 E4               [12] 1493 	clr	a
      0006A5 F5*12            [12] 1494 	mov	_Temp,a
      0006A7 F5*13            [12] 1495 	mov	(_Temp + 1),a
      0006A9 F5*14            [12] 1496 	mov	(_Temp + 2),a
      0006AB F5*15            [12] 1497 	mov	(_Temp + 3),a
                                   1498 ;	main.c:390: for (i = 0 ; i<4 ; i++){
      0006AD F5*10            [12] 1499 	mov	_i,a
      0006AF                       1500 00114$:
                                   1501 ;	main.c:391: Temp <<=8;
      0006AF 85*14*15         [24] 1502 	mov	(_Temp + 3),(_Temp + 2)
      0006B2 85*13*14         [24] 1503 	mov	(_Temp + 2),(_Temp + 1)
      0006B5 85*12*13         [24] 1504 	mov	(_Temp + 1),_Temp
      0006B8 75*12 00         [24] 1505 	mov	_Temp,#0x00
                                   1506 ;	main.c:392: Temp |= Key->Array[i];
      0006BB A8*00            [24] 1507 	mov	r0,_bp
      0006BD 08               [12] 1508 	inc	r0
      0006BE E5*10            [12] 1509 	mov	a,_i
      0006C0 26               [12] 1510 	add	a,@r0
      0006C1 FA               [12] 1511 	mov	r2,a
      0006C2 E4               [12] 1512 	clr	a
      0006C3 08               [12] 1513 	inc	r0
      0006C4 36               [12] 1514 	addc	a,@r0
      0006C5 FB               [12] 1515 	mov	r3,a
      0006C6 08               [12] 1516 	inc	r0
      0006C7 86 04            [24] 1517 	mov	ar4,@r0
      0006C9 8A 82            [24] 1518 	mov	dpl,r2
      0006CB 8B 83            [24] 1519 	mov	dph,r3
      0006CD 8C F0            [24] 1520 	mov	b,r4
      0006CF 12r00r00         [24] 1521 	lcall	__gptrget
      0006D2 FA               [12] 1522 	mov	r2,a
      0006D3 E4               [12] 1523 	clr	a
      0006D4 FB               [12] 1524 	mov	r3,a
      0006D5 FC               [12] 1525 	mov	r4,a
      0006D6 FF               [12] 1526 	mov	r7,a
      0006D7 EA               [12] 1527 	mov	a,r2
      0006D8 42*12            [12] 1528 	orl	_Temp,a
      0006DA EB               [12] 1529 	mov	a,r3
      0006DB 42*13            [12] 1530 	orl	(_Temp + 1),a
      0006DD EC               [12] 1531 	mov	a,r4
      0006DE 42*14            [12] 1532 	orl	(_Temp + 2),a
      0006E0 EF               [12] 1533 	mov	a,r7
      0006E1 42*15            [12] 1534 	orl	(_Temp + 3),a
                                   1535 ;	main.c:390: for (i = 0 ; i<4 ; i++){
      0006E3 05*10            [12] 1536 	inc	_i
      0006E5 74 FC            [12] 1537 	mov	a,#0x100 - 0x04
      0006E7 25*10            [12] 1538 	add	a,_i
      0006E9 50 C4            [24] 1539 	jnc	00114$
                                   1540 ;	main.c:488: if (round == 1){
      0006EB E5*00            [12] 1541 	mov	a,_bp
      0006ED 24 FD            [12] 1542 	add	a,#0xfd
      0006EF F8               [12] 1543 	mov	r0,a
      0006F0 B6 01 03         [24] 1544 	cjne	@r0,#0x01,00189$
      0006F3 02r0Dr8E         [24] 1545 	ljmp	00113$
      0006F6                       1546 00189$:
                                   1547 ;	main.c:494: Temp &=0xfffffff0; // Temp = (ab 12 cd 4)0 >>> (1)010 1011 0001 0010 1100 1101 0100 0000  // bit0   bit
      0006F6 53*12 F0         [24] 1548 	anl	_Temp,#0xf0
                                   1549 ;	main.c:495: temp = GET_BIT(Temp,4);
      0006F9 E5*12            [12] 1550 	mov	a,_Temp
      0006FB C4               [12] 1551 	swap	a
      0006FC 54 01            [12] 1552 	anl	a,#0x01
      0006FE F5*11            [12] 1553 	mov	_temp,a
                                   1554 ;	main.c:496: Temp >>=1;
      000700 E5*15            [12] 1555 	mov	a,(_Temp + 3)
      000702 C3               [12] 1556 	clr	c
      000703 13               [12] 1557 	rrc	a
      000704 F5*15            [12] 1558 	mov	(_Temp + 3),a
      000706 E5*14            [12] 1559 	mov	a,(_Temp + 2)
      000708 13               [12] 1560 	rrc	a
      000709 F5*14            [12] 1561 	mov	(_Temp + 2),a
      00070B E5*13            [12] 1562 	mov	a,(_Temp + 1)
      00070D 13               [12] 1563 	rrc	a
      00070E F5*13            [12] 1564 	mov	(_Temp + 1),a
      000710 E5*12            [12] 1565 	mov	a,_Temp
      000712 13               [12] 1566 	rrc	a
      000713 F5*12            [12] 1567 	mov	_Temp,a
                                   1568 ;	main.c:497: Temp = ((Temp & ~( ((uint32)1)<<31)) | (((uint32)temp) << 31));//Temp = 0101 0110 0010 0101 1001 1010 10(1)0 0000 >> 56 25 9a 90 >> 90 >>09
      000715 E5*00            [12] 1569 	mov	a,_bp
      000717 24 04            [12] 1570 	add	a,#0x04
      000719 F8               [12] 1571 	mov	r0,a
      00071A A6*12            [24] 1572 	mov	@r0,_Temp
      00071C 08               [12] 1573 	inc	r0
      00071D A6*13            [24] 1574 	mov	@r0,(_Temp + 1)
      00071F 08               [12] 1575 	inc	r0
      000720 A6*14            [24] 1576 	mov	@r0,(_Temp + 2)
      000722 74 7F            [12] 1577 	mov	a,#0x7f
      000724 55*15            [12] 1578 	anl	a,(_Temp + 3)
      000726 08               [12] 1579 	inc	r0
      000727 F6               [12] 1580 	mov	@r0,a
      000728 AC*11            [24] 1581 	mov	r4,_temp
      00072A E4               [12] 1582 	clr	a
      00072B FD               [12] 1583 	mov	r5,a
      00072C FE               [12] 1584 	mov	r6,a
      00072D EC               [12] 1585 	mov	a,r4
      00072E 03               [12] 1586 	rr	a
      00072F 54 80            [12] 1587 	anl	a,#0x80
      000731 FF               [12] 1588 	mov	r7,a
      000732 7C 00            [12] 1589 	mov	r4,#0x00
      000734 E5*00            [12] 1590 	mov	a,_bp
      000736 24 04            [12] 1591 	add	a,#0x04
      000738 F8               [12] 1592 	mov	r0,a
      000739 EC               [12] 1593 	mov	a,r4
      00073A 46               [12] 1594 	orl	a,@r0
      00073B F5*12            [12] 1595 	mov	_Temp,a
      00073D ED               [12] 1596 	mov	a,r5
      00073E 08               [12] 1597 	inc	r0
      00073F 46               [12] 1598 	orl	a,@r0
      000740 F5*13            [12] 1599 	mov	(_Temp + 1),a
      000742 EE               [12] 1600 	mov	a,r6
      000743 08               [12] 1601 	inc	r0
      000744 46               [12] 1602 	orl	a,@r0
      000745 F5*14            [12] 1603 	mov	(_Temp + 2),a
      000747 EF               [12] 1604 	mov	a,r7
      000748 08               [12] 1605 	inc	r0
      000749 46               [12] 1606 	orl	a,@r0
      00074A F5*15            [12] 1607 	mov	(_Temp + 3),a
                                   1608 ;	main.c:499: for (i = 0 ; i<3 ; i++){
      00074C 8E*10            [24] 1609 	mov	_i,r6
                                   1610 ;	main.c:575: sub_key->Half[0] = Key->Half[0];
                                   1611 ;	main.c:499: for (i = 0 ; i<3 ; i++){
      00074E                       1612 00116$:
                                   1613 ;	main.c:500: Key->Array[i]= (uint8)((Temp >> ((3-i)*8)) & 0x000000ff); //array={56,25,9a,90}
      00074E A8*00            [24] 1614 	mov	r0,_bp
      000750 08               [12] 1615 	inc	r0
      000751 E5*00            [12] 1616 	mov	a,_bp
      000753 24 04            [12] 1617 	add	a,#0x04
      000755 F9               [12] 1618 	mov	r1,a
      000756 E5*10            [12] 1619 	mov	a,_i
      000758 26               [12] 1620 	add	a,@r0
      000759 F7               [12] 1621 	mov	@r1,a
      00075A E4               [12] 1622 	clr	a
      00075B 08               [12] 1623 	inc	r0
      00075C 36               [12] 1624 	addc	a,@r0
      00075D 09               [12] 1625 	inc	r1
      00075E F7               [12] 1626 	mov	@r1,a
      00075F 08               [12] 1627 	inc	r0
      000760 E6               [12] 1628 	mov	a,@r0
      000761 09               [12] 1629 	inc	r1
      000762 F7               [12] 1630 	mov	@r1,a
      000763 74 03            [12] 1631 	mov	a,#0x03
      000765 C3               [12] 1632 	clr	c
      000766 95*10            [12] 1633 	subb	a,_i
      000768 C4               [12] 1634 	swap	a
      000769 03               [12] 1635 	rr	a
      00076A 54 F8            [12] 1636 	anl	a,#0xf8
      00076C FF               [12] 1637 	mov	r7,a
      00076D 8F F0            [24] 1638 	mov	b,r7
      00076F 05 F0            [12] 1639 	inc	b
      000771 AC*12            [24] 1640 	mov	r4,_Temp
      000773 AD*13            [24] 1641 	mov	r5,(_Temp + 1)
      000775 AE*14            [24] 1642 	mov	r6,(_Temp + 2)
      000777 AF*15            [24] 1643 	mov	r7,(_Temp + 3)
      000779 80 0D            [24] 1644 	sjmp	00191$
      00077B                       1645 00190$:
      00077B C3               [12] 1646 	clr	c
      00077C EF               [12] 1647 	mov	a,r7
      00077D 13               [12] 1648 	rrc	a
      00077E FF               [12] 1649 	mov	r7,a
      00077F EE               [12] 1650 	mov	a,r6
      000780 13               [12] 1651 	rrc	a
      000781 FE               [12] 1652 	mov	r6,a
      000782 ED               [12] 1653 	mov	a,r5
      000783 13               [12] 1654 	rrc	a
      000784 FD               [12] 1655 	mov	r5,a
      000785 EC               [12] 1656 	mov	a,r4
      000786 13               [12] 1657 	rrc	a
      000787 FC               [12] 1658 	mov	r4,a
      000788                       1659 00191$:
      000788 D5 F0 F0         [24] 1660 	djnz	b,00190$
      00078B E5*00            [12] 1661 	mov	a,_bp
      00078D 24 04            [12] 1662 	add	a,#0x04
      00078F F8               [12] 1663 	mov	r0,a
      000790 86 82            [24] 1664 	mov	dpl,@r0
      000792 08               [12] 1665 	inc	r0
      000793 86 83            [24] 1666 	mov	dph,@r0
      000795 08               [12] 1667 	inc	r0
      000796 86 F0            [24] 1668 	mov	b,@r0
      000798 EC               [12] 1669 	mov	a,r4
      000799 12r00r00         [24] 1670 	lcall	__gptrput
                                   1671 ;	main.c:499: for (i = 0 ; i<3 ; i++){
      00079C 05*10            [12] 1672 	inc	_i
      00079E 74 FD            [12] 1673 	mov	a,#0x100 - 0x03
      0007A0 25*10            [12] 1674 	add	a,_i
      0007A2 50 AA            [24] 1675 	jnc	00116$
                                   1676 ;	main.c:502: Key->Array[3] &=0x0f; 
      0007A4 A8*00            [24] 1677 	mov	r0,_bp
      0007A6 08               [12] 1678 	inc	r0
      0007A7 E5*00            [12] 1679 	mov	a,_bp
      0007A9 24 08            [12] 1680 	add	a,#0x08
      0007AB F9               [12] 1681 	mov	r1,a
      0007AC 74 03            [12] 1682 	mov	a,#0x03
      0007AE 26               [12] 1683 	add	a,@r0
      0007AF F7               [12] 1684 	mov	@r1,a
      0007B0 E4               [12] 1685 	clr	a
      0007B1 08               [12] 1686 	inc	r0
      0007B2 36               [12] 1687 	addc	a,@r0
      0007B3 09               [12] 1688 	inc	r1
      0007B4 F7               [12] 1689 	mov	@r1,a
      0007B5 08               [12] 1690 	inc	r0
      0007B6 E6               [12] 1691 	mov	a,@r0
      0007B7 09               [12] 1692 	inc	r1
      0007B8 F7               [12] 1693 	mov	@r1,a
      0007B9 E5*00            [12] 1694 	mov	a,_bp
      0007BB 24 08            [12] 1695 	add	a,#0x08
      0007BD F8               [12] 1696 	mov	r0,a
      0007BE 86 82            [24] 1697 	mov	dpl,@r0
      0007C0 08               [12] 1698 	inc	r0
      0007C1 86 83            [24] 1699 	mov	dph,@r0
      0007C3 08               [12] 1700 	inc	r0
      0007C4 86 F0            [24] 1701 	mov	b,@r0
      0007C6 12r00r00         [24] 1702 	lcall	__gptrget
      0007C9 FF               [12] 1703 	mov	r7,a
      0007CA 53 07 0F         [24] 1704 	anl	ar7,#0x0f
      0007CD E5*00            [12] 1705 	mov	a,_bp
      0007CF 24 08            [12] 1706 	add	a,#0x08
      0007D1 F8               [12] 1707 	mov	r0,a
      0007D2 86 82            [24] 1708 	mov	dpl,@r0
      0007D4 08               [12] 1709 	inc	r0
      0007D5 86 83            [24] 1710 	mov	dph,@r0
      0007D7 08               [12] 1711 	inc	r0
      0007D8 86 F0            [24] 1712 	mov	b,@r0
      0007DA EF               [12] 1713 	mov	a,r7
      0007DB 12r00r00         [24] 1714 	lcall	__gptrput
                                   1715 ;	main.c:503: Key->Array[3] |= (uint8)(Temp  & 0x000000f0); 
      0007DE AF*12            [24] 1716 	mov	r7,_Temp
      0007E0 53 07 F0         [24] 1717 	anl	ar7,#0xf0
      0007E3 E5*00            [12] 1718 	mov	a,_bp
      0007E5 24 08            [12] 1719 	add	a,#0x08
      0007E7 F8               [12] 1720 	mov	r0,a
      0007E8 86 82            [24] 1721 	mov	dpl,@r0
      0007EA 08               [12] 1722 	inc	r0
      0007EB 86 83            [24] 1723 	mov	dph,@r0
      0007ED 08               [12] 1724 	inc	r0
      0007EE 86 F0            [24] 1725 	mov	b,@r0
      0007F0 12r00r00         [24] 1726 	lcall	__gptrget
      0007F3 42 07            [12] 1727 	orl	ar7,a
      0007F5 E5*00            [12] 1728 	mov	a,_bp
      0007F7 24 08            [12] 1729 	add	a,#0x08
      0007F9 F8               [12] 1730 	mov	r0,a
      0007FA 86 82            [24] 1731 	mov	dpl,@r0
      0007FC 08               [12] 1732 	inc	r0
      0007FD 86 83            [24] 1733 	mov	dph,@r0
      0007FF 08               [12] 1734 	inc	r0
      000800 86 F0            [24] 1735 	mov	b,@r0
      000802 EF               [12] 1736 	mov	a,r7
      000803 12r00r00         [24] 1737 	lcall	__gptrput
                                   1738 ;	main.c:507: Temp |= Key->Array[3];   //76543210 
      000806 8F*12            [24] 1739 	mov	_Temp,r7
      000808 75*13 00         [24] 1740 	mov	(_Temp + 1),#0x00
      00080B 75*14 00         [24] 1741 	mov	(_Temp + 2),#0x00
                                   1742 ;	main.c:508: Temp = Temp <<8;
      00080E 85*14*15         [24] 1743 	mov	(_Temp + 3),(_Temp + 2)
      000811 85*13*14         [24] 1744 	mov	(_Temp + 2),(_Temp + 1)
      000814 85*12*13         [24] 1745 	mov	(_Temp + 1),_Temp
      000817 75*12 00         [24] 1746 	mov	_Temp,#0x00
                                   1747 ;	main.c:510: Temp |= Key->Array[4];   //20
      00081A A8*00            [24] 1748 	mov	r0,_bp
      00081C 08               [12] 1749 	inc	r0
      00081D E5*00            [12] 1750 	mov	a,_bp
      00081F 24 04            [12] 1751 	add	a,#0x04
      000821 F9               [12] 1752 	mov	r1,a
      000822 74 04            [12] 1753 	mov	a,#0x04
      000824 26               [12] 1754 	add	a,@r0
      000825 F7               [12] 1755 	mov	@r1,a
      000826 E4               [12] 1756 	clr	a
      000827 08               [12] 1757 	inc	r0
      000828 36               [12] 1758 	addc	a,@r0
      000829 09               [12] 1759 	inc	r1
      00082A F7               [12] 1760 	mov	@r1,a
      00082B 08               [12] 1761 	inc	r0
      00082C E6               [12] 1762 	mov	a,@r0
      00082D 09               [12] 1763 	inc	r1
      00082E F7               [12] 1764 	mov	@r1,a
      00082F E5*00            [12] 1765 	mov	a,_bp
      000831 24 04            [12] 1766 	add	a,#0x04
      000833 F8               [12] 1767 	mov	r0,a
      000834 86 82            [24] 1768 	mov	dpl,@r0
      000836 08               [12] 1769 	inc	r0
      000837 86 83            [24] 1770 	mov	dph,@r0
      000839 08               [12] 1771 	inc	r0
      00083A 86 F0            [24] 1772 	mov	b,@r0
      00083C 12r00r00         [24] 1773 	lcall	__gptrget
      00083F FC               [12] 1774 	mov	r4,a
      000840 E4               [12] 1775 	clr	a
      000841 FD               [12] 1776 	mov	r5,a
      000842 FE               [12] 1777 	mov	r6,a
      000843 FF               [12] 1778 	mov	r7,a
      000844 EC               [12] 1779 	mov	a,r4
      000845 42*12            [12] 1780 	orl	_Temp,a
      000847 ED               [12] 1781 	mov	a,r5
      000848 42*13            [12] 1782 	orl	(_Temp + 1),a
      00084A EE               [12] 1783 	mov	a,r6
      00084B 42*14            [12] 1784 	orl	(_Temp + 2),a
      00084D EF               [12] 1785 	mov	a,r7
      00084E 42*15            [12] 1786 	orl	(_Temp + 3),a
                                   1787 ;	main.c:512: Temp = Temp <<8;
      000850 85*14*15         [24] 1788 	mov	(_Temp + 3),(_Temp + 2)
      000853 85*13*14         [24] 1789 	mov	(_Temp + 2),(_Temp + 1)
      000856 85*12*13         [24] 1790 	mov	(_Temp + 1),_Temp
      000859 75*12 00         [24] 1791 	mov	_Temp,#0x00
                                   1792 ;	main.c:513: Temp |= Key->Array[5];   //20
      00085C A8*00            [24] 1793 	mov	r0,_bp
      00085E 08               [12] 1794 	inc	r0
      00085F E5*00            [12] 1795 	mov	a,_bp
      000861 24 0B            [12] 1796 	add	a,#0x0b
      000863 F9               [12] 1797 	mov	r1,a
      000864 74 05            [12] 1798 	mov	a,#0x05
      000866 26               [12] 1799 	add	a,@r0
      000867 F7               [12] 1800 	mov	@r1,a
      000868 E4               [12] 1801 	clr	a
      000869 08               [12] 1802 	inc	r0
      00086A 36               [12] 1803 	addc	a,@r0
      00086B 09               [12] 1804 	inc	r1
      00086C F7               [12] 1805 	mov	@r1,a
      00086D 08               [12] 1806 	inc	r0
      00086E E6               [12] 1807 	mov	a,@r0
      00086F 09               [12] 1808 	inc	r1
      000870 F7               [12] 1809 	mov	@r1,a
      000871 E5*00            [12] 1810 	mov	a,_bp
      000873 24 0B            [12] 1811 	add	a,#0x0b
      000875 F8               [12] 1812 	mov	r0,a
      000876 86 82            [24] 1813 	mov	dpl,@r0
      000878 08               [12] 1814 	inc	r0
      000879 86 83            [24] 1815 	mov	dph,@r0
      00087B 08               [12] 1816 	inc	r0
      00087C 86 F0            [24] 1817 	mov	b,@r0
      00087E 12r00r00         [24] 1818 	lcall	__gptrget
      000881 FA               [12] 1819 	mov	r2,a
      000882 E4               [12] 1820 	clr	a
      000883 FB               [12] 1821 	mov	r3,a
      000884 FC               [12] 1822 	mov	r4,a
      000885 FF               [12] 1823 	mov	r7,a
      000886 EA               [12] 1824 	mov	a,r2
      000887 42*12            [12] 1825 	orl	_Temp,a
      000889 EB               [12] 1826 	mov	a,r3
      00088A 42*13            [12] 1827 	orl	(_Temp + 1),a
      00088C EC               [12] 1828 	mov	a,r4
      00088D 42*14            [12] 1829 	orl	(_Temp + 2),a
      00088F EF               [12] 1830 	mov	a,r7
      000890 42*15            [12] 1831 	orl	(_Temp + 3),a
                                   1832 ;	main.c:514: Temp = Temp <<8;
      000892 85*14*15         [24] 1833 	mov	(_Temp + 3),(_Temp + 2)
      000895 85*13*14         [24] 1834 	mov	(_Temp + 2),(_Temp + 1)
      000898 85*12*13         [24] 1835 	mov	(_Temp + 1),_Temp
      00089B 75*12 00         [24] 1836 	mov	_Temp,#0x00
                                   1837 ;	main.c:515: Temp |= Key->Array[6];	//28
      00089E A8*00            [24] 1838 	mov	r0,_bp
      0008A0 08               [12] 1839 	inc	r0
      0008A1 E5*00            [12] 1840 	mov	a,_bp
      0008A3 24 0E            [12] 1841 	add	a,#0x0e
      0008A5 F9               [12] 1842 	mov	r1,a
      0008A6 74 06            [12] 1843 	mov	a,#0x06
      0008A8 26               [12] 1844 	add	a,@r0
      0008A9 F7               [12] 1845 	mov	@r1,a
      0008AA E4               [12] 1846 	clr	a
      0008AB 08               [12] 1847 	inc	r0
      0008AC 36               [12] 1848 	addc	a,@r0
      0008AD 09               [12] 1849 	inc	r1
      0008AE F7               [12] 1850 	mov	@r1,a
      0008AF 08               [12] 1851 	inc	r0
      0008B0 E6               [12] 1852 	mov	a,@r0
      0008B1 09               [12] 1853 	inc	r1
      0008B2 F7               [12] 1854 	mov	@r1,a
      0008B3 E5*00            [12] 1855 	mov	a,_bp
      0008B5 24 0E            [12] 1856 	add	a,#0x0e
      0008B7 F8               [12] 1857 	mov	r0,a
      0008B8 86 82            [24] 1858 	mov	dpl,@r0
      0008BA 08               [12] 1859 	inc	r0
      0008BB 86 83            [24] 1860 	mov	dph,@r0
      0008BD 08               [12] 1861 	inc	r0
      0008BE 86 F0            [24] 1862 	mov	b,@r0
      0008C0 12r00r00         [24] 1863 	lcall	__gptrget
      0008C3 FA               [12] 1864 	mov	r2,a
      0008C4 E4               [12] 1865 	clr	a
      0008C5 FB               [12] 1866 	mov	r3,a
      0008C6 FC               [12] 1867 	mov	r4,a
      0008C7 FF               [12] 1868 	mov	r7,a
      0008C8 EA               [12] 1869 	mov	a,r2
      0008C9 42*12            [12] 1870 	orl	_Temp,a
      0008CB EB               [12] 1871 	mov	a,r3
      0008CC 42*13            [12] 1872 	orl	(_Temp + 1),a
      0008CE EC               [12] 1873 	mov	a,r4
      0008CF 42*14            [12] 1874 	orl	(_Temp + 2),a
      0008D1 EF               [12] 1875 	mov	a,r7
      0008D2 42*15            [12] 1876 	orl	(_Temp + 3),a
                                   1877 ;	main.c:516: Temp= Temp <<4;
      0008D4 E5*15            [12] 1878 	mov	a,(_Temp + 3)
      0008D6 C4               [12] 1879 	swap	a
      0008D7 54 F0            [12] 1880 	anl	a,#0xf0
      0008D9 C5*14            [12] 1881 	xch	a,(_Temp + 2)
      0008DB C4               [12] 1882 	swap	a
      0008DC C5*14            [12] 1883 	xch	a,(_Temp + 2)
      0008DE 65*14            [12] 1884 	xrl	a,(_Temp + 2)
      0008E0 C5*14            [12] 1885 	xch	a,(_Temp + 2)
      0008E2 54 F0            [12] 1886 	anl	a,#0xf0
      0008E4 C5*14            [12] 1887 	xch	a,(_Temp + 2)
      0008E6 65*14            [12] 1888 	xrl	a,(_Temp + 2)
      0008E8 F5*15            [12] 1889 	mov	(_Temp + 3),a
      0008EA E5*13            [12] 1890 	mov	a,(_Temp + 1)
      0008EC C4               [12] 1891 	swap	a
      0008ED 54 0F            [12] 1892 	anl	a,#0x0f
      0008EF 45*14            [12] 1893 	orl	a,(_Temp + 2)
      0008F1 F5*14            [12] 1894 	mov	(_Temp + 2),a
      0008F3 E5*13            [12] 1895 	mov	a,(_Temp + 1)
      0008F5 C4               [12] 1896 	swap	a
      0008F6 54 F0            [12] 1897 	anl	a,#0xf0
      0008F8 C5*12            [12] 1898 	xch	a,_Temp
      0008FA C4               [12] 1899 	swap	a
      0008FB C5*12            [12] 1900 	xch	a,_Temp
      0008FD 65*12            [12] 1901 	xrl	a,_Temp
      0008FF C5*12            [12] 1902 	xch	a,_Temp
      000901 54 F0            [12] 1903 	anl	a,#0xf0
      000903 C5*12            [12] 1904 	xch	a,_Temp
      000905 65*12            [12] 1905 	xrl	a,_Temp
      000907 F5*13            [12] 1906 	mov	(_Temp + 1),a
                                   1907 ;	main.c:519: temp = GET_BIT(Temp,4);//
      000909 E5*12            [12] 1908 	mov	a,_Temp
      00090B C4               [12] 1909 	swap	a
      00090C 54 01            [12] 1910 	anl	a,#0x01
      00090E F5*11            [12] 1911 	mov	_temp,a
                                   1912 ;	main.c:520: Temp >>=1;//011 0001 0010 1100 1101 0100 0101 0000 0
      000910 E5*15            [12] 1913 	mov	a,(_Temp + 3)
      000912 C3               [12] 1914 	clr	c
      000913 13               [12] 1915 	rrc	a
      000914 F5*15            [12] 1916 	mov	(_Temp + 3),a
      000916 E5*14            [12] 1917 	mov	a,(_Temp + 2)
      000918 13               [12] 1918 	rrc	a
      000919 F5*14            [12] 1919 	mov	(_Temp + 2),a
      00091B E5*13            [12] 1920 	mov	a,(_Temp + 1)
      00091D 13               [12] 1921 	rrc	a
      00091E F5*13            [12] 1922 	mov	(_Temp + 1),a
      000920 E5*12            [12] 1923 	mov	a,_Temp
      000922 13               [12] 1924 	rrc	a
      000923 F5*12            [12] 1925 	mov	_Temp,a
                                   1926 ;	main.c:521: Temp = ((Temp & ~( ((uint32)1)<<31)) | (((uint32)temp) << 31));// 0110 0010 0101 1001 1010 1000 101(1) 0000 >> 62 59 a9 b0
      000925 E5*00            [12] 1927 	mov	a,_bp
      000927 24 11            [12] 1928 	add	a,#0x11
      000929 F8               [12] 1929 	mov	r0,a
      00092A A6*12            [24] 1930 	mov	@r0,_Temp
      00092C 08               [12] 1931 	inc	r0
      00092D A6*13            [24] 1932 	mov	@r0,(_Temp + 1)
      00092F 08               [12] 1933 	inc	r0
      000930 A6*14            [24] 1934 	mov	@r0,(_Temp + 2)
      000932 74 7F            [12] 1935 	mov	a,#0x7f
      000934 55*15            [12] 1936 	anl	a,(_Temp + 3)
      000936 08               [12] 1937 	inc	r0
      000937 F6               [12] 1938 	mov	@r0,a
      000938 AA*11            [24] 1939 	mov	r2,_temp
      00093A E4               [12] 1940 	clr	a
      00093B FB               [12] 1941 	mov	r3,a
      00093C FE               [12] 1942 	mov	r6,a
      00093D EA               [12] 1943 	mov	a,r2
      00093E 03               [12] 1944 	rr	a
      00093F 54 80            [12] 1945 	anl	a,#0x80
      000941 FF               [12] 1946 	mov	r7,a
      000942 7A 00            [12] 1947 	mov	r2,#0x00
      000944 E5*00            [12] 1948 	mov	a,_bp
      000946 24 11            [12] 1949 	add	a,#0x11
      000948 F8               [12] 1950 	mov	r0,a
      000949 EA               [12] 1951 	mov	a,r2
      00094A 46               [12] 1952 	orl	a,@r0
      00094B F5*12            [12] 1953 	mov	_Temp,a
      00094D EB               [12] 1954 	mov	a,r3
      00094E 08               [12] 1955 	inc	r0
      00094F 46               [12] 1956 	orl	a,@r0
      000950 F5*13            [12] 1957 	mov	(_Temp + 1),a
      000952 EE               [12] 1958 	mov	a,r6
      000953 08               [12] 1959 	inc	r0
      000954 46               [12] 1960 	orl	a,@r0
      000955 F5*14            [12] 1961 	mov	(_Temp + 2),a
      000957 EF               [12] 1962 	mov	a,r7
      000958 08               [12] 1963 	inc	r0
      000959 46               [12] 1964 	orl	a,@r0
      00095A F5*15            [12] 1965 	mov	(_Temp + 3),a
                                   1966 ;	main.c:523: Key->Array[3] &=0xf0; 
      00095C E5*00            [12] 1967 	mov	a,_bp
      00095E 24 08            [12] 1968 	add	a,#0x08
      000960 F8               [12] 1969 	mov	r0,a
      000961 86 82            [24] 1970 	mov	dpl,@r0
      000963 08               [12] 1971 	inc	r0
      000964 86 83            [24] 1972 	mov	dph,@r0
      000966 08               [12] 1973 	inc	r0
      000967 86 F0            [24] 1974 	mov	b,@r0
      000969 12r00r00         [24] 1975 	lcall	__gptrget
      00096C FF               [12] 1976 	mov	r7,a
      00096D 53 07 F0         [24] 1977 	anl	ar7,#0xf0
      000970 E5*00            [12] 1978 	mov	a,_bp
      000972 24 08            [12] 1979 	add	a,#0x08
      000974 F8               [12] 1980 	mov	r0,a
      000975 86 82            [24] 1981 	mov	dpl,@r0
      000977 08               [12] 1982 	inc	r0
      000978 86 83            [24] 1983 	mov	dph,@r0
      00097A 08               [12] 1984 	inc	r0
      00097B 86 F0            [24] 1985 	mov	b,@r0
      00097D EF               [12] 1986 	mov	a,r7
      00097E 12r00r00         [24] 1987 	lcall	__gptrput
                                   1988 ;	main.c:524: Key->Array[3] |= (uint8)((Temp)>>28); //62 59 a9 b0 >> 60 00 00 00 >>28 >>>> 00 00 00 06 >> 06
      000981 E5*15            [12] 1989 	mov	a,(_Temp + 3)
      000983 C4               [12] 1990 	swap	a
      000984 54 0F            [12] 1991 	anl	a,#0x0f
      000986 FC               [12] 1992 	mov	r4,a
      000987 E4               [12] 1993 	clr	a
      000988 FD               [12] 1994 	mov	r5,a
      000989 FE               [12] 1995 	mov	r6,a
      00098A E5*00            [12] 1996 	mov	a,_bp
      00098C 24 08            [12] 1997 	add	a,#0x08
      00098E F8               [12] 1998 	mov	r0,a
      00098F 86 82            [24] 1999 	mov	dpl,@r0
      000991 08               [12] 2000 	inc	r0
      000992 86 83            [24] 2001 	mov	dph,@r0
      000994 08               [12] 2002 	inc	r0
      000995 86 F0            [24] 2003 	mov	b,@r0
      000997 12r00r00         [24] 2004 	lcall	__gptrget
      00099A FF               [12] 2005 	mov	r7,a
      00099B 42 04            [12] 2006 	orl	ar4,a
      00099D E5*00            [12] 2007 	mov	a,_bp
      00099F 24 08            [12] 2008 	add	a,#0x08
      0009A1 F8               [12] 2009 	mov	r0,a
      0009A2 86 82            [24] 2010 	mov	dpl,@r0
      0009A4 08               [12] 2011 	inc	r0
      0009A5 86 83            [24] 2012 	mov	dph,@r0
      0009A7 08               [12] 2013 	inc	r0
      0009A8 86 F0            [24] 2014 	mov	b,@r0
      0009AA EC               [12] 2015 	mov	a,r4
      0009AB 12r00r00         [24] 2016 	lcall	__gptrput
                                   2017 ;	main.c:525: Temp <<=4; // Temp= 25 9a 9b 00 >> 00 00 00 25
      0009AE E5*15            [12] 2018 	mov	a,(_Temp + 3)
      0009B0 C4               [12] 2019 	swap	a
      0009B1 54 F0            [12] 2020 	anl	a,#0xf0
      0009B3 C5*14            [12] 2021 	xch	a,(_Temp + 2)
      0009B5 C4               [12] 2022 	swap	a
      0009B6 C5*14            [12] 2023 	xch	a,(_Temp + 2)
      0009B8 65*14            [12] 2024 	xrl	a,(_Temp + 2)
      0009BA C5*14            [12] 2025 	xch	a,(_Temp + 2)
      0009BC 54 F0            [12] 2026 	anl	a,#0xf0
      0009BE C5*14            [12] 2027 	xch	a,(_Temp + 2)
      0009C0 65*14            [12] 2028 	xrl	a,(_Temp + 2)
      0009C2 F5*15            [12] 2029 	mov	(_Temp + 3),a
      0009C4 E5*13            [12] 2030 	mov	a,(_Temp + 1)
      0009C6 C4               [12] 2031 	swap	a
      0009C7 54 0F            [12] 2032 	anl	a,#0x0f
      0009C9 45*14            [12] 2033 	orl	a,(_Temp + 2)
      0009CB F5*14            [12] 2034 	mov	(_Temp + 2),a
      0009CD E5*13            [12] 2035 	mov	a,(_Temp + 1)
      0009CF C4               [12] 2036 	swap	a
      0009D0 54 F0            [12] 2037 	anl	a,#0xf0
      0009D2 C5*12            [12] 2038 	xch	a,_Temp
      0009D4 C4               [12] 2039 	swap	a
      0009D5 C5*12            [12] 2040 	xch	a,_Temp
      0009D7 65*12            [12] 2041 	xrl	a,_Temp
      0009D9 C5*12            [12] 2042 	xch	a,_Temp
      0009DB 54 F0            [12] 2043 	anl	a,#0xf0
      0009DD C5*12            [12] 2044 	xch	a,_Temp
      0009DF 65*12            [12] 2045 	xrl	a,_Temp
      0009E1 F5*13            [12] 2046 	mov	(_Temp + 1),a
                                   2047 ;	main.c:526: for (i = 4 ; i<8 ; i++){
      0009E3 75*10 04         [24] 2048 	mov	_i,#0x04
      0009E6                       2049 00118$:
                                   2050 ;	main.c:527: Key->Array[i]= (uint8)((Temp >> ((7-i)*8)) & 0x000000ff); //array={25,9a,9b,00}
      0009E6 A8*00            [24] 2051 	mov	r0,_bp
      0009E8 08               [12] 2052 	inc	r0
      0009E9 E5*00            [12] 2053 	mov	a,_bp
      0009EB 24 11            [12] 2054 	add	a,#0x11
      0009ED F9               [12] 2055 	mov	r1,a
      0009EE E5*10            [12] 2056 	mov	a,_i
      0009F0 26               [12] 2057 	add	a,@r0
      0009F1 F7               [12] 2058 	mov	@r1,a
      0009F2 E4               [12] 2059 	clr	a
      0009F3 08               [12] 2060 	inc	r0
      0009F4 36               [12] 2061 	addc	a,@r0
      0009F5 09               [12] 2062 	inc	r1
      0009F6 F7               [12] 2063 	mov	@r1,a
      0009F7 08               [12] 2064 	inc	r0
      0009F8 E6               [12] 2065 	mov	a,@r0
      0009F9 09               [12] 2066 	inc	r1
      0009FA F7               [12] 2067 	mov	@r1,a
      0009FB 74 07            [12] 2068 	mov	a,#0x07
      0009FD C3               [12] 2069 	clr	c
      0009FE 95*10            [12] 2070 	subb	a,_i
      000A00 C4               [12] 2071 	swap	a
      000A01 03               [12] 2072 	rr	a
      000A02 54 F8            [12] 2073 	anl	a,#0xf8
      000A04 FC               [12] 2074 	mov	r4,a
      000A05 8C F0            [24] 2075 	mov	b,r4
      000A07 05 F0            [12] 2076 	inc	b
      000A09 AA*12            [24] 2077 	mov	r2,_Temp
      000A0B AB*13            [24] 2078 	mov	r3,(_Temp + 1)
      000A0D AC*14            [24] 2079 	mov	r4,(_Temp + 2)
      000A0F AF*15            [24] 2080 	mov	r7,(_Temp + 3)
      000A11 80 0D            [24] 2081 	sjmp	00194$
      000A13                       2082 00193$:
      000A13 C3               [12] 2083 	clr	c
      000A14 EF               [12] 2084 	mov	a,r7
      000A15 13               [12] 2085 	rrc	a
      000A16 FF               [12] 2086 	mov	r7,a
      000A17 EC               [12] 2087 	mov	a,r4
      000A18 13               [12] 2088 	rrc	a
      000A19 FC               [12] 2089 	mov	r4,a
      000A1A EB               [12] 2090 	mov	a,r3
      000A1B 13               [12] 2091 	rrc	a
      000A1C FB               [12] 2092 	mov	r3,a
      000A1D EA               [12] 2093 	mov	a,r2
      000A1E 13               [12] 2094 	rrc	a
      000A1F FA               [12] 2095 	mov	r2,a
      000A20                       2096 00194$:
      000A20 D5 F0 F0         [24] 2097 	djnz	b,00193$
      000A23 E5*00            [12] 2098 	mov	a,_bp
      000A25 24 11            [12] 2099 	add	a,#0x11
      000A27 F8               [12] 2100 	mov	r0,a
      000A28 86 82            [24] 2101 	mov	dpl,@r0
      000A2A 08               [12] 2102 	inc	r0
      000A2B 86 83            [24] 2103 	mov	dph,@r0
      000A2D 08               [12] 2104 	inc	r0
      000A2E 86 F0            [24] 2105 	mov	b,@r0
      000A30 EA               [12] 2106 	mov	a,r2
      000A31 12r00r00         [24] 2107 	lcall	__gptrput
                                   2108 ;	main.c:526: for (i = 4 ; i<8 ; i++){
      000A34 05*10            [12] 2109 	inc	_i
      000A36 74 F8            [12] 2110 	mov	a,#0x100 - 0x08
      000A38 25*10            [12] 2111 	add	a,_i
      000A3A 50 AA            [24] 2112 	jnc	00118$
                                   2113 ;	main.c:530: if ((round != 2) && (round != 9) && (round != 16)){
      000A3C E5*00            [12] 2114 	mov	a,_bp
      000A3E 24 FD            [12] 2115 	add	a,#0xfd
      000A40 F8               [12] 2116 	mov	r0,a
      000A41 B6 02 03         [24] 2117 	cjne	@r0,#0x02,00196$
      000A44 02r0Dr8E         [24] 2118 	ljmp	00113$
      000A47                       2119 00196$:
      000A47 E5*00            [12] 2120 	mov	a,_bp
      000A49 24 FD            [12] 2121 	add	a,#0xfd
      000A4B F8               [12] 2122 	mov	r0,a
      000A4C B6 09 03         [24] 2123 	cjne	@r0,#0x09,00197$
      000A4F 02r0Dr8E         [24] 2124 	ljmp	00113$
      000A52                       2125 00197$:
      000A52 E5*00            [12] 2126 	mov	a,_bp
      000A54 24 FD            [12] 2127 	add	a,#0xfd
      000A56 F8               [12] 2128 	mov	r0,a
      000A57 B6 10 03         [24] 2129 	cjne	@r0,#0x10,00198$
      000A5A 02r0Dr8E         [24] 2130 	ljmp	00113$
      000A5D                       2131 00198$:
                                   2132 ;	main.c:531: for (i = 0 ; i<4 ; i++){
      000A5D 75*10 00         [24] 2133 	mov	_i,#0x00
      000A60                       2134 00120$:
                                   2135 ;	main.c:532: Temp <<=8;
      000A60 85*14*15         [24] 2136 	mov	(_Temp + 3),(_Temp + 2)
      000A63 85*13*14         [24] 2137 	mov	(_Temp + 2),(_Temp + 1)
      000A66 85*12*13         [24] 2138 	mov	(_Temp + 1),_Temp
      000A69 75*12 00         [24] 2139 	mov	_Temp,#0x00
                                   2140 ;	main.c:533: Temp |= Key->Array[i];
      000A6C A8*00            [24] 2141 	mov	r0,_bp
      000A6E 08               [12] 2142 	inc	r0
      000A6F E5*10            [12] 2143 	mov	a,_i
      000A71 26               [12] 2144 	add	a,@r0
      000A72 FD               [12] 2145 	mov	r5,a
      000A73 E4               [12] 2146 	clr	a
      000A74 08               [12] 2147 	inc	r0
      000A75 36               [12] 2148 	addc	a,@r0
      000A76 FE               [12] 2149 	mov	r6,a
      000A77 08               [12] 2150 	inc	r0
      000A78 86 07            [24] 2151 	mov	ar7,@r0
      000A7A 8D 82            [24] 2152 	mov	dpl,r5
      000A7C 8E 83            [24] 2153 	mov	dph,r6
      000A7E 8F F0            [24] 2154 	mov	b,r7
      000A80 12r00r00         [24] 2155 	lcall	__gptrget
      000A83 FD               [12] 2156 	mov	r5,a
      000A84 E4               [12] 2157 	clr	a
      000A85 FF               [12] 2158 	mov	r7,a
      000A86 FE               [12] 2159 	mov	r6,a
      000A87 FC               [12] 2160 	mov	r4,a
      000A88 ED               [12] 2161 	mov	a,r5
      000A89 42*12            [12] 2162 	orl	_Temp,a
      000A8B EF               [12] 2163 	mov	a,r7
      000A8C 42*13            [12] 2164 	orl	(_Temp + 1),a
      000A8E EE               [12] 2165 	mov	a,r6
      000A8F 42*14            [12] 2166 	orl	(_Temp + 2),a
      000A91 EC               [12] 2167 	mov	a,r4
      000A92 42*15            [12] 2168 	orl	(_Temp + 3),a
                                   2169 ;	main.c:531: for (i = 0 ; i<4 ; i++){
      000A94 05*10            [12] 2170 	inc	_i
      000A96 74 FC            [12] 2171 	mov	a,#0x100 - 0x04
      000A98 25*10            [12] 2172 	add	a,_i
      000A9A 50 C4            [24] 2173 	jnc	00120$
                                   2174 ;	main.c:536: Temp &=0xfffffff0; // Temp = (ab 12 cd 4)0 >>> (1)010 1011 0001 0010 1100 1101 0100 0000  // bit0   bit
      000A9C 53*12 F0         [24] 2175 	anl	_Temp,#0xf0
                                   2176 ;	main.c:537: temp = GET_BIT(Temp,4);
      000A9F E5*12            [12] 2177 	mov	a,_Temp
      000AA1 C4               [12] 2178 	swap	a
      000AA2 54 01            [12] 2179 	anl	a,#0x01
      000AA4 F5*11            [12] 2180 	mov	_temp,a
                                   2181 ;	main.c:538: Temp >>=1;
      000AA6 E5*15            [12] 2182 	mov	a,(_Temp + 3)
      000AA8 C3               [12] 2183 	clr	c
      000AA9 13               [12] 2184 	rrc	a
      000AAA F5*15            [12] 2185 	mov	(_Temp + 3),a
      000AAC E5*14            [12] 2186 	mov	a,(_Temp + 2)
      000AAE 13               [12] 2187 	rrc	a
      000AAF F5*14            [12] 2188 	mov	(_Temp + 2),a
      000AB1 E5*13            [12] 2189 	mov	a,(_Temp + 1)
      000AB3 13               [12] 2190 	rrc	a
      000AB4 F5*13            [12] 2191 	mov	(_Temp + 1),a
      000AB6 E5*12            [12] 2192 	mov	a,_Temp
      000AB8 13               [12] 2193 	rrc	a
      000AB9 F5*12            [12] 2194 	mov	_Temp,a
                                   2195 ;	main.c:539: Temp = ((Temp & ~( ((uint32)1)<<31)) | (((uint32)temp) << 31));//Temp = 0101 0110 0010 0101 1001 1010 10(1)0 0000 >> 56 25 9a 90 >> 90 >>09
      000ABB E5*00            [12] 2196 	mov	a,_bp
      000ABD 24 11            [12] 2197 	add	a,#0x11
      000ABF F8               [12] 2198 	mov	r0,a
      000AC0 A6*12            [24] 2199 	mov	@r0,_Temp
      000AC2 08               [12] 2200 	inc	r0
      000AC3 A6*13            [24] 2201 	mov	@r0,(_Temp + 1)
      000AC5 08               [12] 2202 	inc	r0
      000AC6 A6*14            [24] 2203 	mov	@r0,(_Temp + 2)
      000AC8 74 7F            [12] 2204 	mov	a,#0x7f
      000ACA 55*15            [12] 2205 	anl	a,(_Temp + 3)
      000ACC 08               [12] 2206 	inc	r0
      000ACD F6               [12] 2207 	mov	@r0,a
      000ACE AA*11            [24] 2208 	mov	r2,_temp
      000AD0 E4               [12] 2209 	clr	a
      000AD1 FB               [12] 2210 	mov	r3,a
      000AD2 FE               [12] 2211 	mov	r6,a
      000AD3 EA               [12] 2212 	mov	a,r2
      000AD4 03               [12] 2213 	rr	a
      000AD5 54 80            [12] 2214 	anl	a,#0x80
      000AD7 FF               [12] 2215 	mov	r7,a
      000AD8 7A 00            [12] 2216 	mov	r2,#0x00
      000ADA E5*00            [12] 2217 	mov	a,_bp
      000ADC 24 11            [12] 2218 	add	a,#0x11
      000ADE F8               [12] 2219 	mov	r0,a
      000ADF EA               [12] 2220 	mov	a,r2
      000AE0 46               [12] 2221 	orl	a,@r0
      000AE1 F5*12            [12] 2222 	mov	_Temp,a
      000AE3 EB               [12] 2223 	mov	a,r3
      000AE4 08               [12] 2224 	inc	r0
      000AE5 46               [12] 2225 	orl	a,@r0
      000AE6 F5*13            [12] 2226 	mov	(_Temp + 1),a
      000AE8 EE               [12] 2227 	mov	a,r6
      000AE9 08               [12] 2228 	inc	r0
      000AEA 46               [12] 2229 	orl	a,@r0
      000AEB F5*14            [12] 2230 	mov	(_Temp + 2),a
      000AED EF               [12] 2231 	mov	a,r7
      000AEE 08               [12] 2232 	inc	r0
      000AEF 46               [12] 2233 	orl	a,@r0
      000AF0 F5*15            [12] 2234 	mov	(_Temp + 3),a
                                   2235 ;	main.c:541: for (i = 0 ; i<3 ; i++){
      000AF2 8E*10            [24] 2236 	mov	_i,r6
      000AF4                       2237 00122$:
                                   2238 ;	main.c:542: Key->Array[i]= (uint8)((Temp >> ((3-i)*8)) & 0x000000ff); //array={56,25,9a,90}
      000AF4 A8*00            [24] 2239 	mov	r0,_bp
      000AF6 08               [12] 2240 	inc	r0
      000AF7 E5*00            [12] 2241 	mov	a,_bp
      000AF9 24 11            [12] 2242 	add	a,#0x11
      000AFB F9               [12] 2243 	mov	r1,a
      000AFC E5*10            [12] 2244 	mov	a,_i
      000AFE 26               [12] 2245 	add	a,@r0
      000AFF F7               [12] 2246 	mov	@r1,a
      000B00 E4               [12] 2247 	clr	a
      000B01 08               [12] 2248 	inc	r0
      000B02 36               [12] 2249 	addc	a,@r0
      000B03 09               [12] 2250 	inc	r1
      000B04 F7               [12] 2251 	mov	@r1,a
      000B05 08               [12] 2252 	inc	r0
      000B06 E6               [12] 2253 	mov	a,@r0
      000B07 09               [12] 2254 	inc	r1
      000B08 F7               [12] 2255 	mov	@r1,a
      000B09 74 03            [12] 2256 	mov	a,#0x03
      000B0B C3               [12] 2257 	clr	c
      000B0C 95*10            [12] 2258 	subb	a,_i
      000B0E C4               [12] 2259 	swap	a
      000B0F 03               [12] 2260 	rr	a
      000B10 54 F8            [12] 2261 	anl	a,#0xf8
      000B12 FC               [12] 2262 	mov	r4,a
      000B13 8C F0            [24] 2263 	mov	b,r4
      000B15 05 F0            [12] 2264 	inc	b
      000B17 AA*12            [24] 2265 	mov	r2,_Temp
      000B19 AB*13            [24] 2266 	mov	r3,(_Temp + 1)
      000B1B AC*14            [24] 2267 	mov	r4,(_Temp + 2)
      000B1D AF*15            [24] 2268 	mov	r7,(_Temp + 3)
      000B1F 80 0D            [24] 2269 	sjmp	00201$
      000B21                       2270 00200$:
      000B21 C3               [12] 2271 	clr	c
      000B22 EF               [12] 2272 	mov	a,r7
      000B23 13               [12] 2273 	rrc	a
      000B24 FF               [12] 2274 	mov	r7,a
      000B25 EC               [12] 2275 	mov	a,r4
      000B26 13               [12] 2276 	rrc	a
      000B27 FC               [12] 2277 	mov	r4,a
      000B28 EB               [12] 2278 	mov	a,r3
      000B29 13               [12] 2279 	rrc	a
      000B2A FB               [12] 2280 	mov	r3,a
      000B2B EA               [12] 2281 	mov	a,r2
      000B2C 13               [12] 2282 	rrc	a
      000B2D FA               [12] 2283 	mov	r2,a
      000B2E                       2284 00201$:
      000B2E D5 F0 F0         [24] 2285 	djnz	b,00200$
      000B31 E5*00            [12] 2286 	mov	a,_bp
      000B33 24 11            [12] 2287 	add	a,#0x11
      000B35 F8               [12] 2288 	mov	r0,a
      000B36 86 82            [24] 2289 	mov	dpl,@r0
      000B38 08               [12] 2290 	inc	r0
      000B39 86 83            [24] 2291 	mov	dph,@r0
      000B3B 08               [12] 2292 	inc	r0
      000B3C 86 F0            [24] 2293 	mov	b,@r0
      000B3E EA               [12] 2294 	mov	a,r2
      000B3F 12r00r00         [24] 2295 	lcall	__gptrput
                                   2296 ;	main.c:541: for (i = 0 ; i<3 ; i++){
      000B42 05*10            [12] 2297 	inc	_i
      000B44 74 FD            [12] 2298 	mov	a,#0x100 - 0x03
      000B46 25*10            [12] 2299 	add	a,_i
      000B48 50 AA            [24] 2300 	jnc	00122$
                                   2301 ;	main.c:544: Key->Array[3] &=0x0f; 
      000B4A E5*00            [12] 2302 	mov	a,_bp
      000B4C 24 08            [12] 2303 	add	a,#0x08
      000B4E F8               [12] 2304 	mov	r0,a
      000B4F 86 82            [24] 2305 	mov	dpl,@r0
      000B51 08               [12] 2306 	inc	r0
      000B52 86 83            [24] 2307 	mov	dph,@r0
      000B54 08               [12] 2308 	inc	r0
      000B55 86 F0            [24] 2309 	mov	b,@r0
      000B57 12r00r00         [24] 2310 	lcall	__gptrget
      000B5A FF               [12] 2311 	mov	r7,a
      000B5B 53 07 0F         [24] 2312 	anl	ar7,#0x0f
      000B5E E5*00            [12] 2313 	mov	a,_bp
      000B60 24 08            [12] 2314 	add	a,#0x08
      000B62 F8               [12] 2315 	mov	r0,a
      000B63 86 82            [24] 2316 	mov	dpl,@r0
      000B65 08               [12] 2317 	inc	r0
      000B66 86 83            [24] 2318 	mov	dph,@r0
      000B68 08               [12] 2319 	inc	r0
      000B69 86 F0            [24] 2320 	mov	b,@r0
      000B6B EF               [12] 2321 	mov	a,r7
      000B6C 12r00r00         [24] 2322 	lcall	__gptrput
                                   2323 ;	main.c:545: Key->Array[3] |= (uint8)(Temp  & 0x000000f0); 
      000B6F AF*12            [24] 2324 	mov	r7,_Temp
      000B71 53 07 F0         [24] 2325 	anl	ar7,#0xf0
      000B74 E5*00            [12] 2326 	mov	a,_bp
      000B76 24 08            [12] 2327 	add	a,#0x08
      000B78 F8               [12] 2328 	mov	r0,a
      000B79 86 82            [24] 2329 	mov	dpl,@r0
      000B7B 08               [12] 2330 	inc	r0
      000B7C 86 83            [24] 2331 	mov	dph,@r0
      000B7E 08               [12] 2332 	inc	r0
      000B7F 86 F0            [24] 2333 	mov	b,@r0
      000B81 12r00r00         [24] 2334 	lcall	__gptrget
      000B84 42 07            [12] 2335 	orl	ar7,a
      000B86 E5*00            [12] 2336 	mov	a,_bp
      000B88 24 08            [12] 2337 	add	a,#0x08
      000B8A F8               [12] 2338 	mov	r0,a
      000B8B 86 82            [24] 2339 	mov	dpl,@r0
      000B8D 08               [12] 2340 	inc	r0
      000B8E 86 83            [24] 2341 	mov	dph,@r0
      000B90 08               [12] 2342 	inc	r0
      000B91 86 F0            [24] 2343 	mov	b,@r0
      000B93 EF               [12] 2344 	mov	a,r7
      000B94 12r00r00         [24] 2345 	lcall	__gptrput
                                   2346 ;	main.c:549: Temp |= Key->Array[3];   //76543210 
      000B97 8F*12            [24] 2347 	mov	_Temp,r7
      000B99 75*13 00         [24] 2348 	mov	(_Temp + 1),#0x00
      000B9C 75*14 00         [24] 2349 	mov	(_Temp + 2),#0x00
                                   2350 ;	main.c:550: Temp = Temp <<8;
      000B9F 85*14*15         [24] 2351 	mov	(_Temp + 3),(_Temp + 2)
      000BA2 85*13*14         [24] 2352 	mov	(_Temp + 2),(_Temp + 1)
      000BA5 85*12*13         [24] 2353 	mov	(_Temp + 1),_Temp
      000BA8 75*12 00         [24] 2354 	mov	_Temp,#0x00
                                   2355 ;	main.c:552: Temp |= Key->Array[4];   //20
      000BAB E5*00            [12] 2356 	mov	a,_bp
      000BAD 24 04            [12] 2357 	add	a,#0x04
      000BAF F8               [12] 2358 	mov	r0,a
      000BB0 86 82            [24] 2359 	mov	dpl,@r0
      000BB2 08               [12] 2360 	inc	r0
      000BB3 86 83            [24] 2361 	mov	dph,@r0
      000BB5 08               [12] 2362 	inc	r0
      000BB6 86 F0            [24] 2363 	mov	b,@r0
      000BB8 12r00r00         [24] 2364 	lcall	__gptrget
      000BBB FF               [12] 2365 	mov	r7,a
      000BBC E4               [12] 2366 	clr	a
      000BBD FE               [12] 2367 	mov	r6,a
      000BBE FD               [12] 2368 	mov	r5,a
      000BBF FC               [12] 2369 	mov	r4,a
      000BC0 EF               [12] 2370 	mov	a,r7
      000BC1 42*12            [12] 2371 	orl	_Temp,a
      000BC3 EE               [12] 2372 	mov	a,r6
      000BC4 42*13            [12] 2373 	orl	(_Temp + 1),a
      000BC6 ED               [12] 2374 	mov	a,r5
      000BC7 42*14            [12] 2375 	orl	(_Temp + 2),a
      000BC9 EC               [12] 2376 	mov	a,r4
      000BCA 42*15            [12] 2377 	orl	(_Temp + 3),a
                                   2378 ;	main.c:554: Temp = Temp <<8;
      000BCC 85*14*15         [24] 2379 	mov	(_Temp + 3),(_Temp + 2)
      000BCF 85*13*14         [24] 2380 	mov	(_Temp + 2),(_Temp + 1)
      000BD2 85*12*13         [24] 2381 	mov	(_Temp + 1),_Temp
      000BD5 75*12 00         [24] 2382 	mov	_Temp,#0x00
                                   2383 ;	main.c:555: Temp |= Key->Array[5];   //20
      000BD8 E5*00            [12] 2384 	mov	a,_bp
      000BDA 24 0B            [12] 2385 	add	a,#0x0b
      000BDC F8               [12] 2386 	mov	r0,a
      000BDD 86 82            [24] 2387 	mov	dpl,@r0
      000BDF 08               [12] 2388 	inc	r0
      000BE0 86 83            [24] 2389 	mov	dph,@r0
      000BE2 08               [12] 2390 	inc	r0
      000BE3 86 F0            [24] 2391 	mov	b,@r0
      000BE5 12r00r00         [24] 2392 	lcall	__gptrget
      000BE8 FF               [12] 2393 	mov	r7,a
      000BE9 E4               [12] 2394 	clr	a
      000BEA FE               [12] 2395 	mov	r6,a
      000BEB FD               [12] 2396 	mov	r5,a
      000BEC FC               [12] 2397 	mov	r4,a
      000BED EF               [12] 2398 	mov	a,r7
      000BEE 42*12            [12] 2399 	orl	_Temp,a
      000BF0 EE               [12] 2400 	mov	a,r6
      000BF1 42*13            [12] 2401 	orl	(_Temp + 1),a
      000BF3 ED               [12] 2402 	mov	a,r5
      000BF4 42*14            [12] 2403 	orl	(_Temp + 2),a
      000BF6 EC               [12] 2404 	mov	a,r4
      000BF7 42*15            [12] 2405 	orl	(_Temp + 3),a
                                   2406 ;	main.c:556: Temp = Temp <<8;
      000BF9 85*14*15         [24] 2407 	mov	(_Temp + 3),(_Temp + 2)
      000BFC 85*13*14         [24] 2408 	mov	(_Temp + 2),(_Temp + 1)
      000BFF 85*12*13         [24] 2409 	mov	(_Temp + 1),_Temp
      000C02 75*12 00         [24] 2410 	mov	_Temp,#0x00
                                   2411 ;	main.c:557: Temp |= Key->Array[6];	//28
      000C05 E5*00            [12] 2412 	mov	a,_bp
      000C07 24 0E            [12] 2413 	add	a,#0x0e
      000C09 F8               [12] 2414 	mov	r0,a
      000C0A 86 82            [24] 2415 	mov	dpl,@r0
      000C0C 08               [12] 2416 	inc	r0
      000C0D 86 83            [24] 2417 	mov	dph,@r0
      000C0F 08               [12] 2418 	inc	r0
      000C10 86 F0            [24] 2419 	mov	b,@r0
      000C12 12r00r00         [24] 2420 	lcall	__gptrget
      000C15 FF               [12] 2421 	mov	r7,a
      000C16 E4               [12] 2422 	clr	a
      000C17 FE               [12] 2423 	mov	r6,a
      000C18 FD               [12] 2424 	mov	r5,a
      000C19 FC               [12] 2425 	mov	r4,a
      000C1A EF               [12] 2426 	mov	a,r7
      000C1B 42*12            [12] 2427 	orl	_Temp,a
      000C1D EE               [12] 2428 	mov	a,r6
      000C1E 42*13            [12] 2429 	orl	(_Temp + 1),a
      000C20 ED               [12] 2430 	mov	a,r5
      000C21 42*14            [12] 2431 	orl	(_Temp + 2),a
      000C23 EC               [12] 2432 	mov	a,r4
      000C24 42*15            [12] 2433 	orl	(_Temp + 3),a
                                   2434 ;	main.c:558: Temp= Temp <<4;
      000C26 E5*15            [12] 2435 	mov	a,(_Temp + 3)
      000C28 C4               [12] 2436 	swap	a
      000C29 54 F0            [12] 2437 	anl	a,#0xf0
      000C2B C5*14            [12] 2438 	xch	a,(_Temp + 2)
      000C2D C4               [12] 2439 	swap	a
      000C2E C5*14            [12] 2440 	xch	a,(_Temp + 2)
      000C30 65*14            [12] 2441 	xrl	a,(_Temp + 2)
      000C32 C5*14            [12] 2442 	xch	a,(_Temp + 2)
      000C34 54 F0            [12] 2443 	anl	a,#0xf0
      000C36 C5*14            [12] 2444 	xch	a,(_Temp + 2)
      000C38 65*14            [12] 2445 	xrl	a,(_Temp + 2)
      000C3A F5*15            [12] 2446 	mov	(_Temp + 3),a
      000C3C E5*13            [12] 2447 	mov	a,(_Temp + 1)
      000C3E C4               [12] 2448 	swap	a
      000C3F 54 0F            [12] 2449 	anl	a,#0x0f
      000C41 45*14            [12] 2450 	orl	a,(_Temp + 2)
      000C43 F5*14            [12] 2451 	mov	(_Temp + 2),a
      000C45 E5*13            [12] 2452 	mov	a,(_Temp + 1)
      000C47 C4               [12] 2453 	swap	a
      000C48 54 F0            [12] 2454 	anl	a,#0xf0
      000C4A C5*12            [12] 2455 	xch	a,_Temp
      000C4C C4               [12] 2456 	swap	a
      000C4D C5*12            [12] 2457 	xch	a,_Temp
      000C4F 65*12            [12] 2458 	xrl	a,_Temp
      000C51 C5*12            [12] 2459 	xch	a,_Temp
      000C53 54 F0            [12] 2460 	anl	a,#0xf0
      000C55 C5*12            [12] 2461 	xch	a,_Temp
      000C57 65*12            [12] 2462 	xrl	a,_Temp
      000C59 F5*13            [12] 2463 	mov	(_Temp + 1),a
                                   2464 ;	main.c:561: temp = GET_BIT(Temp,4);//
      000C5B E5*12            [12] 2465 	mov	a,_Temp
      000C5D C4               [12] 2466 	swap	a
      000C5E 54 01            [12] 2467 	anl	a,#0x01
      000C60 F5*11            [12] 2468 	mov	_temp,a
                                   2469 ;	main.c:562: Temp >>=1;//011 0001 0010 1100 1101 0100 0101 0000 0
      000C62 E5*15            [12] 2470 	mov	a,(_Temp + 3)
      000C64 C3               [12] 2471 	clr	c
      000C65 13               [12] 2472 	rrc	a
      000C66 F5*15            [12] 2473 	mov	(_Temp + 3),a
      000C68 E5*14            [12] 2474 	mov	a,(_Temp + 2)
      000C6A 13               [12] 2475 	rrc	a
      000C6B F5*14            [12] 2476 	mov	(_Temp + 2),a
      000C6D E5*13            [12] 2477 	mov	a,(_Temp + 1)
      000C6F 13               [12] 2478 	rrc	a
      000C70 F5*13            [12] 2479 	mov	(_Temp + 1),a
      000C72 E5*12            [12] 2480 	mov	a,_Temp
      000C74 13               [12] 2481 	rrc	a
      000C75 F5*12            [12] 2482 	mov	_Temp,a
                                   2483 ;	main.c:563: Temp = ((Temp & ~( ((uint32)1)<<31)) | (((uint32)temp) << 31));// 0110 0010 0101 1001 1010 1000 101(1) 0000 >> 62 59 a9 b0
      000C77 E5*00            [12] 2484 	mov	a,_bp
      000C79 24 11            [12] 2485 	add	a,#0x11
      000C7B F8               [12] 2486 	mov	r0,a
      000C7C A6*12            [24] 2487 	mov	@r0,_Temp
      000C7E 08               [12] 2488 	inc	r0
      000C7F A6*13            [24] 2489 	mov	@r0,(_Temp + 1)
      000C81 08               [12] 2490 	inc	r0
      000C82 A6*14            [24] 2491 	mov	@r0,(_Temp + 2)
      000C84 74 7F            [12] 2492 	mov	a,#0x7f
      000C86 55*15            [12] 2493 	anl	a,(_Temp + 3)
      000C88 08               [12] 2494 	inc	r0
      000C89 F6               [12] 2495 	mov	@r0,a
      000C8A AA*11            [24] 2496 	mov	r2,_temp
      000C8C E4               [12] 2497 	clr	a
      000C8D FB               [12] 2498 	mov	r3,a
      000C8E FE               [12] 2499 	mov	r6,a
      000C8F EA               [12] 2500 	mov	a,r2
      000C90 03               [12] 2501 	rr	a
      000C91 54 80            [12] 2502 	anl	a,#0x80
      000C93 FF               [12] 2503 	mov	r7,a
      000C94 7A 00            [12] 2504 	mov	r2,#0x00
      000C96 E5*00            [12] 2505 	mov	a,_bp
      000C98 24 11            [12] 2506 	add	a,#0x11
      000C9A F8               [12] 2507 	mov	r0,a
      000C9B EA               [12] 2508 	mov	a,r2
      000C9C 46               [12] 2509 	orl	a,@r0
      000C9D F5*12            [12] 2510 	mov	_Temp,a
      000C9F EB               [12] 2511 	mov	a,r3
      000CA0 08               [12] 2512 	inc	r0
      000CA1 46               [12] 2513 	orl	a,@r0
      000CA2 F5*13            [12] 2514 	mov	(_Temp + 1),a
      000CA4 EE               [12] 2515 	mov	a,r6
      000CA5 08               [12] 2516 	inc	r0
      000CA6 46               [12] 2517 	orl	a,@r0
      000CA7 F5*14            [12] 2518 	mov	(_Temp + 2),a
      000CA9 EF               [12] 2519 	mov	a,r7
      000CAA 08               [12] 2520 	inc	r0
      000CAB 46               [12] 2521 	orl	a,@r0
      000CAC F5*15            [12] 2522 	mov	(_Temp + 3),a
                                   2523 ;	main.c:565: Key->Array[3] &=0xf0; 
      000CAE E5*00            [12] 2524 	mov	a,_bp
      000CB0 24 08            [12] 2525 	add	a,#0x08
      000CB2 F8               [12] 2526 	mov	r0,a
      000CB3 86 82            [24] 2527 	mov	dpl,@r0
      000CB5 08               [12] 2528 	inc	r0
      000CB6 86 83            [24] 2529 	mov	dph,@r0
      000CB8 08               [12] 2530 	inc	r0
      000CB9 86 F0            [24] 2531 	mov	b,@r0
      000CBB 12r00r00         [24] 2532 	lcall	__gptrget
      000CBE FF               [12] 2533 	mov	r7,a
      000CBF 53 07 F0         [24] 2534 	anl	ar7,#0xf0
      000CC2 E5*00            [12] 2535 	mov	a,_bp
      000CC4 24 08            [12] 2536 	add	a,#0x08
      000CC6 F8               [12] 2537 	mov	r0,a
      000CC7 86 82            [24] 2538 	mov	dpl,@r0
      000CC9 08               [12] 2539 	inc	r0
      000CCA 86 83            [24] 2540 	mov	dph,@r0
      000CCC 08               [12] 2541 	inc	r0
      000CCD 86 F0            [24] 2542 	mov	b,@r0
      000CCF EF               [12] 2543 	mov	a,r7
      000CD0 12r00r00         [24] 2544 	lcall	__gptrput
                                   2545 ;	main.c:566: Key->Array[3] |= (uint8)((Temp)>>28); //62 59 a9 b0 >> 60 00 00 00 >>28 >>>> 00 00 00 06 >> 06
      000CD3 E5*15            [12] 2546 	mov	a,(_Temp + 3)
      000CD5 C4               [12] 2547 	swap	a
      000CD6 54 0F            [12] 2548 	anl	a,#0x0f
      000CD8 FC               [12] 2549 	mov	r4,a
      000CD9 E4               [12] 2550 	clr	a
      000CDA FD               [12] 2551 	mov	r5,a
      000CDB FE               [12] 2552 	mov	r6,a
      000CDC E5*00            [12] 2553 	mov	a,_bp
      000CDE 24 08            [12] 2554 	add	a,#0x08
      000CE0 F8               [12] 2555 	mov	r0,a
      000CE1 86 82            [24] 2556 	mov	dpl,@r0
      000CE3 08               [12] 2557 	inc	r0
      000CE4 86 83            [24] 2558 	mov	dph,@r0
      000CE6 08               [12] 2559 	inc	r0
      000CE7 86 F0            [24] 2560 	mov	b,@r0
      000CE9 12r00r00         [24] 2561 	lcall	__gptrget
      000CEC FF               [12] 2562 	mov	r7,a
      000CED 42 04            [12] 2563 	orl	ar4,a
      000CEF E5*00            [12] 2564 	mov	a,_bp
      000CF1 24 08            [12] 2565 	add	a,#0x08
      000CF3 F8               [12] 2566 	mov	r0,a
      000CF4 86 82            [24] 2567 	mov	dpl,@r0
      000CF6 08               [12] 2568 	inc	r0
      000CF7 86 83            [24] 2569 	mov	dph,@r0
      000CF9 08               [12] 2570 	inc	r0
      000CFA 86 F0            [24] 2571 	mov	b,@r0
      000CFC EC               [12] 2572 	mov	a,r4
      000CFD 12r00r00         [24] 2573 	lcall	__gptrput
                                   2574 ;	main.c:567: Temp <<=4; // Temp= 25 9a 9b 00 >> 00 00 00 25
      000D00 E5*15            [12] 2575 	mov	a,(_Temp + 3)
      000D02 C4               [12] 2576 	swap	a
      000D03 54 F0            [12] 2577 	anl	a,#0xf0
      000D05 C5*14            [12] 2578 	xch	a,(_Temp + 2)
      000D07 C4               [12] 2579 	swap	a
      000D08 C5*14            [12] 2580 	xch	a,(_Temp + 2)
      000D0A 65*14            [12] 2581 	xrl	a,(_Temp + 2)
      000D0C C5*14            [12] 2582 	xch	a,(_Temp + 2)
      000D0E 54 F0            [12] 2583 	anl	a,#0xf0
      000D10 C5*14            [12] 2584 	xch	a,(_Temp + 2)
      000D12 65*14            [12] 2585 	xrl	a,(_Temp + 2)
      000D14 F5*15            [12] 2586 	mov	(_Temp + 3),a
      000D16 E5*13            [12] 2587 	mov	a,(_Temp + 1)
      000D18 C4               [12] 2588 	swap	a
      000D19 54 0F            [12] 2589 	anl	a,#0x0f
      000D1B 45*14            [12] 2590 	orl	a,(_Temp + 2)
      000D1D F5*14            [12] 2591 	mov	(_Temp + 2),a
      000D1F E5*13            [12] 2592 	mov	a,(_Temp + 1)
      000D21 C4               [12] 2593 	swap	a
      000D22 54 F0            [12] 2594 	anl	a,#0xf0
      000D24 C5*12            [12] 2595 	xch	a,_Temp
      000D26 C4               [12] 2596 	swap	a
      000D27 C5*12            [12] 2597 	xch	a,_Temp
      000D29 65*12            [12] 2598 	xrl	a,_Temp
      000D2B C5*12            [12] 2599 	xch	a,_Temp
      000D2D 54 F0            [12] 2600 	anl	a,#0xf0
      000D2F C5*12            [12] 2601 	xch	a,_Temp
      000D31 65*12            [12] 2602 	xrl	a,_Temp
      000D33 F5*13            [12] 2603 	mov	(_Temp + 1),a
                                   2604 ;	main.c:568: for (i = 4 ; i<8 ; i++){
      000D35 75*10 04         [24] 2605 	mov	_i,#0x04
      000D38                       2606 00124$:
                                   2607 ;	main.c:569: Key->Array[i]= (uint8)((Temp >> ((7-i)*8)) & 0x000000ff); //array={25,9a,9b,00}
      000D38 A8*00            [24] 2608 	mov	r0,_bp
      000D3A 08               [12] 2609 	inc	r0
      000D3B E5*00            [12] 2610 	mov	a,_bp
      000D3D 24 11            [12] 2611 	add	a,#0x11
      000D3F F9               [12] 2612 	mov	r1,a
      000D40 E5*10            [12] 2613 	mov	a,_i
      000D42 26               [12] 2614 	add	a,@r0
      000D43 F7               [12] 2615 	mov	@r1,a
      000D44 E4               [12] 2616 	clr	a
      000D45 08               [12] 2617 	inc	r0
      000D46 36               [12] 2618 	addc	a,@r0
      000D47 09               [12] 2619 	inc	r1
      000D48 F7               [12] 2620 	mov	@r1,a
      000D49 08               [12] 2621 	inc	r0
      000D4A E6               [12] 2622 	mov	a,@r0
      000D4B 09               [12] 2623 	inc	r1
      000D4C F7               [12] 2624 	mov	@r1,a
      000D4D 74 07            [12] 2625 	mov	a,#0x07
      000D4F C3               [12] 2626 	clr	c
      000D50 95*10            [12] 2627 	subb	a,_i
      000D52 C4               [12] 2628 	swap	a
      000D53 03               [12] 2629 	rr	a
      000D54 54 F8            [12] 2630 	anl	a,#0xf8
      000D56 FC               [12] 2631 	mov	r4,a
      000D57 8C F0            [24] 2632 	mov	b,r4
      000D59 05 F0            [12] 2633 	inc	b
      000D5B AA*12            [24] 2634 	mov	r2,_Temp
      000D5D AB*13            [24] 2635 	mov	r3,(_Temp + 1)
      000D5F AC*14            [24] 2636 	mov	r4,(_Temp + 2)
      000D61 AF*15            [24] 2637 	mov	r7,(_Temp + 3)
      000D63 80 0D            [24] 2638 	sjmp	00204$
      000D65                       2639 00203$:
      000D65 C3               [12] 2640 	clr	c
      000D66 EF               [12] 2641 	mov	a,r7
      000D67 13               [12] 2642 	rrc	a
      000D68 FF               [12] 2643 	mov	r7,a
      000D69 EC               [12] 2644 	mov	a,r4
      000D6A 13               [12] 2645 	rrc	a
      000D6B FC               [12] 2646 	mov	r4,a
      000D6C EB               [12] 2647 	mov	a,r3
      000D6D 13               [12] 2648 	rrc	a
      000D6E FB               [12] 2649 	mov	r3,a
      000D6F EA               [12] 2650 	mov	a,r2
      000D70 13               [12] 2651 	rrc	a
      000D71 FA               [12] 2652 	mov	r2,a
      000D72                       2653 00204$:
      000D72 D5 F0 F0         [24] 2654 	djnz	b,00203$
      000D75 E5*00            [12] 2655 	mov	a,_bp
      000D77 24 11            [12] 2656 	add	a,#0x11
      000D79 F8               [12] 2657 	mov	r0,a
      000D7A 86 82            [24] 2658 	mov	dpl,@r0
      000D7C 08               [12] 2659 	inc	r0
      000D7D 86 83            [24] 2660 	mov	dph,@r0
      000D7F 08               [12] 2661 	inc	r0
      000D80 86 F0            [24] 2662 	mov	b,@r0
      000D82 EA               [12] 2663 	mov	a,r2
      000D83 12r00r00         [24] 2664 	lcall	__gptrput
                                   2665 ;	main.c:568: for (i = 4 ; i<8 ; i++){
      000D86 05*10            [12] 2666 	inc	_i
      000D88 74 F8            [12] 2667 	mov	a,#0x100 - 0x08
      000D8A 25*10            [12] 2668 	add	a,_i
      000D8C 50 AA            [24] 2669 	jnc	00124$
      000D8E                       2670 00113$:
                                   2671 ;	main.c:574: sub_key->Half[1] = Key->Half[1];
      000D8E E5*00            [12] 2672 	mov	a,_bp
      000D90 24 FA            [12] 2673 	add	a,#0xfa
      000D92 F8               [12] 2674 	mov	r0,a
      000D93 E5*00            [12] 2675 	mov	a,_bp
      000D95 24 0E            [12] 2676 	add	a,#0x0e
      000D97 F9               [12] 2677 	mov	r1,a
      000D98 E6               [12] 2678 	mov	a,@r0
      000D99 F7               [12] 2679 	mov	@r1,a
      000D9A 08               [12] 2680 	inc	r0
      000D9B E6               [12] 2681 	mov	a,@r0
      000D9C 09               [12] 2682 	inc	r1
      000D9D F7               [12] 2683 	mov	@r1,a
      000D9E 08               [12] 2684 	inc	r0
      000D9F E6               [12] 2685 	mov	a,@r0
      000DA0 09               [12] 2686 	inc	r1
      000DA1 F7               [12] 2687 	mov	@r1,a
      000DA2 E5*00            [12] 2688 	mov	a,_bp
      000DA4 24 0E            [12] 2689 	add	a,#0x0e
      000DA6 F8               [12] 2690 	mov	r0,a
      000DA7 E5*00            [12] 2691 	mov	a,_bp
      000DA9 24 11            [12] 2692 	add	a,#0x11
      000DAB F9               [12] 2693 	mov	r1,a
      000DAC 74 04            [12] 2694 	mov	a,#0x04
      000DAE 26               [12] 2695 	add	a,@r0
      000DAF F7               [12] 2696 	mov	@r1,a
      000DB0 E4               [12] 2697 	clr	a
      000DB1 08               [12] 2698 	inc	r0
      000DB2 36               [12] 2699 	addc	a,@r0
      000DB3 09               [12] 2700 	inc	r1
      000DB4 F7               [12] 2701 	mov	@r1,a
      000DB5 08               [12] 2702 	inc	r0
      000DB6 E6               [12] 2703 	mov	a,@r0
      000DB7 09               [12] 2704 	inc	r1
      000DB8 F7               [12] 2705 	mov	@r1,a
      000DB9 A8*00            [24] 2706 	mov	r0,_bp
      000DBB 08               [12] 2707 	inc	r0
      000DBC 74 04            [12] 2708 	mov	a,#0x04
      000DBE 26               [12] 2709 	add	a,@r0
      000DBF FA               [12] 2710 	mov	r2,a
      000DC0 E4               [12] 2711 	clr	a
      000DC1 08               [12] 2712 	inc	r0
      000DC2 36               [12] 2713 	addc	a,@r0
      000DC3 FB               [12] 2714 	mov	r3,a
      000DC4 08               [12] 2715 	inc	r0
      000DC5 86 04            [24] 2716 	mov	ar4,@r0
      000DC7 8A 82            [24] 2717 	mov	dpl,r2
      000DC9 8B 83            [24] 2718 	mov	dph,r3
      000DCB 8C F0            [24] 2719 	mov	b,r4
      000DCD 12r00r00         [24] 2720 	lcall	__gptrget
      000DD0 FA               [12] 2721 	mov	r2,a
      000DD1 A3               [24] 2722 	inc	dptr
      000DD2 12r00r00         [24] 2723 	lcall	__gptrget
      000DD5 FB               [12] 2724 	mov	r3,a
      000DD6 A3               [24] 2725 	inc	dptr
      000DD7 12r00r00         [24] 2726 	lcall	__gptrget
      000DDA FC               [12] 2727 	mov	r4,a
      000DDB A3               [24] 2728 	inc	dptr
      000DDC 12r00r00         [24] 2729 	lcall	__gptrget
      000DDF FF               [12] 2730 	mov	r7,a
      000DE0 E5*00            [12] 2731 	mov	a,_bp
      000DE2 24 11            [12] 2732 	add	a,#0x11
      000DE4 F8               [12] 2733 	mov	r0,a
      000DE5 86 82            [24] 2734 	mov	dpl,@r0
      000DE7 08               [12] 2735 	inc	r0
      000DE8 86 83            [24] 2736 	mov	dph,@r0
      000DEA 08               [12] 2737 	inc	r0
      000DEB 86 F0            [24] 2738 	mov	b,@r0
      000DED EA               [12] 2739 	mov	a,r2
      000DEE 12r00r00         [24] 2740 	lcall	__gptrput
      000DF1 A3               [24] 2741 	inc	dptr
      000DF2 EB               [12] 2742 	mov	a,r3
      000DF3 12r00r00         [24] 2743 	lcall	__gptrput
      000DF6 A3               [24] 2744 	inc	dptr
      000DF7 EC               [12] 2745 	mov	a,r4
      000DF8 12r00r00         [24] 2746 	lcall	__gptrput
      000DFB A3               [24] 2747 	inc	dptr
      000DFC EF               [12] 2748 	mov	a,r7
      000DFD 12r00r00         [24] 2749 	lcall	__gptrput
                                   2750 ;	main.c:575: sub_key->Half[0] = Key->Half[0];
      000E00 A8*00            [24] 2751 	mov	r0,_bp
      000E02 08               [12] 2752 	inc	r0
      000E03 86 82            [24] 2753 	mov	dpl,@r0
      000E05 08               [12] 2754 	inc	r0
      000E06 86 83            [24] 2755 	mov	dph,@r0
      000E08 08               [12] 2756 	inc	r0
      000E09 86 F0            [24] 2757 	mov	b,@r0
      000E0B 12r00r00         [24] 2758 	lcall	__gptrget
      000E0E FD               [12] 2759 	mov	r5,a
      000E0F A3               [24] 2760 	inc	dptr
      000E10 12r00r00         [24] 2761 	lcall	__gptrget
      000E13 FE               [12] 2762 	mov	r6,a
      000E14 A3               [24] 2763 	inc	dptr
      000E15 12r00r00         [24] 2764 	lcall	__gptrget
      000E18 FC               [12] 2765 	mov	r4,a
      000E19 A3               [24] 2766 	inc	dptr
      000E1A 12r00r00         [24] 2767 	lcall	__gptrget
      000E1D FF               [12] 2768 	mov	r7,a
      000E1E E5*00            [12] 2769 	mov	a,_bp
      000E20 24 0E            [12] 2770 	add	a,#0x0e
      000E22 F8               [12] 2771 	mov	r0,a
      000E23 86 82            [24] 2772 	mov	dpl,@r0
      000E25 08               [12] 2773 	inc	r0
      000E26 86 83            [24] 2774 	mov	dph,@r0
      000E28 08               [12] 2775 	inc	r0
      000E29 86 F0            [24] 2776 	mov	b,@r0
      000E2B ED               [12] 2777 	mov	a,r5
      000E2C 12r00r00         [24] 2778 	lcall	__gptrput
      000E2F A3               [24] 2779 	inc	dptr
      000E30 EE               [12] 2780 	mov	a,r6
      000E31 12r00r00         [24] 2781 	lcall	__gptrput
      000E34 A3               [24] 2782 	inc	dptr
      000E35 EC               [12] 2783 	mov	a,r4
      000E36 12r00r00         [24] 2784 	lcall	__gptrput
      000E39 A3               [24] 2785 	inc	dptr
      000E3A EF               [12] 2786 	mov	a,r7
      000E3B 12r00r00         [24] 2787 	lcall	__gptrput
                                   2788 ;	main.c:577: }
      000E3E 85*00 81         [24] 2789 	mov	sp,_bp
      000E41 D0*00            [24] 2790 	pop	_bp
      000E43 22               [24] 2791 	ret
                                   2792 ;------------------------------------------------------------
                                   2793 ;Allocation info for local variables in function 'main'
                                   2794 ;------------------------------------------------------------
                                   2795 ;temp2                     Allocated to registers 
                                   2796 ;round                     Allocated to stack - _bp +8
                                   2797 ;round_in                  Allocated to stack - _bp +9
                                   2798 ;subbkey                   Allocated to stack - _bp +17
                                   2799 ;key_56                    Allocated to stack - _bp +25
                                   2800 ;pc2_in                    Allocated to stack - _bp +33
                                   2801 ;sloc0                     Allocated to stack - _bp +1
                                   2802 ;sloc1                     Allocated to stack - _bp +2
                                   2803 ;sloc2                     Allocated to stack - _bp +3
                                   2804 ;sloc3                     Allocated to stack - _bp +4
                                   2805 ;sloc4                     Allocated to stack - _bp +7
                                   2806 ;------------------------------------------------------------
                                   2807 ;	main.c:588: int main(void){
                                   2808 ;	-----------------------------------------
                                   2809 ;	 function main
                                   2810 ;	-----------------------------------------
      000E44                       2811 _main:
      000E44 C0*00            [24] 2812 	push	_bp
      000E46 E5 81            [12] 2813 	mov	a,sp
      000E48 F5*00            [12] 2814 	mov	_bp,a
      000E4A 24 28            [12] 2815 	add	a,#0x28
      000E4C F5 81            [12] 2816 	mov	sp,a
                                   2817 ;	main.c:589: SCON=0x50;
      000E4E 75 98 50         [24] 2818 	mov	_SCON,#0x50
                                   2819 ;	main.c:590: TMOD=0x20;
      000E51 75 89 20         [24] 2820 	mov	_TMOD,#0x20
                                   2821 ;	main.c:591: TH1=-3;
      000E54 75 8D FD         [24] 2822 	mov	_TH1,#0xfd
                                   2823 ;	main.c:592: TL1=-3;
      000E57 75 8B FD         [24] 2824 	mov	_TL1,#0xfd
                                   2825 ;	main.c:593: TR1=1;
                                   2826 ;	assignBit
      000E5A D2 8E            [12] 2827 	setb	_TR1
                                   2828 ;	main.c:599: SBUF = 'K';
      000E5C 75 99 4B         [24] 2829 	mov	_SBUF,#0x4b
                                   2830 ;	main.c:600: while (0 == TI);
      000E5F                       2831 00101$:
                                   2832 ;	main.c:601: TI = 0;
                                   2833 ;	assignBit
      000E5F 10 99 02         [24] 2834 	jbc	_TI,00407$
      000E62 80 FB            [24] 2835 	sjmp	00101$
      000E64                       2836 00407$:
                                   2837 ;	main.c:602: spi_delay();
      000E64 12r00r00         [24] 2838 	lcall	_spi_delay
                                   2839 ;	main.c:603: SBUF = ':';
      000E67 75 99 3A         [24] 2840 	mov	_SBUF,#0x3a
                                   2841 ;	main.c:604: while (0 == TI);
      000E6A                       2842 00104$:
                                   2843 ;	main.c:605: TI = 0;
                                   2844 ;	assignBit
      000E6A 10 99 02         [24] 2845 	jbc	_TI,00408$
      000E6D 80 FB            [24] 2846 	sjmp	00104$
      000E6F                       2847 00408$:
                                   2848 ;	main.c:606: spi_delay();
      000E6F 12r00r00         [24] 2849 	lcall	_spi_delay
                                   2850 ;	main.c:607: for (i=0 ; i<8;i++){
      000E72 75*10 00         [24] 2851 	mov	_i,#0x00
                                   2852 ;	main.c:608: while(0==RI);
      000E75                       2853 00107$:
      000E75 30 98 FD         [24] 2854 	jnb	_RI,00107$
                                   2855 ;	main.c:609: temp = SBUF;
      000E78 85 99*11         [24] 2856 	mov	_temp,_SBUF
                                   2857 ;	main.c:610: RI=0;
                                   2858 ;	assignBit
      000E7B C2 98            [12] 2859 	clr	_RI
                                   2860 ;	main.c:611: spi_delay();
      000E7D 12r00r00         [24] 2861 	lcall	_spi_delay
                                   2862 ;	main.c:612: SBUF = temp;
      000E80 85*11 99         [24] 2863 	mov	_SBUF,_temp
                                   2864 ;	main.c:613: while(0==TI);
      000E83                       2865 00110$:
                                   2866 ;	main.c:614: TI=0;
                                   2867 ;	assignBit
      000E83 10 99 02         [24] 2868 	jbc	_TI,00410$
      000E86 80 FB            [24] 2869 	sjmp	00110$
      000E88                       2870 00410$:
                                   2871 ;	main.c:615: spi_delay();
      000E88 12r00r00         [24] 2872 	lcall	_spi_delay
                                   2873 ;	main.c:616: temp -= 0x30;
      000E8B E5*11            [12] 2874 	mov	a,_temp
      000E8D 24 D0            [12] 2875 	add	a,#0xd0
                                   2876 ;	main.c:617: if(temp > 9 ){
      000E8F F5*11            [12] 2877 	mov  _temp,a
      000E91 24 F6            [12] 2878 	add	a,#0xff - 0x09
      000E93 50 07            [24] 2879 	jnc	00114$
                                   2880 ;	main.c:618: temp -= 0x7;
      000E95 E5*11            [12] 2881 	mov	a,_temp
      000E97 FF               [12] 2882 	mov	r7,a
      000E98 24 F9            [12] 2883 	add	a,#0xf9
      000E9A F5*11            [12] 2884 	mov	_temp,a
      000E9C                       2885 00114$:
                                   2886 ;	main.c:620: final_original_key.Array[i] = (temp<<4);
      000E9C E5*10            [12] 2887 	mov	a,_i
      000E9E 24r1E            [12] 2888 	add	a,#_final_original_key
      000EA0 F9               [12] 2889 	mov	r1,a
      000EA1 E5*11            [12] 2890 	mov	a,_temp
      000EA3 C4               [12] 2891 	swap	a
      000EA4 54 F0            [12] 2892 	anl	a,#0xf0
      000EA6 F7               [12] 2893 	mov	@r1,a
                                   2894 ;	main.c:621: final_original_key.Array[i] &= 0xF0;
      000EA7 E5*10            [12] 2895 	mov	a,_i
      000EA9 24r1E            [12] 2896 	add	a,#_final_original_key
      000EAB F9               [12] 2897 	mov	r1,a
      000EAC E5*10            [12] 2898 	mov	a,_i
      000EAE 24r1E            [12] 2899 	add	a,#_final_original_key
      000EB0 F8               [12] 2900 	mov	r0,a
      000EB1 86 07            [24] 2901 	mov	ar7,@r0
      000EB3 74 F0            [12] 2902 	mov	a,#0xf0
      000EB5 5F               [12] 2903 	anl	a,r7
      000EB6 F7               [12] 2904 	mov	@r1,a
                                   2905 ;	main.c:622: temp = 0;
      000EB7 75*11 00         [24] 2906 	mov	_temp,#0x00
                                   2907 ;	main.c:623: while(0==RI);
      000EBA                       2908 00115$:
      000EBA 30 98 FD         [24] 2909 	jnb	_RI,00115$
                                   2910 ;	main.c:624: temp = SBUF;
      000EBD 85 99*11         [24] 2911 	mov	_temp,_SBUF
                                   2912 ;	main.c:625: RI=0;
                                   2913 ;	assignBit
      000EC0 C2 98            [12] 2914 	clr	_RI
                                   2915 ;	main.c:626: spi_delay();
      000EC2 12r00r00         [24] 2916 	lcall	_spi_delay
                                   2917 ;	main.c:627: SBUF = temp;
      000EC5 85*11 99         [24] 2918 	mov	_SBUF,_temp
                                   2919 ;	main.c:628: while(0==TI);
      000EC8                       2920 00118$:
                                   2921 ;	main.c:629: TI=0;
                                   2922 ;	assignBit
      000EC8 10 99 02         [24] 2923 	jbc	_TI,00413$
      000ECB 80 FB            [24] 2924 	sjmp	00118$
      000ECD                       2925 00413$:
                                   2926 ;	main.c:630: spi_delay();
      000ECD 12r00r00         [24] 2927 	lcall	_spi_delay
                                   2928 ;	main.c:631: temp -= 0x30;
      000ED0 E5*11            [12] 2929 	mov	a,_temp
      000ED2 24 D0            [12] 2930 	add	a,#0xd0
                                   2931 ;	main.c:632: if(temp > 9 ){
      000ED4 F5*11            [12] 2932 	mov  _temp,a
      000ED6 24 F6            [12] 2933 	add	a,#0xff - 0x09
      000ED8 50 07            [24] 2934 	jnc	00122$
                                   2935 ;	main.c:633: temp -= 0x7;
      000EDA E5*11            [12] 2936 	mov	a,_temp
      000EDC FF               [12] 2937 	mov	r7,a
      000EDD 24 F9            [12] 2938 	add	a,#0xf9
      000EDF F5*11            [12] 2939 	mov	_temp,a
      000EE1                       2940 00122$:
                                   2941 ;	main.c:635: final_original_key.Array[i] |= temp; 
      000EE1 E5*10            [12] 2942 	mov	a,_i
      000EE3 24r1E            [12] 2943 	add	a,#_final_original_key
      000EE5 F9               [12] 2944 	mov	r1,a
      000EE6 E5*10            [12] 2945 	mov	a,_i
      000EE8 24r1E            [12] 2946 	add	a,#_final_original_key
      000EEA F8               [12] 2947 	mov	r0,a
      000EEB 86 07            [24] 2948 	mov	ar7,@r0
      000EED E5*11            [12] 2949 	mov	a,_temp
      000EEF 4F               [12] 2950 	orl	a,r7
      000EF0 F7               [12] 2951 	mov	@r1,a
                                   2952 ;	main.c:607: for (i=0 ; i<8;i++){
      000EF1 05*10            [12] 2953 	inc	_i
      000EF3 74 F8            [12] 2954 	mov	a,#0x100 - 0x08
      000EF5 25*10            [12] 2955 	add	a,_i
      000EF7 40 03            [24] 2956 	jc	00415$
      000EF9 02r0Er75         [24] 2957 	ljmp	00107$
      000EFC                       2958 00415$:
                                   2959 ;	main.c:638: spi_delay();
      000EFC 12r00r00         [24] 2960 	lcall	_spi_delay
                                   2961 ;	main.c:640: while (1){
      000EFF                       2962 00160$:
                                   2963 ;	main.c:643: for (i=0 ; i<8;i++){
      000EFF 75*10 00         [24] 2964 	mov	_i,#0x00
      000F02                       2965 00164$:
                                   2966 ;	main.c:644: spi_receive (&(final_plain_text.Array[i]));
      000F02 E5*10            [12] 2967 	mov	a,_i
      000F04 24r16            [12] 2968 	add	a,#_final_plain_text
      000F06 FF               [12] 2969 	mov	r7,a
      000F07 7E 00            [12] 2970 	mov	r6,#0x00
      000F09 7D 40            [12] 2971 	mov	r5,#0x40
      000F0B 8F 82            [24] 2972 	mov	dpl,r7
      000F0D 8E 83            [24] 2973 	mov	dph,r6
      000F0F 8D F0            [24] 2974 	mov	b,r5
      000F11 12r00r12         [24] 2975 	lcall	_spi_receive
                                   2976 ;	main.c:643: for (i=0 ; i<8;i++){
      000F14 05*10            [12] 2977 	inc	_i
      000F16 74 F8            [12] 2978 	mov	a,#0x100 - 0x08
      000F18 25*10            [12] 2979 	add	a,_i
      000F1A 50 E6            [24] 2980 	jnc	00164$
                                   2981 ;	main.c:647: SBUF = '\n';
      000F1C 75 99 0A         [24] 2982 	mov	_SBUF,#0x0a
                                   2983 ;	main.c:648: while (0 == TI);
      000F1F                       2984 00125$:
                                   2985 ;	main.c:649: TI = 0;
                                   2986 ;	assignBit
      000F1F 10 99 02         [24] 2987 	jbc	_TI,00417$
      000F22 80 FB            [24] 2988 	sjmp	00125$
      000F24                       2989 00417$:
                                   2990 ;	main.c:650: spi_delay();
      000F24 12r00r00         [24] 2991 	lcall	_spi_delay
                                   2992 ;	main.c:651: SBUF = 'C';
      000F27 75 99 43         [24] 2993 	mov	_SBUF,#0x43
                                   2994 ;	main.c:652: while (0 == TI);
      000F2A                       2995 00128$:
                                   2996 ;	main.c:653: TI = 0;
                                   2997 ;	assignBit
      000F2A 10 99 02         [24] 2998 	jbc	_TI,00418$
      000F2D 80 FB            [24] 2999 	sjmp	00128$
      000F2F                       3000 00418$:
                                   3001 ;	main.c:654: SBUF = 'T';
      000F2F 75 99 54         [24] 3002 	mov	_SBUF,#0x54
                                   3003 ;	main.c:655: while (0 == TI);
      000F32                       3004 00131$:
                                   3005 ;	main.c:656: TI = 0;
                                   3006 ;	assignBit
      000F32 10 99 02         [24] 3007 	jbc	_TI,00419$
      000F35 80 FB            [24] 3008 	sjmp	00131$
      000F37                       3009 00419$:
                                   3010 ;	main.c:657: spi_delay();
      000F37 12r00r00         [24] 3011 	lcall	_spi_delay
                                   3012 ;	main.c:658: SBUF = ':';
      000F3A 75 99 3A         [24] 3013 	mov	_SBUF,#0x3a
                                   3014 ;	main.c:659: while (0 == TI);
      000F3D                       3015 00134$:
                                   3016 ;	main.c:660: TI = 0;
                                   3017 ;	assignBit
      000F3D 10 99 02         [24] 3018 	jbc	_TI,00420$
      000F40 80 FB            [24] 3019 	sjmp	00134$
      000F42                       3020 00420$:
                                   3021 ;	main.c:661: spi_delay();
      000F42 12r00r00         [24] 3022 	lcall	_spi_delay
                                   3023 ;	main.c:662: spi_delay();
      000F45 12r00r00         [24] 3024 	lcall	_spi_delay
                                   3025 ;	main.c:664: for (i=0 ; i<8;i++){
      000F48 75*10 00         [24] 3026 	mov	_i,#0x00
      000F4B                       3027 00166$:
                                   3028 ;	main.c:666: temp2 = final_plain_text.Array[i] ;
      000F4B E5*10            [12] 3029 	mov	a,_i
      000F4D 24r16            [12] 3030 	add	a,#_final_plain_text
      000F4F F9               [12] 3031 	mov	r1,a
      000F50 87 99            [24] 3032 	mov	_SBUF,@r1
                                   3033 ;	main.c:668: while(0==TI);
      000F52                       3034 00137$:
                                   3035 ;	main.c:669: TI=0;
                                   3036 ;	assignBit
      000F52 10 99 02         [24] 3037 	jbc	_TI,00421$
      000F55 80 FB            [24] 3038 	sjmp	00137$
      000F57                       3039 00421$:
                                   3040 ;	main.c:664: for (i=0 ; i<8;i++){
      000F57 05*10            [12] 3041 	inc	_i
      000F59 74 F8            [12] 3042 	mov	a,#0x100 - 0x08
      000F5B 25*10            [12] 3043 	add	a,_i
      000F5D 50 EC            [24] 3044 	jnc	00166$
                                   3045 ;	main.c:671: spi_delay();
      000F5F 12r00r00         [24] 3046 	lcall	_spi_delay
                                   3047 ;	main.c:678: DATA round_in = {.Array = {0,0,0,0,0,0,0,0}};
      000F62 E5*00            [12] 3048 	mov	a,_bp
      000F64 24 09            [12] 3049 	add	a,#0x09
      000F66 F8               [12] 3050 	mov	r0,a
      000F67 76 00            [12] 3051 	mov	@r0,#0x00
      000F69 E5*00            [12] 3052 	mov	a,_bp
      000F6B 24 09            [12] 3053 	add	a,#0x09
      000F6D FF               [12] 3054 	mov	r7,a
      000F6E 04               [12] 3055 	inc	a
      000F6F F8               [12] 3056 	mov	r0,a
      000F70 76 00            [12] 3057 	mov	@r0,#0x00
      000F72 74 02            [12] 3058 	mov	a,#0x02
      000F74 2F               [12] 3059 	add	a,r7
      000F75 F8               [12] 3060 	mov	r0,a
      000F76 76 00            [12] 3061 	mov	@r0,#0x00
      000F78 74 03            [12] 3062 	mov	a,#0x03
      000F7A 2F               [12] 3063 	add	a,r7
      000F7B F8               [12] 3064 	mov	r0,a
      000F7C 76 00            [12] 3065 	mov	@r0,#0x00
      000F7E 74 04            [12] 3066 	mov	a,#0x04
      000F80 2F               [12] 3067 	add	a,r7
      000F81 F8               [12] 3068 	mov	r0,a
      000F82 76 00            [12] 3069 	mov	@r0,#0x00
      000F84 74 05            [12] 3070 	mov	a,#0x05
      000F86 2F               [12] 3071 	add	a,r7
      000F87 F8               [12] 3072 	mov	r0,a
      000F88 76 00            [12] 3073 	mov	@r0,#0x00
      000F8A 74 06            [12] 3074 	mov	a,#0x06
      000F8C 2F               [12] 3075 	add	a,r7
      000F8D F8               [12] 3076 	mov	r0,a
      000F8E 76 00            [12] 3077 	mov	@r0,#0x00
      000F90 74 07            [12] 3078 	mov	a,#0x07
      000F92 2F               [12] 3079 	add	a,r7
      000F93 F8               [12] 3080 	mov	r0,a
      000F94 76 00            [12] 3081 	mov	@r0,#0x00
                                   3082 ;	main.c:679: DATA subbkey = {.Array = {0,0,0,0,0,0,0,0}};
      000F96 E5*00            [12] 3083 	mov	a,_bp
      000F98 24 11            [12] 3084 	add	a,#0x11
      000F9A F8               [12] 3085 	mov	r0,a
      000F9B 76 00            [12] 3086 	mov	@r0,#0x00
      000F9D E5*00            [12] 3087 	mov	a,_bp
      000F9F 24 11            [12] 3088 	add	a,#0x11
      000FA1 FF               [12] 3089 	mov	r7,a
      000FA2 04               [12] 3090 	inc	a
      000FA3 F8               [12] 3091 	mov	r0,a
      000FA4 76 00            [12] 3092 	mov	@r0,#0x00
      000FA6 74 02            [12] 3093 	mov	a,#0x02
      000FA8 2F               [12] 3094 	add	a,r7
      000FA9 F8               [12] 3095 	mov	r0,a
      000FAA 76 00            [12] 3096 	mov	@r0,#0x00
      000FAC 74 03            [12] 3097 	mov	a,#0x03
      000FAE 2F               [12] 3098 	add	a,r7
      000FAF F8               [12] 3099 	mov	r0,a
      000FB0 76 00            [12] 3100 	mov	@r0,#0x00
      000FB2 74 04            [12] 3101 	mov	a,#0x04
      000FB4 2F               [12] 3102 	add	a,r7
      000FB5 F8               [12] 3103 	mov	r0,a
      000FB6 76 00            [12] 3104 	mov	@r0,#0x00
      000FB8 74 05            [12] 3105 	mov	a,#0x05
      000FBA 2F               [12] 3106 	add	a,r7
      000FBB F8               [12] 3107 	mov	r0,a
      000FBC 76 00            [12] 3108 	mov	@r0,#0x00
      000FBE 74 06            [12] 3109 	mov	a,#0x06
      000FC0 2F               [12] 3110 	add	a,r7
      000FC1 F8               [12] 3111 	mov	r0,a
      000FC2 76 00            [12] 3112 	mov	@r0,#0x00
      000FC4 74 07            [12] 3113 	mov	a,#0x07
      000FC6 2F               [12] 3114 	add	a,r7
      000FC7 F8               [12] 3115 	mov	r0,a
      000FC8 76 00            [12] 3116 	mov	@r0,#0x00
                                   3117 ;	main.c:680: DATA key_56 = {.Array = {0,0,0,0,0,0,0,0}};
      000FCA E5*00            [12] 3118 	mov	a,_bp
      000FCC 24 19            [12] 3119 	add	a,#0x19
      000FCE F8               [12] 3120 	mov	r0,a
      000FCF 76 00            [12] 3121 	mov	@r0,#0x00
      000FD1 E5*00            [12] 3122 	mov	a,_bp
      000FD3 24 19            [12] 3123 	add	a,#0x19
      000FD5 FF               [12] 3124 	mov	r7,a
      000FD6 04               [12] 3125 	inc	a
      000FD7 F8               [12] 3126 	mov	r0,a
      000FD8 76 00            [12] 3127 	mov	@r0,#0x00
      000FDA 74 02            [12] 3128 	mov	a,#0x02
      000FDC 2F               [12] 3129 	add	a,r7
      000FDD F8               [12] 3130 	mov	r0,a
      000FDE 76 00            [12] 3131 	mov	@r0,#0x00
      000FE0 74 03            [12] 3132 	mov	a,#0x03
      000FE2 2F               [12] 3133 	add	a,r7
      000FE3 F8               [12] 3134 	mov	r0,a
      000FE4 76 00            [12] 3135 	mov	@r0,#0x00
      000FE6 74 04            [12] 3136 	mov	a,#0x04
      000FE8 2F               [12] 3137 	add	a,r7
      000FE9 F8               [12] 3138 	mov	r0,a
      000FEA 76 00            [12] 3139 	mov	@r0,#0x00
      000FEC 74 05            [12] 3140 	mov	a,#0x05
      000FEE 2F               [12] 3141 	add	a,r7
      000FEF F8               [12] 3142 	mov	r0,a
      000FF0 76 00            [12] 3143 	mov	@r0,#0x00
      000FF2 74 06            [12] 3144 	mov	a,#0x06
      000FF4 2F               [12] 3145 	add	a,r7
      000FF5 F8               [12] 3146 	mov	r0,a
      000FF6 76 00            [12] 3147 	mov	@r0,#0x00
      000FF8 74 07            [12] 3148 	mov	a,#0x07
      000FFA 2F               [12] 3149 	add	a,r7
      000FFB F8               [12] 3150 	mov	r0,a
      000FFC 76 00            [12] 3151 	mov	@r0,#0x00
                                   3152 ;	main.c:681: DATA pc2_in = {.Array = {0,0,0,0,0,0,0,0}};
      000FFE E5*00            [12] 3153 	mov	a,_bp
      001000 24 21            [12] 3154 	add	a,#0x21
      001002 F8               [12] 3155 	mov	r0,a
      001003 76 00            [12] 3156 	mov	@r0,#0x00
      001005 E5*00            [12] 3157 	mov	a,_bp
      001007 24 21            [12] 3158 	add	a,#0x21
      001009 FF               [12] 3159 	mov	r7,a
      00100A 04               [12] 3160 	inc	a
      00100B F8               [12] 3161 	mov	r0,a
      00100C 76 00            [12] 3162 	mov	@r0,#0x00
      00100E 74 02            [12] 3163 	mov	a,#0x02
      001010 2F               [12] 3164 	add	a,r7
      001011 F8               [12] 3165 	mov	r0,a
      001012 76 00            [12] 3166 	mov	@r0,#0x00
      001014 74 03            [12] 3167 	mov	a,#0x03
      001016 2F               [12] 3168 	add	a,r7
      001017 F8               [12] 3169 	mov	r0,a
      001018 76 00            [12] 3170 	mov	@r0,#0x00
      00101A 74 04            [12] 3171 	mov	a,#0x04
      00101C 2F               [12] 3172 	add	a,r7
      00101D F8               [12] 3173 	mov	r0,a
      00101E 76 00            [12] 3174 	mov	@r0,#0x00
      001020 74 05            [12] 3175 	mov	a,#0x05
      001022 2F               [12] 3176 	add	a,r7
      001023 F8               [12] 3177 	mov	r0,a
      001024 76 00            [12] 3178 	mov	@r0,#0x00
      001026 74 06            [12] 3179 	mov	a,#0x06
      001028 2F               [12] 3180 	add	a,r7
      001029 F8               [12] 3181 	mov	r0,a
      00102A 76 00            [12] 3182 	mov	@r0,#0x00
      00102C 74 07            [12] 3183 	mov	a,#0x07
      00102E 2F               [12] 3184 	add	a,r7
      00102F F8               [12] 3185 	mov	r0,a
      001030 76 00            [12] 3186 	mov	@r0,#0x00
                                   3187 ;	main.c:684: Permutation ( &final_plain_text, &round_in, Basic_Permutation, ip);
      001032 E5*00            [12] 3188 	mov	a,_bp
      001034 24 09            [12] 3189 	add	a,#0x09
      001036 F9               [12] 3190 	mov	r1,a
      001037 FD               [12] 3191 	mov	r5,a
      001038 7E 00            [12] 3192 	mov	r6,#0x00
      00103A 7F 40            [12] 3193 	mov	r7,#0x40
      00103C C0 01            [24] 3194 	push	ar1
      00103E 74r68            [12] 3195 	mov	a,#_ip
      001040 C0 E0            [24] 3196 	push	acc
      001042 74s00            [12] 3197 	mov	a,#(_ip >> 8)
      001044 C0 E0            [24] 3198 	push	acc
      001046 74 80            [12] 3199 	mov	a,#0x80
      001048 C0 E0            [24] 3200 	push	acc
      00104A 03               [12] 3201 	rr	a
      00104B C0 E0            [24] 3202 	push	acc
      00104D C0 05            [24] 3203 	push	ar5
      00104F C0 06            [24] 3204 	push	ar6
      001051 C0 07            [24] 3205 	push	ar7
      001053 90r00r16         [24] 3206 	mov	dptr,#_final_plain_text
      001056 F5 F0            [12] 3207 	mov	b,a
      001058 12r00r84         [24] 3208 	lcall	_Permutation
      00105B E5 81            [12] 3209 	mov	a,sp
      00105D 24 F9            [12] 3210 	add	a,#0xf9
      00105F F5 81            [12] 3211 	mov	sp,a
      001061 D0 01            [24] 3212 	pop	ar1
                                   3213 ;	main.c:685: for (i=0; i<8; i++){
      001063 75*10 00         [24] 3214 	mov	_i,#0x00
      001066                       3215 00168$:
                                   3216 ;	main.c:686: final_plain_text.Array[i] = '0';
      001066 E5*10            [12] 3217 	mov	a,_i
      001068 24r16            [12] 3218 	add	a,#_final_plain_text
      00106A F8               [12] 3219 	mov	r0,a
      00106B 76 30            [12] 3220 	mov	@r0,#0x30
                                   3221 ;	main.c:685: for (i=0; i<8; i++){
      00106D 05*10            [12] 3222 	inc	_i
      00106F 74 F8            [12] 3223 	mov	a,#0x100 - 0x08
      001071 25*10            [12] 3224 	add	a,_i
      001073 50 F1            [24] 3225 	jnc	00168$
                                   3226 ;	main.c:690: Permutation ( &final_original_key, &key_56,Pc1,pc1);
      001075 E5*00            [12] 3227 	mov	a,_bp
      001077 24 19            [12] 3228 	add	a,#0x19
      001079 F8               [12] 3229 	mov	r0,a
      00107A FD               [12] 3230 	mov	r5,a
      00107B 7E 00            [12] 3231 	mov	r6,#0x00
      00107D 7F 40            [12] 3232 	mov	r7,#0x40
      00107F C0 01            [24] 3233 	push	ar1
      001081 C0 00            [24] 3234 	push	ar0
      001083 74r00            [12] 3235 	mov	a,#_pc1
      001085 C0 E0            [24] 3236 	push	acc
      001087 74s00            [12] 3237 	mov	a,#(_pc1 >> 8)
      001089 C0 E0            [24] 3238 	push	acc
      00108B 74 80            [12] 3239 	mov	a,#0x80
      00108D C0 E0            [24] 3240 	push	acc
      00108F 74 38            [12] 3241 	mov	a,#0x38
      001091 C0 E0            [24] 3242 	push	acc
      001093 C0 05            [24] 3243 	push	ar5
      001095 C0 06            [24] 3244 	push	ar6
      001097 C0 07            [24] 3245 	push	ar7
      001099 90r00r1E         [24] 3246 	mov	dptr,#_final_original_key
      00109C 75 F0 40         [24] 3247 	mov	b,#0x40
      00109F 12r00r84         [24] 3248 	lcall	_Permutation
      0010A2 E5 81            [12] 3249 	mov	a,sp
      0010A4 24 F9            [12] 3250 	add	a,#0xf9
      0010A6 F5 81            [12] 3251 	mov	sp,a
      0010A8 D0 00            [24] 3252 	pop	ar0
                                   3253 ;	main.c:693: for (round = 1 ; round < 17 ; round++){
      0010AA E5*00            [12] 3254 	mov	a,_bp
      0010AC 24 03            [12] 3255 	add	a,#0x03
      0010AE F9               [12] 3256 	mov	r1,a
      0010AF A7 00            [24] 3257 	mov	@r1,ar0
      0010B1 D0 01            [24] 3258 	pop	ar1
      0010B3 E5*00            [12] 3259 	mov	a,_bp
      0010B5 24 11            [12] 3260 	add	a,#0x11
      0010B7 FE               [12] 3261 	mov	r6,a
      0010B8 C0 00            [24] 3262 	push	ar0
      0010BA A8*00            [24] 3263 	mov	r0,_bp
      0010BC 08               [12] 3264 	inc	r0
      0010BD 08               [12] 3265 	inc	r0
      0010BE A6 06            [24] 3266 	mov	@r0,ar6
      0010C0 A8*00            [24] 3267 	mov	r0,_bp
      0010C2 08               [12] 3268 	inc	r0
      0010C3 A6 01            [24] 3269 	mov	@r0,ar1
      0010C5 E5*00            [12] 3270 	mov	a,_bp
      0010C7 24 08            [12] 3271 	add	a,#0x08
      0010C9 F8               [12] 3272 	mov	r0,a
      0010CA 76 01            [12] 3273 	mov	@r0,#0x01
      0010CC D0 00            [24] 3274 	pop	ar0
      0010CE                       3275 00170$:
                                   3276 ;	main.c:695: rotate(&key_56,round,&pc2_in);
      0010CE E5*00            [12] 3277 	mov	a,_bp
      0010D0 24 21            [12] 3278 	add	a,#0x21
      0010D2 FA               [12] 3279 	mov	r2,a
      0010D3 C0 00            [24] 3280 	push	ar0
      0010D5 E5*00            [12] 3281 	mov	a,_bp
      0010D7 24 04            [12] 3282 	add	a,#0x04
      0010D9 F8               [12] 3283 	mov	r0,a
      0010DA A6 02            [24] 3284 	mov	@r0,ar2
      0010DC 08               [12] 3285 	inc	r0
      0010DD 76 00            [12] 3286 	mov	@r0,#0x00
      0010DF 08               [12] 3287 	inc	r0
      0010E0 76 40            [12] 3288 	mov	@r0,#0x40
      0010E2 E5*00            [12] 3289 	mov	a,_bp
      0010E4 24 03            [12] 3290 	add	a,#0x03
      0010E6 F8               [12] 3291 	mov	r0,a
      0010E7 86 04            [24] 3292 	mov	ar4,@r0
      0010E9 7D 00            [12] 3293 	mov	r5,#0x00
      0010EB 7F 40            [12] 3294 	mov	r7,#0x40
      0010ED D0 00            [24] 3295 	pop	ar0
      0010EF C0 06            [24] 3296 	push	ar6
      0010F1 C0 02            [24] 3297 	push	ar2
      0010F3 C0 01            [24] 3298 	push	ar1
      0010F5 C0 00            [24] 3299 	push	ar0
      0010F7 85 00 F0         [24] 3300 	mov	b,ar0
      0010FA E5*00            [12] 3301 	mov	a,_bp
      0010FC 24 04            [12] 3302 	add	a,#0x04
      0010FE F8               [12] 3303 	mov	r0,a
      0010FF E6               [12] 3304 	mov	a,@r0
      001100 C0 E0            [24] 3305 	push	acc
      001102 08               [12] 3306 	inc	r0
      001103 E6               [12] 3307 	mov	a,@r0
      001104 C0 E0            [24] 3308 	push	acc
      001106 08               [12] 3309 	inc	r0
      001107 E6               [12] 3310 	mov	a,@r0
      001108 C0 E0            [24] 3311 	push	acc
      00110A A8 F0            [24] 3312 	mov	r0,b
      00110C 85 00 F0         [24] 3313 	mov	b,ar0
      00110F E5*00            [12] 3314 	mov	a,_bp
      001111 24 08            [12] 3315 	add	a,#0x08
      001113 F8               [12] 3316 	mov	r0,a
      001114 E6               [12] 3317 	mov	a,@r0
      001115 C0 E0            [24] 3318 	push	acc
      001117 8C 82            [24] 3319 	mov	dpl,r4
      001119 8D 83            [24] 3320 	mov	dph,r5
      00111B 8F F0            [24] 3321 	mov	b,r7
      00111D 12r06r93         [24] 3322 	lcall	_rotate
      001120 E5 81            [12] 3323 	mov	a,sp
      001122 24 FC            [12] 3324 	add	a,#0xfc
      001124 F5 81            [12] 3325 	mov	sp,a
      001126 D0 00            [24] 3326 	pop	ar0
      001128 D0 01            [24] 3327 	pop	ar1
      00112A D0 02            [24] 3328 	pop	ar2
      00112C D0 06            [24] 3329 	pop	ar6
                                   3330 ;	main.c:698: Permutation (&pc2_in,&subbkey,Pc2,pc2);
      00112E C0 00            [24] 3331 	push	ar0
      001130 E5*00            [12] 3332 	mov	a,_bp
      001132 24 04            [12] 3333 	add	a,#0x04
      001134 F8               [12] 3334 	mov	r0,a
      001135 A6 06            [24] 3335 	mov	@r0,ar6
      001137 08               [12] 3336 	inc	r0
      001138 76 00            [12] 3337 	mov	@r0,#0x00
      00113A 08               [12] 3338 	inc	r0
      00113B 76 40            [12] 3339 	mov	@r0,#0x40
      00113D D0 00            [24] 3340 	pop	ar0
      00113F 8A 03            [24] 3341 	mov	ar3,r2
      001141 C0 06            [24] 3342 	push	ar6
      001143 7E 00            [12] 3343 	mov	r6,#0x00
      001145 7F 40            [12] 3344 	mov	r7,#0x40
      001147 C0 06            [24] 3345 	push	ar6
      001149 C0 02            [24] 3346 	push	ar2
      00114B C0 01            [24] 3347 	push	ar1
      00114D C0 00            [24] 3348 	push	ar0
      00114F 74r38            [12] 3349 	mov	a,#_pc2
      001151 C0 E0            [24] 3350 	push	acc
      001153 74s00            [12] 3351 	mov	a,#(_pc2 >> 8)
      001155 C0 E0            [24] 3352 	push	acc
      001157 74 80            [12] 3353 	mov	a,#0x80
      001159 C0 E0            [24] 3354 	push	acc
      00115B 74 30            [12] 3355 	mov	a,#0x30
      00115D C0 E0            [24] 3356 	push	acc
      00115F 85 00 F0         [24] 3357 	mov	b,ar0
      001162 E5*00            [12] 3358 	mov	a,_bp
      001164 24 04            [12] 3359 	add	a,#0x04
      001166 F8               [12] 3360 	mov	r0,a
      001167 E6               [12] 3361 	mov	a,@r0
      001168 C0 E0            [24] 3362 	push	acc
      00116A 08               [12] 3363 	inc	r0
      00116B E6               [12] 3364 	mov	a,@r0
      00116C C0 E0            [24] 3365 	push	acc
      00116E 08               [12] 3366 	inc	r0
      00116F E6               [12] 3367 	mov	a,@r0
      001170 C0 E0            [24] 3368 	push	acc
      001172 8B 82            [24] 3369 	mov	dpl,r3
      001174 8E 83            [24] 3370 	mov	dph,r6
      001176 8F F0            [24] 3371 	mov	b,r7
      001178 12r00r84         [24] 3372 	lcall	_Permutation
      00117B E5 81            [12] 3373 	mov	a,sp
      00117D 24 F9            [12] 3374 	add	a,#0xf9
      00117F F5 81            [12] 3375 	mov	sp,a
      001181 D0 00            [24] 3376 	pop	ar0
      001183 D0 01            [24] 3377 	pop	ar1
      001185 D0 02            [24] 3378 	pop	ar2
      001187 D0 06            [24] 3379 	pop	ar6
                                   3380 ;	main.c:703: G_Function(&round_in,&subbkey,&final_plain_text);
      001189 C0 00            [24] 3381 	push	ar0
      00118B A8*00            [24] 3382 	mov	r0,_bp
      00118D 08               [12] 3383 	inc	r0
      00118E 08               [12] 3384 	inc	r0
      00118F C0 01            [24] 3385 	push	ar1
      001191 E5*00            [12] 3386 	mov	a,_bp
      001193 24 04            [12] 3387 	add	a,#0x04
      001195 F9               [12] 3388 	mov	r1,a
      001196 E6               [12] 3389 	mov	a,@r0
      001197 F7               [12] 3390 	mov	@r1,a
      001198 09               [12] 3391 	inc	r1
      001199 77 00            [12] 3392 	mov	@r1,#0x00
      00119B 09               [12] 3393 	inc	r1
      00119C 77 40            [12] 3394 	mov	@r1,#0x40
      00119E D0 01            [24] 3395 	pop	ar1
      0011A0 A8*00            [24] 3396 	mov	r0,_bp
      0011A2 08               [12] 3397 	inc	r0
      0011A3 86 03            [24] 3398 	mov	ar3,@r0
      0011A5 7C 00            [12] 3399 	mov	r4,#0x00
      0011A7 7F 40            [12] 3400 	mov	r7,#0x40
      0011A9 D0 00            [24] 3401 	pop	ar0
      0011AB C0 06            [24] 3402 	push	ar6
      0011AD C0 02            [24] 3403 	push	ar2
      0011AF C0 01            [24] 3404 	push	ar1
      0011B1 C0 00            [24] 3405 	push	ar0
      0011B3 74r16            [12] 3406 	mov	a,#_final_plain_text
      0011B5 C0 E0            [24] 3407 	push	acc
      0011B7 74s00            [12] 3408 	mov	a,#(_final_plain_text >> 8)
      0011B9 C0 E0            [24] 3409 	push	acc
      0011BB EF               [12] 3410 	mov	a,r7
      0011BC C0 E0            [24] 3411 	push	acc
      0011BE 85 00 F0         [24] 3412 	mov	b,ar0
      0011C1 E5*00            [12] 3413 	mov	a,_bp
      0011C3 24 04            [12] 3414 	add	a,#0x04
      0011C5 F8               [12] 3415 	mov	r0,a
      0011C6 E6               [12] 3416 	mov	a,@r0
      0011C7 C0 E0            [24] 3417 	push	acc
      0011C9 08               [12] 3418 	inc	r0
      0011CA E6               [12] 3419 	mov	a,@r0
      0011CB C0 E0            [24] 3420 	push	acc
      0011CD 08               [12] 3421 	inc	r0
      0011CE E6               [12] 3422 	mov	a,@r0
      0011CF C0 E0            [24] 3423 	push	acc
      0011D1 8B 82            [24] 3424 	mov	dpl,r3
      0011D3 8C 83            [24] 3425 	mov	dph,r4
      0011D5 8F F0            [24] 3426 	mov	b,r7
      0011D7 12r01rF8         [24] 3427 	lcall	_G_Function
      0011DA E5 81            [12] 3428 	mov	a,sp
      0011DC 24 FA            [12] 3429 	add	a,#0xfa
      0011DE F5 81            [12] 3430 	mov	sp,a
      0011E0 D0 00            [24] 3431 	pop	ar0
      0011E2 D0 01            [24] 3432 	pop	ar1
      0011E4 D0 02            [24] 3433 	pop	ar2
      0011E6 D0 06            [24] 3434 	pop	ar6
                                   3435 ;	main.c:704: final_plain_text.Half[1] = final_plain_text.Half[1] ^ round_in.Half[0];
      0011E8 87 04            [24] 3436 	mov	ar4,@r1
      0011EA 09               [12] 3437 	inc	r1
      0011EB 87 05            [24] 3438 	mov	ar5,@r1
      0011ED 09               [12] 3439 	inc	r1
      0011EE 87 06            [24] 3440 	mov	ar6,@r1
      0011F0 09               [12] 3441 	inc	r1
      0011F1 87 07            [24] 3442 	mov	ar7,@r1
      0011F3 19               [12] 3443 	dec	r1
      0011F4 19               [12] 3444 	dec	r1
      0011F5 19               [12] 3445 	dec	r1
      0011F6 E5*1A            [12] 3446 	mov	a,(_final_plain_text + 0x0004)
      0011F8 62 04            [12] 3447 	xrl	ar4,a
      0011FA E5*1B            [12] 3448 	mov	a,((_final_plain_text + 0x0004) + 1)
      0011FC 62 05            [12] 3449 	xrl	ar5,a
      0011FE E5*1C            [12] 3450 	mov	a,((_final_plain_text + 0x0004) + 2)
      001200 62 06            [12] 3451 	xrl	ar6,a
      001202 E5*1D            [12] 3452 	mov	a,((_final_plain_text + 0x0004) + 3)
      001204 62 07            [12] 3453 	xrl	ar7,a
      001206 8C*1A            [24] 3454 	mov	((_final_plain_text + 0x0004) + 0),r4
      001208 8D*1B            [24] 3455 	mov	((_final_plain_text + 0x0004) + 1),r5
      00120A 8E*1C            [24] 3456 	mov	((_final_plain_text + 0x0004) + 2),r6
      00120C 8F*1D            [24] 3457 	mov	((_final_plain_text + 0x0004) + 3),r7
                                   3458 ;	main.c:705: final_plain_text.Half[0]  = round_in.Half[1];
      00120E C0 00            [24] 3459 	push	ar0
      001210 E5*00            [12] 3460 	mov	a,_bp
      001212 24 04            [12] 3461 	add	a,#0x04
      001214 F8               [12] 3462 	mov	r0,a
      001215 74 04            [12] 3463 	mov	a,#0x04
      001217 29               [12] 3464 	add	a,r1
      001218 F6               [12] 3465 	mov	@r0,a
      001219 E5*00            [12] 3466 	mov	a,_bp
      00121B 24 04            [12] 3467 	add	a,#0x04
      00121D F8               [12] 3468 	mov	r0,a
      00121E 86 00            [24] 3469 	mov	ar0,@r0
      001220 86 04            [24] 3470 	mov	ar4,@r0
      001222 08               [12] 3471 	inc	r0
      001223 86 05            [24] 3472 	mov	ar5,@r0
      001225 08               [12] 3473 	inc	r0
      001226 86 06            [24] 3474 	mov	ar6,@r0
      001228 08               [12] 3475 	inc	r0
      001229 86 07            [24] 3476 	mov	ar7,@r0
      00122B 18               [12] 3477 	dec	r0
      00122C 18               [12] 3478 	dec	r0
      00122D 18               [12] 3479 	dec	r0
      00122E 8C*16            [24] 3480 	mov	(_final_plain_text + 0),r4
      001230 8D*17            [24] 3481 	mov	(_final_plain_text + 1),r5
      001232 8E*18            [24] 3482 	mov	(_final_plain_text + 2),r6
      001234 8F*19            [24] 3483 	mov	(_final_plain_text + 3),r7
                                   3484 ;	main.c:707: key_56.Half[0] = pc2_in.Half[0]; 
      001236 A8 02            [24] 3485 	mov	r0,ar2
      001238 86 04            [24] 3486 	mov	ar4,@r0
      00123A 08               [12] 3487 	inc	r0
      00123B 86 05            [24] 3488 	mov	ar5,@r0
      00123D 08               [12] 3489 	inc	r0
      00123E 86 06            [24] 3490 	mov	ar6,@r0
      001240 08               [12] 3491 	inc	r0
      001241 86 07            [24] 3492 	mov	ar7,@r0
      001243 D0 00            [24] 3493 	pop	ar0
      001245 A6 04            [24] 3494 	mov	@r0,ar4
      001247 08               [12] 3495 	inc	r0
      001248 A6 05            [24] 3496 	mov	@r0,ar5
      00124A 08               [12] 3497 	inc	r0
      00124B A6 06            [24] 3498 	mov	@r0,ar6
      00124D 08               [12] 3499 	inc	r0
      00124E A6 07            [24] 3500 	mov	@r0,ar7
      001250 18               [12] 3501 	dec	r0
      001251 18               [12] 3502 	dec	r0
      001252 18               [12] 3503 	dec	r0
                                   3504 ;	main.c:708: key_56.Half[1] = pc2_in.Half[1];
      001253 74 04            [12] 3505 	mov	a,#0x04
      001255 28               [12] 3506 	add	a,r0
      001256 FF               [12] 3507 	mov	r7,a
      001257 C0 00            [24] 3508 	push	ar0
      001259 E5*00            [12] 3509 	mov	a,_bp
      00125B 24 07            [12] 3510 	add	a,#0x07
      00125D F8               [12] 3511 	mov	r0,a
      00125E 74 04            [12] 3512 	mov	a,#0x04
      001260 2A               [12] 3513 	add	a,r2
      001261 F6               [12] 3514 	mov	@r0,a
      001262 E5*00            [12] 3515 	mov	a,_bp
      001264 24 07            [12] 3516 	add	a,#0x07
      001266 F8               [12] 3517 	mov	r0,a
      001267 86 00            [24] 3518 	mov	ar0,@r0
      001269 86 03            [24] 3519 	mov	ar3,@r0
      00126B 08               [12] 3520 	inc	r0
      00126C 86 04            [24] 3521 	mov	ar4,@r0
      00126E 08               [12] 3522 	inc	r0
      00126F 86 05            [24] 3523 	mov	ar5,@r0
      001271 08               [12] 3524 	inc	r0
      001272 86 06            [24] 3525 	mov	ar6,@r0
      001274 18               [12] 3526 	dec	r0
      001275 18               [12] 3527 	dec	r0
      001276 18               [12] 3528 	dec	r0
      001277 A8 07            [24] 3529 	mov	r0,ar7
      001279 A6 03            [24] 3530 	mov	@r0,ar3
      00127B 08               [12] 3531 	inc	r0
      00127C A6 04            [24] 3532 	mov	@r0,ar4
      00127E 08               [12] 3533 	inc	r0
      00127F A6 05            [24] 3534 	mov	@r0,ar5
      001281 08               [12] 3535 	inc	r0
      001282 A6 06            [24] 3536 	mov	@r0,ar6
                                   3537 ;	main.c:710: pc2_in.Half[0] = 0;
      001284 A8 02            [24] 3538 	mov	r0,ar2
      001286 76 00            [12] 3539 	mov	@r0,#0x00
      001288 08               [12] 3540 	inc	r0
      001289 76 00            [12] 3541 	mov	@r0,#0x00
      00128B 08               [12] 3542 	inc	r0
      00128C 76 00            [12] 3543 	mov	@r0,#0x00
      00128E 08               [12] 3544 	inc	r0
      00128F 76 00            [12] 3545 	mov	@r0,#0x00
                                   3546 ;	main.c:711: pc2_in.Half[1] = 0;
      001291 E5*00            [12] 3547 	mov	a,_bp
      001293 24 07            [12] 3548 	add	a,#0x07
      001295 F8               [12] 3549 	mov	r0,a
      001296 86 00            [24] 3550 	mov	ar0,@r0
      001298 76 00            [12] 3551 	mov	@r0,#0x00
      00129A 08               [12] 3552 	inc	r0
      00129B 76 00            [12] 3553 	mov	@r0,#0x00
      00129D 08               [12] 3554 	inc	r0
      00129E 76 00            [12] 3555 	mov	@r0,#0x00
      0012A0 08               [12] 3556 	inc	r0
      0012A1 76 00            [12] 3557 	mov	@r0,#0x00
      0012A3 18               [12] 3558 	dec	r0
      0012A4 18               [12] 3559 	dec	r0
      0012A5 18               [12] 3560 	dec	r0
                                   3561 ;	main.c:713: round_in.Half[0] = final_plain_text.Half[0]; 
      0012A6 AC*16            [24] 3562 	mov	r4,(_final_plain_text + 0)
      0012A8 AD*17            [24] 3563 	mov	r5,(_final_plain_text + 1)
      0012AA AE*18            [24] 3564 	mov	r6,(_final_plain_text + 2)
      0012AC AF*19            [24] 3565 	mov	r7,(_final_plain_text + 3)
      0012AE A7 04            [24] 3566 	mov	@r1,ar4
      0012B0 09               [12] 3567 	inc	r1
      0012B1 A7 05            [24] 3568 	mov	@r1,ar5
      0012B3 09               [12] 3569 	inc	r1
      0012B4 A7 06            [24] 3570 	mov	@r1,ar6
      0012B6 09               [12] 3571 	inc	r1
      0012B7 A7 07            [24] 3572 	mov	@r1,ar7
      0012B9 19               [12] 3573 	dec	r1
      0012BA 19               [12] 3574 	dec	r1
      0012BB 19               [12] 3575 	dec	r1
                                   3576 ;	main.c:714: round_in.Half[1] = final_plain_text.Half[1]; 
      0012BC AC*1A            [24] 3577 	mov	r4,((_final_plain_text + 0x0004) + 0)
      0012BE AD*1B            [24] 3578 	mov	r5,((_final_plain_text + 0x0004) + 1)
      0012C0 AE*1C            [24] 3579 	mov	r6,((_final_plain_text + 0x0004) + 2)
      0012C2 AF*1D            [24] 3580 	mov	r7,((_final_plain_text + 0x0004) + 3)
      0012C4 E5*00            [12] 3581 	mov	a,_bp
      0012C6 24 04            [12] 3582 	add	a,#0x04
      0012C8 F8               [12] 3583 	mov	r0,a
      0012C9 86 00            [24] 3584 	mov	ar0,@r0
      0012CB A6 04            [24] 3585 	mov	@r0,ar4
      0012CD 08               [12] 3586 	inc	r0
      0012CE A6 05            [24] 3587 	mov	@r0,ar5
      0012D0 08               [12] 3588 	inc	r0
      0012D1 A6 06            [24] 3589 	mov	@r0,ar6
      0012D3 08               [12] 3590 	inc	r0
      0012D4 A6 07            [24] 3591 	mov	@r0,ar7
      0012D6 18               [12] 3592 	dec	r0
      0012D7 18               [12] 3593 	dec	r0
      0012D8 18               [12] 3594 	dec	r0
                                   3595 ;	main.c:717: final_plain_text.Half[0] = 0;
      0012D9 E4               [12] 3596 	clr	a
      0012DA F5*16            [12] 3597 	mov	(_final_plain_text + 0),a
      0012DC F5*17            [12] 3598 	mov	(_final_plain_text + 1),a
      0012DE F5*18            [12] 3599 	mov	(_final_plain_text + 2),a
      0012E0 F5*19            [12] 3600 	mov	(_final_plain_text + 3),a
                                   3601 ;	main.c:718: final_plain_text.Half[1] = 0;
      0012E2 F5*1A            [12] 3602 	mov	((_final_plain_text + 0x0004) + 0),a
      0012E4 F5*1B            [12] 3603 	mov	((_final_plain_text + 0x0004) + 1),a
      0012E6 F5*1C            [12] 3604 	mov	((_final_plain_text + 0x0004) + 2),a
      0012E8 F5*1D            [12] 3605 	mov	((_final_plain_text + 0x0004) + 3),a
                                   3606 ;	main.c:693: for (round = 1 ; round < 17 ; round++){
      0012EA E5*00            [12] 3607 	mov	a,_bp
      0012EC 24 08            [12] 3608 	add	a,#0x08
      0012EE F8               [12] 3609 	mov	r0,a
      0012EF 06               [12] 3610 	inc	@r0
      0012F0 E5*00            [12] 3611 	mov	a,_bp
      0012F2 24 08            [12] 3612 	add	a,#0x08
      0012F4 F8               [12] 3613 	mov	r0,a
      0012F5 B6 11 00         [24] 3614 	cjne	@r0,#0x11,00424$
      0012F8                       3615 00424$:
      0012F8 D0 00            [24] 3616 	pop	ar0
      0012FA D0 06            [24] 3617 	pop	ar6
      0012FC 50 03            [24] 3618 	jnc	00425$
      0012FE 02r10rCE         [24] 3619 	ljmp	00170$
      001301                       3620 00425$:
                                   3621 ;	main.c:720: pc2_in.Half[0] = round_in.Half[1];
      001301 E5*00            [12] 3622 	mov	a,_bp
      001303 24 04            [12] 3623 	add	a,#0x04
      001305 F8               [12] 3624 	mov	r0,a
      001306 86 00            [24] 3625 	mov	ar0,@r0
      001308 86 03            [24] 3626 	mov	ar3,@r0
      00130A 08               [12] 3627 	inc	r0
      00130B 86 04            [24] 3628 	mov	ar4,@r0
      00130D 08               [12] 3629 	inc	r0
      00130E 86 05            [24] 3630 	mov	ar5,@r0
      001310 08               [12] 3631 	inc	r0
      001311 86 07            [24] 3632 	mov	ar7,@r0
      001313 18               [12] 3633 	dec	r0
      001314 18               [12] 3634 	dec	r0
      001315 18               [12] 3635 	dec	r0
      001316 A8 02            [24] 3636 	mov	r0,ar2
      001318 A6 03            [24] 3637 	mov	@r0,ar3
      00131A 08               [12] 3638 	inc	r0
      00131B A6 04            [24] 3639 	mov	@r0,ar4
      00131D 08               [12] 3640 	inc	r0
      00131E A6 05            [24] 3641 	mov	@r0,ar5
      001320 08               [12] 3642 	inc	r0
      001321 A6 07            [24] 3643 	mov	@r0,ar7
                                   3644 ;	main.c:721: pc2_in.Half[1] = round_in.Half[0];
      001323 87 03            [24] 3645 	mov	ar3,@r1
      001325 09               [12] 3646 	inc	r1
      001326 87 04            [24] 3647 	mov	ar4,@r1
      001328 09               [12] 3648 	inc	r1
      001329 87 05            [24] 3649 	mov	ar5,@r1
      00132B 09               [12] 3650 	inc	r1
      00132C 87 07            [24] 3651 	mov	ar7,@r1
      00132E 19               [12] 3652 	dec	r1
      00132F 19               [12] 3653 	dec	r1
      001330 19               [12] 3654 	dec	r1
      001331 E5*00            [12] 3655 	mov	a,_bp
      001333 24 07            [12] 3656 	add	a,#0x07
      001335 F8               [12] 3657 	mov	r0,a
      001336 86 00            [24] 3658 	mov	ar0,@r0
      001338 A6 03            [24] 3659 	mov	@r0,ar3
      00133A 08               [12] 3660 	inc	r0
      00133B A6 04            [24] 3661 	mov	@r0,ar4
      00133D 08               [12] 3662 	inc	r0
      00133E A6 05            [24] 3663 	mov	@r0,ar5
      001340 08               [12] 3664 	inc	r0
      001341 A6 07            [24] 3665 	mov	@r0,ar7
      001343 18               [12] 3666 	dec	r0
      001344 18               [12] 3667 	dec	r0
      001345 18               [12] 3668 	dec	r0
                                   3669 ;	main.c:723: Permutation (&pc2_in,&final_plain_text,Basic_Permutation,fp);
      001346 8A 07            [24] 3670 	mov	ar7,r2
      001348 7D 00            [12] 3671 	mov	r5,#0x00
      00134A 7C 40            [12] 3672 	mov	r4,#0x40
      00134C 74rA8            [12] 3673 	mov	a,#_fp
      00134E C0 E0            [24] 3674 	push	acc
      001350 74s00            [12] 3675 	mov	a,#(_fp >> 8)
      001352 C0 E0            [24] 3676 	push	acc
      001354 74 80            [12] 3677 	mov	a,#0x80
      001356 C0 E0            [24] 3678 	push	acc
      001358 03               [12] 3679 	rr	a
      001359 C0 E0            [24] 3680 	push	acc
      00135B 74r16            [12] 3681 	mov	a,#_final_plain_text
      00135D C0 E0            [24] 3682 	push	acc
      00135F 74s00            [12] 3683 	mov	a,#(_final_plain_text >> 8)
      001361 C0 E0            [24] 3684 	push	acc
      001363 EC               [12] 3685 	mov	a,r4
      001364 C0 E0            [24] 3686 	push	acc
      001366 8F 82            [24] 3687 	mov	dpl,r7
      001368 8D 83            [24] 3688 	mov	dph,r5
      00136A 8C F0            [24] 3689 	mov	b,r4
      00136C 12r00r84         [24] 3690 	lcall	_Permutation
      00136F E5 81            [12] 3691 	mov	a,sp
      001371 24 F9            [12] 3692 	add	a,#0xf9
      001373 F5 81            [12] 3693 	mov	sp,a
                                   3694 ;	main.c:728: SBUF = '\n';
      001375 75 99 0A         [24] 3695 	mov	_SBUF,#0x0a
                                   3696 ;	main.c:729: while (0 == TI);
      001378                       3697 00143$:
                                   3698 ;	main.c:730: TI = 0;
                                   3699 ;	assignBit
      001378 10 99 02         [24] 3700 	jbc	_TI,00426$
      00137B 80 FB            [24] 3701 	sjmp	00143$
      00137D                       3702 00426$:
                                   3703 ;	main.c:731: spi_delay();
      00137D 12r00r00         [24] 3704 	lcall	_spi_delay
                                   3705 ;	main.c:732: SBUF = 'P';
      001380 75 99 50         [24] 3706 	mov	_SBUF,#0x50
                                   3707 ;	main.c:733: while (0 == TI);
      001383                       3708 00146$:
                                   3709 ;	main.c:734: TI = 0;
                                   3710 ;	assignBit
      001383 10 99 02         [24] 3711 	jbc	_TI,00427$
      001386 80 FB            [24] 3712 	sjmp	00146$
      001388                       3713 00427$:
                                   3714 ;	main.c:735: SBUF = 'T';
      001388 75 99 54         [24] 3715 	mov	_SBUF,#0x54
                                   3716 ;	main.c:736: while (0 == TI);
      00138B                       3717 00149$:
                                   3718 ;	main.c:737: TI = 0;
                                   3719 ;	assignBit
      00138B 10 99 02         [24] 3720 	jbc	_TI,00428$
      00138E 80 FB            [24] 3721 	sjmp	00149$
      001390                       3722 00428$:
                                   3723 ;	main.c:738: spi_delay();
      001390 12r00r00         [24] 3724 	lcall	_spi_delay
                                   3725 ;	main.c:739: SBUF = ':';
      001393 75 99 3A         [24] 3726 	mov	_SBUF,#0x3a
                                   3727 ;	main.c:740: while (0 == TI);
      001396                       3728 00152$:
                                   3729 ;	main.c:741: TI = 0;
                                   3730 ;	assignBit
      001396 10 99 02         [24] 3731 	jbc	_TI,00429$
      001399 80 FB            [24] 3732 	sjmp	00152$
      00139B                       3733 00429$:
                                   3734 ;	main.c:742: spi_delay();
      00139B 12r00r00         [24] 3735 	lcall	_spi_delay
                                   3736 ;	main.c:743: spi_delay();
      00139E 12r00r00         [24] 3737 	lcall	_spi_delay
                                   3738 ;	main.c:744: for (i=0 ; i<8;i++){
      0013A1 75*10 00         [24] 3739 	mov	_i,#0x00
      0013A4                       3740 00172$:
                                   3741 ;	main.c:746: temp2 = final_plain_text.Array[i] ;
      0013A4 E5*10            [12] 3742 	mov	a,_i
      0013A6 24r16            [12] 3743 	add	a,#_final_plain_text
      0013A8 F9               [12] 3744 	mov	r1,a
      0013A9 87 99            [24] 3745 	mov	_SBUF,@r1
                                   3746 ;	main.c:748: while(0==TI);
      0013AB                       3747 00155$:
                                   3748 ;	main.c:749: TI=0;
                                   3749 ;	assignBit
      0013AB 10 99 02         [24] 3750 	jbc	_TI,00430$
      0013AE 80 FB            [24] 3751 	sjmp	00155$
      0013B0                       3752 00430$:
                                   3753 ;	main.c:744: for (i=0 ; i<8;i++){
      0013B0 05*10            [12] 3754 	inc	_i
      0013B2 74 F8            [12] 3755 	mov	a,#0x100 - 0x08
      0013B4 25*10            [12] 3756 	add	a,_i
      0013B6 50 EC            [24] 3757 	jnc	00172$
                                   3758 ;	main.c:751: spi_delay();
      0013B8 12r00r00         [24] 3759 	lcall	_spi_delay
      0013BB 02r0ErFF         [24] 3760 	ljmp	00160$
                                   3761 ;	main.c:754: return 0;
                                   3762 ;	main.c:755: }
      0013BE 85*00 81         [24] 3763 	mov	sp,_bp
      0013C1 D0*00            [24] 3764 	pop	_bp
      0013C3 22               [24] 3765 	ret
                                   3766 	.area CSEG    (CODE)
                                   3767 	.area CONST   (CODE)
      000000                       3768 _pc1:
      000000 39                    3769 	.db #0x39	; 57	'9'
      000001 31                    3770 	.db #0x31	; 49	'1'
      000002 29                    3771 	.db #0x29	; 41
      000003 21                    3772 	.db #0x21	; 33
      000004 19                    3773 	.db #0x19	; 25
      000005 11                    3774 	.db #0x11	; 17
      000006 09                    3775 	.db #0x09	; 9
      000007 01                    3776 	.db #0x01	; 1
      000008 3A                    3777 	.db #0x3a	; 58
      000009 32                    3778 	.db #0x32	; 50	'2'
      00000A 2A                    3779 	.db #0x2a	; 42
      00000B 22                    3780 	.db #0x22	; 34
      00000C 1A                    3781 	.db #0x1a	; 26
      00000D 12                    3782 	.db #0x12	; 18
      00000E 0A                    3783 	.db #0x0a	; 10
      00000F 02                    3784 	.db #0x02	; 2
      000010 3B                    3785 	.db #0x3b	; 59
      000011 33                    3786 	.db #0x33	; 51	'3'
      000012 2B                    3787 	.db #0x2b	; 43
      000013 23                    3788 	.db #0x23	; 35
      000014 1B                    3789 	.db #0x1b	; 27
      000015 13                    3790 	.db #0x13	; 19
      000016 0B                    3791 	.db #0x0b	; 11
      000017 03                    3792 	.db #0x03	; 3
      000018 3C                    3793 	.db #0x3c	; 60
      000019 34                    3794 	.db #0x34	; 52	'4'
      00001A 2C                    3795 	.db #0x2c	; 44
      00001B 24                    3796 	.db #0x24	; 36
      00001C 3F                    3797 	.db #0x3f	; 63
      00001D 37                    3798 	.db #0x37	; 55	'7'
      00001E 2F                    3799 	.db #0x2f	; 47
      00001F 27                    3800 	.db #0x27	; 39
      000020 1F                    3801 	.db #0x1f	; 31
      000021 17                    3802 	.db #0x17	; 23
      000022 0F                    3803 	.db #0x0f	; 15
      000023 07                    3804 	.db #0x07	; 7
      000024 3E                    3805 	.db #0x3e	; 62
      000025 36                    3806 	.db #0x36	; 54	'6'
      000026 2E                    3807 	.db #0x2e	; 46
      000027 26                    3808 	.db #0x26	; 38
      000028 1E                    3809 	.db #0x1e	; 30
      000029 16                    3810 	.db #0x16	; 22
      00002A 0E                    3811 	.db #0x0e	; 14
      00002B 06                    3812 	.db #0x06	; 6
      00002C 3D                    3813 	.db #0x3d	; 61
      00002D 35                    3814 	.db #0x35	; 53	'5'
      00002E 2D                    3815 	.db #0x2d	; 45
      00002F 25                    3816 	.db #0x25	; 37
      000030 1D                    3817 	.db #0x1d	; 29
      000031 15                    3818 	.db #0x15	; 21
      000032 0D                    3819 	.db #0x0d	; 13
      000033 05                    3820 	.db #0x05	; 5
      000034 1C                    3821 	.db #0x1c	; 28
      000035 14                    3822 	.db #0x14	; 20
      000036 0C                    3823 	.db #0x0c	; 12
      000037 04                    3824 	.db #0x04	; 4
      000038                       3825 _pc2:
      000038 0E                    3826 	.db #0x0e	; 14
      000039 11                    3827 	.db #0x11	; 17
      00003A 0B                    3828 	.db #0x0b	; 11
      00003B 18                    3829 	.db #0x18	; 24
      00003C 01                    3830 	.db #0x01	; 1
      00003D 05                    3831 	.db #0x05	; 5
      00003E 03                    3832 	.db #0x03	; 3
      00003F 1C                    3833 	.db #0x1c	; 28
      000040 0F                    3834 	.db #0x0f	; 15
      000041 06                    3835 	.db #0x06	; 6
      000042 15                    3836 	.db #0x15	; 21
      000043 0A                    3837 	.db #0x0a	; 10
      000044 17                    3838 	.db #0x17	; 23
      000045 13                    3839 	.db #0x13	; 19
      000046 0C                    3840 	.db #0x0c	; 12
      000047 04                    3841 	.db #0x04	; 4
      000048 1A                    3842 	.db #0x1a	; 26
      000049 08                    3843 	.db #0x08	; 8
      00004A 10                    3844 	.db #0x10	; 16
      00004B 07                    3845 	.db #0x07	; 7
      00004C 1B                    3846 	.db #0x1b	; 27
      00004D 14                    3847 	.db #0x14	; 20
      00004E 0D                    3848 	.db #0x0d	; 13
      00004F 02                    3849 	.db #0x02	; 2
      000050 29                    3850 	.db #0x29	; 41
      000051 34                    3851 	.db #0x34	; 52	'4'
      000052 1F                    3852 	.db #0x1f	; 31
      000053 25                    3853 	.db #0x25	; 37
      000054 2F                    3854 	.db #0x2f	; 47
      000055 37                    3855 	.db #0x37	; 55	'7'
      000056 1E                    3856 	.db #0x1e	; 30
      000057 28                    3857 	.db #0x28	; 40
      000058 33                    3858 	.db #0x33	; 51	'3'
      000059 2D                    3859 	.db #0x2d	; 45
      00005A 21                    3860 	.db #0x21	; 33
      00005B 30                    3861 	.db #0x30	; 48	'0'
      00005C 2C                    3862 	.db #0x2c	; 44
      00005D 31                    3863 	.db #0x31	; 49	'1'
      00005E 27                    3864 	.db #0x27	; 39
      00005F 38                    3865 	.db #0x38	; 56	'8'
      000060 22                    3866 	.db #0x22	; 34
      000061 35                    3867 	.db #0x35	; 53	'5'
      000062 2E                    3868 	.db #0x2e	; 46
      000063 2A                    3869 	.db #0x2a	; 42
      000064 32                    3870 	.db #0x32	; 50	'2'
      000065 24                    3871 	.db #0x24	; 36
      000066 1D                    3872 	.db #0x1d	; 29
      000067 20                    3873 	.db #0x20	; 32
      000068                       3874 _ip:
      000068 3A                    3875 	.db #0x3a	; 58
      000069 32                    3876 	.db #0x32	; 50	'2'
      00006A 2A                    3877 	.db #0x2a	; 42
      00006B 22                    3878 	.db #0x22	; 34
      00006C 1A                    3879 	.db #0x1a	; 26
      00006D 12                    3880 	.db #0x12	; 18
      00006E 0A                    3881 	.db #0x0a	; 10
      00006F 02                    3882 	.db #0x02	; 2
      000070 3C                    3883 	.db #0x3c	; 60
      000071 34                    3884 	.db #0x34	; 52	'4'
      000072 2C                    3885 	.db #0x2c	; 44
      000073 24                    3886 	.db #0x24	; 36
      000074 1C                    3887 	.db #0x1c	; 28
      000075 14                    3888 	.db #0x14	; 20
      000076 0C                    3889 	.db #0x0c	; 12
      000077 04                    3890 	.db #0x04	; 4
      000078 3E                    3891 	.db #0x3e	; 62
      000079 36                    3892 	.db #0x36	; 54	'6'
      00007A 2E                    3893 	.db #0x2e	; 46
      00007B 26                    3894 	.db #0x26	; 38
      00007C 1E                    3895 	.db #0x1e	; 30
      00007D 16                    3896 	.db #0x16	; 22
      00007E 0E                    3897 	.db #0x0e	; 14
      00007F 06                    3898 	.db #0x06	; 6
      000080 40                    3899 	.db #0x40	; 64
      000081 38                    3900 	.db #0x38	; 56	'8'
      000082 30                    3901 	.db #0x30	; 48	'0'
      000083 28                    3902 	.db #0x28	; 40
      000084 20                    3903 	.db #0x20	; 32
      000085 18                    3904 	.db #0x18	; 24
      000086 10                    3905 	.db #0x10	; 16
      000087 08                    3906 	.db #0x08	; 8
      000088 39                    3907 	.db #0x39	; 57	'9'
      000089 31                    3908 	.db #0x31	; 49	'1'
      00008A 29                    3909 	.db #0x29	; 41
      00008B 21                    3910 	.db #0x21	; 33
      00008C 19                    3911 	.db #0x19	; 25
      00008D 11                    3912 	.db #0x11	; 17
      00008E 09                    3913 	.db #0x09	; 9
      00008F 01                    3914 	.db #0x01	; 1
      000090 3B                    3915 	.db #0x3b	; 59
      000091 33                    3916 	.db #0x33	; 51	'3'
      000092 2B                    3917 	.db #0x2b	; 43
      000093 23                    3918 	.db #0x23	; 35
      000094 1B                    3919 	.db #0x1b	; 27
      000095 13                    3920 	.db #0x13	; 19
      000096 0B                    3921 	.db #0x0b	; 11
      000097 03                    3922 	.db #0x03	; 3
      000098 3D                    3923 	.db #0x3d	; 61
      000099 35                    3924 	.db #0x35	; 53	'5'
      00009A 2D                    3925 	.db #0x2d	; 45
      00009B 25                    3926 	.db #0x25	; 37
      00009C 1D                    3927 	.db #0x1d	; 29
      00009D 15                    3928 	.db #0x15	; 21
      00009E 0D                    3929 	.db #0x0d	; 13
      00009F 05                    3930 	.db #0x05	; 5
      0000A0 3F                    3931 	.db #0x3f	; 63
      0000A1 37                    3932 	.db #0x37	; 55	'7'
      0000A2 2F                    3933 	.db #0x2f	; 47
      0000A3 27                    3934 	.db #0x27	; 39
      0000A4 1F                    3935 	.db #0x1f	; 31
      0000A5 17                    3936 	.db #0x17	; 23
      0000A6 0F                    3937 	.db #0x0f	; 15
      0000A7 07                    3938 	.db #0x07	; 7
      0000A8                       3939 _fp:
      0000A8 28                    3940 	.db #0x28	; 40
      0000A9 08                    3941 	.db #0x08	; 8
      0000AA 30                    3942 	.db #0x30	; 48	'0'
      0000AB 10                    3943 	.db #0x10	; 16
      0000AC 38                    3944 	.db #0x38	; 56	'8'
      0000AD 18                    3945 	.db #0x18	; 24
      0000AE 40                    3946 	.db #0x40	; 64
      0000AF 20                    3947 	.db #0x20	; 32
      0000B0 27                    3948 	.db #0x27	; 39
      0000B1 07                    3949 	.db #0x07	; 7
      0000B2 2F                    3950 	.db #0x2f	; 47
      0000B3 0F                    3951 	.db #0x0f	; 15
      0000B4 37                    3952 	.db #0x37	; 55	'7'
      0000B5 17                    3953 	.db #0x17	; 23
      0000B6 3F                    3954 	.db #0x3f	; 63
      0000B7 1F                    3955 	.db #0x1f	; 31
      0000B8 26                    3956 	.db #0x26	; 38
      0000B9 06                    3957 	.db #0x06	; 6
      0000BA 2E                    3958 	.db #0x2e	; 46
      0000BB 0E                    3959 	.db #0x0e	; 14
      0000BC 36                    3960 	.db #0x36	; 54	'6'
      0000BD 16                    3961 	.db #0x16	; 22
      0000BE 3E                    3962 	.db #0x3e	; 62
      0000BF 1E                    3963 	.db #0x1e	; 30
      0000C0 25                    3964 	.db #0x25	; 37
      0000C1 05                    3965 	.db #0x05	; 5
      0000C2 2D                    3966 	.db #0x2d	; 45
      0000C3 0D                    3967 	.db #0x0d	; 13
      0000C4 35                    3968 	.db #0x35	; 53	'5'
      0000C5 15                    3969 	.db #0x15	; 21
      0000C6 3D                    3970 	.db #0x3d	; 61
      0000C7 1D                    3971 	.db #0x1d	; 29
      0000C8 24                    3972 	.db #0x24	; 36
      0000C9 04                    3973 	.db #0x04	; 4
      0000CA 2C                    3974 	.db #0x2c	; 44
      0000CB 0C                    3975 	.db #0x0c	; 12
      0000CC 34                    3976 	.db #0x34	; 52	'4'
      0000CD 14                    3977 	.db #0x14	; 20
      0000CE 3C                    3978 	.db #0x3c	; 60
      0000CF 1C                    3979 	.db #0x1c	; 28
      0000D0 23                    3980 	.db #0x23	; 35
      0000D1 03                    3981 	.db #0x03	; 3
      0000D2 2B                    3982 	.db #0x2b	; 43
      0000D3 0B                    3983 	.db #0x0b	; 11
      0000D4 33                    3984 	.db #0x33	; 51	'3'
      0000D5 13                    3985 	.db #0x13	; 19
      0000D6 3B                    3986 	.db #0x3b	; 59
      0000D7 1B                    3987 	.db #0x1b	; 27
      0000D8 22                    3988 	.db #0x22	; 34
      0000D9 02                    3989 	.db #0x02	; 2
      0000DA 2A                    3990 	.db #0x2a	; 42
      0000DB 0A                    3991 	.db #0x0a	; 10
      0000DC 32                    3992 	.db #0x32	; 50	'2'
      0000DD 12                    3993 	.db #0x12	; 18
      0000DE 3A                    3994 	.db #0x3a	; 58
      0000DF 1A                    3995 	.db #0x1a	; 26
      0000E0 21                    3996 	.db #0x21	; 33
      0000E1 01                    3997 	.db #0x01	; 1
      0000E2 29                    3998 	.db #0x29	; 41
      0000E3 09                    3999 	.db #0x09	; 9
      0000E4 31                    4000 	.db #0x31	; 49	'1'
      0000E5 11                    4001 	.db #0x11	; 17
      0000E6 39                    4002 	.db #0x39	; 57	'9'
      0000E7 19                    4003 	.db #0x19	; 25
      0000E8                       4004 _s1:
      0000E8 0E                    4005 	.db #0x0e	; 14
      0000E9 04                    4006 	.db #0x04	; 4
      0000EA 0D                    4007 	.db #0x0d	; 13
      0000EB 01                    4008 	.db #0x01	; 1
      0000EC 02                    4009 	.db #0x02	; 2
      0000ED 0F                    4010 	.db #0x0f	; 15
      0000EE 0B                    4011 	.db #0x0b	; 11
      0000EF 08                    4012 	.db #0x08	; 8
      0000F0 03                    4013 	.db #0x03	; 3
      0000F1 0A                    4014 	.db #0x0a	; 10
      0000F2 06                    4015 	.db #0x06	; 6
      0000F3 0C                    4016 	.db #0x0c	; 12
      0000F4 05                    4017 	.db #0x05	; 5
      0000F5 09                    4018 	.db #0x09	; 9
      0000F6 00                    4019 	.db #0x00	; 0
      0000F7 07                    4020 	.db #0x07	; 7
      0000F8 00                    4021 	.db #0x00	; 0
      0000F9 0F                    4022 	.db #0x0f	; 15
      0000FA 07                    4023 	.db #0x07	; 7
      0000FB 04                    4024 	.db #0x04	; 4
      0000FC 0E                    4025 	.db #0x0e	; 14
      0000FD 02                    4026 	.db #0x02	; 2
      0000FE 0D                    4027 	.db #0x0d	; 13
      0000FF 01                    4028 	.db #0x01	; 1
      000100 0A                    4029 	.db #0x0a	; 10
      000101 06                    4030 	.db #0x06	; 6
      000102 0C                    4031 	.db #0x0c	; 12
      000103 0B                    4032 	.db #0x0b	; 11
      000104 09                    4033 	.db #0x09	; 9
      000105 05                    4034 	.db #0x05	; 5
      000106 03                    4035 	.db #0x03	; 3
      000107 08                    4036 	.db #0x08	; 8
      000108 04                    4037 	.db #0x04	; 4
      000109 01                    4038 	.db #0x01	; 1
      00010A 0E                    4039 	.db #0x0e	; 14
      00010B 08                    4040 	.db #0x08	; 8
      00010C 0D                    4041 	.db #0x0d	; 13
      00010D 06                    4042 	.db #0x06	; 6
      00010E 02                    4043 	.db #0x02	; 2
      00010F 0B                    4044 	.db #0x0b	; 11
      000110 0F                    4045 	.db #0x0f	; 15
      000111 0C                    4046 	.db #0x0c	; 12
      000112 09                    4047 	.db #0x09	; 9
      000113 07                    4048 	.db #0x07	; 7
      000114 03                    4049 	.db #0x03	; 3
      000115 0A                    4050 	.db #0x0a	; 10
      000116 05                    4051 	.db #0x05	; 5
      000117 00                    4052 	.db #0x00	; 0
      000118 0F                    4053 	.db #0x0f	; 15
      000119 0C                    4054 	.db #0x0c	; 12
      00011A 08                    4055 	.db #0x08	; 8
      00011B 02                    4056 	.db #0x02	; 2
      00011C 04                    4057 	.db #0x04	; 4
      00011D 09                    4058 	.db #0x09	; 9
      00011E 01                    4059 	.db #0x01	; 1
      00011F 07                    4060 	.db #0x07	; 7
      000120 05                    4061 	.db #0x05	; 5
      000121 0B                    4062 	.db #0x0b	; 11
      000122 03                    4063 	.db #0x03	; 3
      000123 0E                    4064 	.db #0x0e	; 14
      000124 0A                    4065 	.db #0x0a	; 10
      000125 00                    4066 	.db #0x00	; 0
      000126 06                    4067 	.db #0x06	; 6
      000127 0D                    4068 	.db #0x0d	; 13
      000128                       4069 _s2:
      000128 0F                    4070 	.db #0x0f	; 15
      000129 01                    4071 	.db #0x01	; 1
      00012A 08                    4072 	.db #0x08	; 8
      00012B 0E                    4073 	.db #0x0e	; 14
      00012C 06                    4074 	.db #0x06	; 6
      00012D 0B                    4075 	.db #0x0b	; 11
      00012E 03                    4076 	.db #0x03	; 3
      00012F 04                    4077 	.db #0x04	; 4
      000130 09                    4078 	.db #0x09	; 9
      000131 07                    4079 	.db #0x07	; 7
      000132 02                    4080 	.db #0x02	; 2
      000133 0D                    4081 	.db #0x0d	; 13
      000134 0C                    4082 	.db #0x0c	; 12
      000135 00                    4083 	.db #0x00	; 0
      000136 05                    4084 	.db #0x05	; 5
      000137 0A                    4085 	.db #0x0a	; 10
      000138 03                    4086 	.db #0x03	; 3
      000139 0D                    4087 	.db #0x0d	; 13
      00013A 04                    4088 	.db #0x04	; 4
      00013B 07                    4089 	.db #0x07	; 7
      00013C 0F                    4090 	.db #0x0f	; 15
      00013D 02                    4091 	.db #0x02	; 2
      00013E 08                    4092 	.db #0x08	; 8
      00013F 0E                    4093 	.db #0x0e	; 14
      000140 0C                    4094 	.db #0x0c	; 12
      000141 00                    4095 	.db #0x00	; 0
      000142 01                    4096 	.db #0x01	; 1
      000143 0A                    4097 	.db #0x0a	; 10
      000144 06                    4098 	.db #0x06	; 6
      000145 09                    4099 	.db #0x09	; 9
      000146 0B                    4100 	.db #0x0b	; 11
      000147 05                    4101 	.db #0x05	; 5
      000148 00                    4102 	.db #0x00	; 0
      000149 0E                    4103 	.db #0x0e	; 14
      00014A 07                    4104 	.db #0x07	; 7
      00014B 0B                    4105 	.db #0x0b	; 11
      00014C 0A                    4106 	.db #0x0a	; 10
      00014D 04                    4107 	.db #0x04	; 4
      00014E 0D                    4108 	.db #0x0d	; 13
      00014F 01                    4109 	.db #0x01	; 1
      000150 05                    4110 	.db #0x05	; 5
      000151 08                    4111 	.db #0x08	; 8
      000152 0C                    4112 	.db #0x0c	; 12
      000153 06                    4113 	.db #0x06	; 6
      000154 09                    4114 	.db #0x09	; 9
      000155 03                    4115 	.db #0x03	; 3
      000156 02                    4116 	.db #0x02	; 2
      000157 0F                    4117 	.db #0x0f	; 15
      000158 0D                    4118 	.db #0x0d	; 13
      000159 08                    4119 	.db #0x08	; 8
      00015A 0A                    4120 	.db #0x0a	; 10
      00015B 01                    4121 	.db #0x01	; 1
      00015C 03                    4122 	.db #0x03	; 3
      00015D 0F                    4123 	.db #0x0f	; 15
      00015E 04                    4124 	.db #0x04	; 4
      00015F 02                    4125 	.db #0x02	; 2
      000160 0B                    4126 	.db #0x0b	; 11
      000161 06                    4127 	.db #0x06	; 6
      000162 07                    4128 	.db #0x07	; 7
      000163 0C                    4129 	.db #0x0c	; 12
      000164 00                    4130 	.db #0x00	; 0
      000165 05                    4131 	.db #0x05	; 5
      000166 0E                    4132 	.db #0x0e	; 14
      000167 09                    4133 	.db #0x09	; 9
      000168                       4134 _s3:
      000168 0A                    4135 	.db #0x0a	; 10
      000169 00                    4136 	.db #0x00	; 0
      00016A 09                    4137 	.db #0x09	; 9
      00016B 0E                    4138 	.db #0x0e	; 14
      00016C 06                    4139 	.db #0x06	; 6
      00016D 03                    4140 	.db #0x03	; 3
      00016E 0F                    4141 	.db #0x0f	; 15
      00016F 05                    4142 	.db #0x05	; 5
      000170 01                    4143 	.db #0x01	; 1
      000171 0D                    4144 	.db #0x0d	; 13
      000172 0C                    4145 	.db #0x0c	; 12
      000173 07                    4146 	.db #0x07	; 7
      000174 0B                    4147 	.db #0x0b	; 11
      000175 04                    4148 	.db #0x04	; 4
      000176 02                    4149 	.db #0x02	; 2
      000177 08                    4150 	.db #0x08	; 8
      000178 0D                    4151 	.db #0x0d	; 13
      000179 07                    4152 	.db #0x07	; 7
      00017A 00                    4153 	.db #0x00	; 0
      00017B 09                    4154 	.db #0x09	; 9
      00017C 03                    4155 	.db #0x03	; 3
      00017D 04                    4156 	.db #0x04	; 4
      00017E 06                    4157 	.db #0x06	; 6
      00017F 0A                    4158 	.db #0x0a	; 10
      000180 02                    4159 	.db #0x02	; 2
      000181 08                    4160 	.db #0x08	; 8
      000182 05                    4161 	.db #0x05	; 5
      000183 0E                    4162 	.db #0x0e	; 14
      000184 0C                    4163 	.db #0x0c	; 12
      000185 0B                    4164 	.db #0x0b	; 11
      000186 0F                    4165 	.db #0x0f	; 15
      000187 01                    4166 	.db #0x01	; 1
      000188 0D                    4167 	.db #0x0d	; 13
      000189 06                    4168 	.db #0x06	; 6
      00018A 04                    4169 	.db #0x04	; 4
      00018B 09                    4170 	.db #0x09	; 9
      00018C 08                    4171 	.db #0x08	; 8
      00018D 0F                    4172 	.db #0x0f	; 15
      00018E 03                    4173 	.db #0x03	; 3
      00018F 00                    4174 	.db #0x00	; 0
      000190 0B                    4175 	.db #0x0b	; 11
      000191 01                    4176 	.db #0x01	; 1
      000192 02                    4177 	.db #0x02	; 2
      000193 0C                    4178 	.db #0x0c	; 12
      000194 05                    4179 	.db #0x05	; 5
      000195 0A                    4180 	.db #0x0a	; 10
      000196 0E                    4181 	.db #0x0e	; 14
      000197 07                    4182 	.db #0x07	; 7
      000198 01                    4183 	.db #0x01	; 1
      000199 0A                    4184 	.db #0x0a	; 10
      00019A 0D                    4185 	.db #0x0d	; 13
      00019B 00                    4186 	.db #0x00	; 0
      00019C 06                    4187 	.db #0x06	; 6
      00019D 09                    4188 	.db #0x09	; 9
      00019E 08                    4189 	.db #0x08	; 8
      00019F 07                    4190 	.db #0x07	; 7
      0001A0 04                    4191 	.db #0x04	; 4
      0001A1 0F                    4192 	.db #0x0f	; 15
      0001A2 0E                    4193 	.db #0x0e	; 14
      0001A3 03                    4194 	.db #0x03	; 3
      0001A4 0B                    4195 	.db #0x0b	; 11
      0001A5 05                    4196 	.db #0x05	; 5
      0001A6 02                    4197 	.db #0x02	; 2
      0001A7 0C                    4198 	.db #0x0c	; 12
      0001A8                       4199 _s4:
      0001A8 07                    4200 	.db #0x07	; 7
      0001A9 0D                    4201 	.db #0x0d	; 13
      0001AA 0E                    4202 	.db #0x0e	; 14
      0001AB 03                    4203 	.db #0x03	; 3
      0001AC 00                    4204 	.db #0x00	; 0
      0001AD 06                    4205 	.db #0x06	; 6
      0001AE 09                    4206 	.db #0x09	; 9
      0001AF 0A                    4207 	.db #0x0a	; 10
      0001B0 01                    4208 	.db #0x01	; 1
      0001B1 02                    4209 	.db #0x02	; 2
      0001B2 08                    4210 	.db #0x08	; 8
      0001B3 05                    4211 	.db #0x05	; 5
      0001B4 0B                    4212 	.db #0x0b	; 11
      0001B5 0C                    4213 	.db #0x0c	; 12
      0001B6 04                    4214 	.db #0x04	; 4
      0001B7 0F                    4215 	.db #0x0f	; 15
      0001B8 0D                    4216 	.db #0x0d	; 13
      0001B9 08                    4217 	.db #0x08	; 8
      0001BA 0B                    4218 	.db #0x0b	; 11
      0001BB 05                    4219 	.db #0x05	; 5
      0001BC 06                    4220 	.db #0x06	; 6
      0001BD 0F                    4221 	.db #0x0f	; 15
      0001BE 00                    4222 	.db #0x00	; 0
      0001BF 03                    4223 	.db #0x03	; 3
      0001C0 04                    4224 	.db #0x04	; 4
      0001C1 07                    4225 	.db #0x07	; 7
      0001C2 02                    4226 	.db #0x02	; 2
      0001C3 0C                    4227 	.db #0x0c	; 12
      0001C4 01                    4228 	.db #0x01	; 1
      0001C5 0A                    4229 	.db #0x0a	; 10
      0001C6 0E                    4230 	.db #0x0e	; 14
      0001C7 09                    4231 	.db #0x09	; 9
      0001C8 0A                    4232 	.db #0x0a	; 10
      0001C9 06                    4233 	.db #0x06	; 6
      0001CA 09                    4234 	.db #0x09	; 9
      0001CB 00                    4235 	.db #0x00	; 0
      0001CC 0C                    4236 	.db #0x0c	; 12
      0001CD 0B                    4237 	.db #0x0b	; 11
      0001CE 07                    4238 	.db #0x07	; 7
      0001CF 0D                    4239 	.db #0x0d	; 13
      0001D0 0F                    4240 	.db #0x0f	; 15
      0001D1 01                    4241 	.db #0x01	; 1
      0001D2 03                    4242 	.db #0x03	; 3
      0001D3 0E                    4243 	.db #0x0e	; 14
      0001D4 05                    4244 	.db #0x05	; 5
      0001D5 02                    4245 	.db #0x02	; 2
      0001D6 08                    4246 	.db #0x08	; 8
      0001D7 04                    4247 	.db #0x04	; 4
      0001D8 03                    4248 	.db #0x03	; 3
      0001D9 0F                    4249 	.db #0x0f	; 15
      0001DA 00                    4250 	.db #0x00	; 0
      0001DB 06                    4251 	.db #0x06	; 6
      0001DC 0A                    4252 	.db #0x0a	; 10
      0001DD 01                    4253 	.db #0x01	; 1
      0001DE 0D                    4254 	.db #0x0d	; 13
      0001DF 08                    4255 	.db #0x08	; 8
      0001E0 09                    4256 	.db #0x09	; 9
      0001E1 04                    4257 	.db #0x04	; 4
      0001E2 05                    4258 	.db #0x05	; 5
      0001E3 0B                    4259 	.db #0x0b	; 11
      0001E4 0C                    4260 	.db #0x0c	; 12
      0001E5 07                    4261 	.db #0x07	; 7
      0001E6 02                    4262 	.db #0x02	; 2
      0001E7 0E                    4263 	.db #0x0e	; 14
      0001E8                       4264 _s5:
      0001E8 02                    4265 	.db #0x02	; 2
      0001E9 0C                    4266 	.db #0x0c	; 12
      0001EA 04                    4267 	.db #0x04	; 4
      0001EB 01                    4268 	.db #0x01	; 1
      0001EC 07                    4269 	.db #0x07	; 7
      0001ED 0A                    4270 	.db #0x0a	; 10
      0001EE 0B                    4271 	.db #0x0b	; 11
      0001EF 06                    4272 	.db #0x06	; 6
      0001F0 08                    4273 	.db #0x08	; 8
      0001F1 05                    4274 	.db #0x05	; 5
      0001F2 03                    4275 	.db #0x03	; 3
      0001F3 0F                    4276 	.db #0x0f	; 15
      0001F4 0D                    4277 	.db #0x0d	; 13
      0001F5 00                    4278 	.db #0x00	; 0
      0001F6 0E                    4279 	.db #0x0e	; 14
      0001F7 09                    4280 	.db #0x09	; 9
      0001F8 0E                    4281 	.db #0x0e	; 14
      0001F9 0B                    4282 	.db #0x0b	; 11
      0001FA 02                    4283 	.db #0x02	; 2
      0001FB 0C                    4284 	.db #0x0c	; 12
      0001FC 04                    4285 	.db #0x04	; 4
      0001FD 07                    4286 	.db #0x07	; 7
      0001FE 0D                    4287 	.db #0x0d	; 13
      0001FF 01                    4288 	.db #0x01	; 1
      000200 05                    4289 	.db #0x05	; 5
      000201 00                    4290 	.db #0x00	; 0
      000202 0F                    4291 	.db #0x0f	; 15
      000203 0A                    4292 	.db #0x0a	; 10
      000204 03                    4293 	.db #0x03	; 3
      000205 09                    4294 	.db #0x09	; 9
      000206 08                    4295 	.db #0x08	; 8
      000207 06                    4296 	.db #0x06	; 6
      000208 04                    4297 	.db #0x04	; 4
      000209 02                    4298 	.db #0x02	; 2
      00020A 01                    4299 	.db #0x01	; 1
      00020B 0B                    4300 	.db #0x0b	; 11
      00020C 0A                    4301 	.db #0x0a	; 10
      00020D 0D                    4302 	.db #0x0d	; 13
      00020E 07                    4303 	.db #0x07	; 7
      00020F 08                    4304 	.db #0x08	; 8
      000210 0F                    4305 	.db #0x0f	; 15
      000211 09                    4306 	.db #0x09	; 9
      000212 0C                    4307 	.db #0x0c	; 12
      000213 05                    4308 	.db #0x05	; 5
      000214 06                    4309 	.db #0x06	; 6
      000215 03                    4310 	.db #0x03	; 3
      000216 00                    4311 	.db #0x00	; 0
      000217 0E                    4312 	.db #0x0e	; 14
      000218 0B                    4313 	.db #0x0b	; 11
      000219 08                    4314 	.db #0x08	; 8
      00021A 0C                    4315 	.db #0x0c	; 12
      00021B 07                    4316 	.db #0x07	; 7
      00021C 01                    4317 	.db #0x01	; 1
      00021D 0E                    4318 	.db #0x0e	; 14
      00021E 02                    4319 	.db #0x02	; 2
      00021F 0D                    4320 	.db #0x0d	; 13
      000220 06                    4321 	.db #0x06	; 6
      000221 0F                    4322 	.db #0x0f	; 15
      000222 00                    4323 	.db #0x00	; 0
      000223 09                    4324 	.db #0x09	; 9
      000224 0A                    4325 	.db #0x0a	; 10
      000225 04                    4326 	.db #0x04	; 4
      000226 05                    4327 	.db #0x05	; 5
      000227 03                    4328 	.db #0x03	; 3
      000228                       4329 _s6:
      000228 0C                    4330 	.db #0x0c	; 12
      000229 01                    4331 	.db #0x01	; 1
      00022A 0A                    4332 	.db #0x0a	; 10
      00022B 0F                    4333 	.db #0x0f	; 15
      00022C 09                    4334 	.db #0x09	; 9
      00022D 02                    4335 	.db #0x02	; 2
      00022E 06                    4336 	.db #0x06	; 6
      00022F 08                    4337 	.db #0x08	; 8
      000230 00                    4338 	.db #0x00	; 0
      000231 0D                    4339 	.db #0x0d	; 13
      000232 03                    4340 	.db #0x03	; 3
      000233 04                    4341 	.db #0x04	; 4
      000234 0E                    4342 	.db #0x0e	; 14
      000235 07                    4343 	.db #0x07	; 7
      000236 05                    4344 	.db #0x05	; 5
      000237 0B                    4345 	.db #0x0b	; 11
      000238 0A                    4346 	.db #0x0a	; 10
      000239 0F                    4347 	.db #0x0f	; 15
      00023A 04                    4348 	.db #0x04	; 4
      00023B 02                    4349 	.db #0x02	; 2
      00023C 07                    4350 	.db #0x07	; 7
      00023D 0C                    4351 	.db #0x0c	; 12
      00023E 09                    4352 	.db #0x09	; 9
      00023F 05                    4353 	.db #0x05	; 5
      000240 06                    4354 	.db #0x06	; 6
      000241 01                    4355 	.db #0x01	; 1
      000242 0D                    4356 	.db #0x0d	; 13
      000243 0E                    4357 	.db #0x0e	; 14
      000244 00                    4358 	.db #0x00	; 0
      000245 0B                    4359 	.db #0x0b	; 11
      000246 03                    4360 	.db #0x03	; 3
      000247 08                    4361 	.db #0x08	; 8
      000248 09                    4362 	.db #0x09	; 9
      000249 0E                    4363 	.db #0x0e	; 14
      00024A 0F                    4364 	.db #0x0f	; 15
      00024B 05                    4365 	.db #0x05	; 5
      00024C 02                    4366 	.db #0x02	; 2
      00024D 08                    4367 	.db #0x08	; 8
      00024E 0C                    4368 	.db #0x0c	; 12
      00024F 03                    4369 	.db #0x03	; 3
      000250 07                    4370 	.db #0x07	; 7
      000251 00                    4371 	.db #0x00	; 0
      000252 04                    4372 	.db #0x04	; 4
      000253 0A                    4373 	.db #0x0a	; 10
      000254 01                    4374 	.db #0x01	; 1
      000255 0D                    4375 	.db #0x0d	; 13
      000256 0B                    4376 	.db #0x0b	; 11
      000257 06                    4377 	.db #0x06	; 6
      000258 04                    4378 	.db #0x04	; 4
      000259 03                    4379 	.db #0x03	; 3
      00025A 02                    4380 	.db #0x02	; 2
      00025B 0C                    4381 	.db #0x0c	; 12
      00025C 09                    4382 	.db #0x09	; 9
      00025D 05                    4383 	.db #0x05	; 5
      00025E 0F                    4384 	.db #0x0f	; 15
      00025F 0A                    4385 	.db #0x0a	; 10
      000260 0B                    4386 	.db #0x0b	; 11
      000261 0E                    4387 	.db #0x0e	; 14
      000262 01                    4388 	.db #0x01	; 1
      000263 07                    4389 	.db #0x07	; 7
      000264 06                    4390 	.db #0x06	; 6
      000265 00                    4391 	.db #0x00	; 0
      000266 08                    4392 	.db #0x08	; 8
      000267 0D                    4393 	.db #0x0d	; 13
      000268                       4394 _s7:
      000268 04                    4395 	.db #0x04	; 4
      000269 0B                    4396 	.db #0x0b	; 11
      00026A 02                    4397 	.db #0x02	; 2
      00026B 0E                    4398 	.db #0x0e	; 14
      00026C 0F                    4399 	.db #0x0f	; 15
      00026D 00                    4400 	.db #0x00	; 0
      00026E 08                    4401 	.db #0x08	; 8
      00026F 0D                    4402 	.db #0x0d	; 13
      000270 03                    4403 	.db #0x03	; 3
      000271 0C                    4404 	.db #0x0c	; 12
      000272 09                    4405 	.db #0x09	; 9
      000273 07                    4406 	.db #0x07	; 7
      000274 05                    4407 	.db #0x05	; 5
      000275 0A                    4408 	.db #0x0a	; 10
      000276 06                    4409 	.db #0x06	; 6
      000277 01                    4410 	.db #0x01	; 1
      000278 0D                    4411 	.db #0x0d	; 13
      000279 00                    4412 	.db #0x00	; 0
      00027A 0B                    4413 	.db #0x0b	; 11
      00027B 07                    4414 	.db #0x07	; 7
      00027C 04                    4415 	.db #0x04	; 4
      00027D 09                    4416 	.db #0x09	; 9
      00027E 01                    4417 	.db #0x01	; 1
      00027F 0A                    4418 	.db #0x0a	; 10
      000280 0E                    4419 	.db #0x0e	; 14
      000281 03                    4420 	.db #0x03	; 3
      000282 05                    4421 	.db #0x05	; 5
      000283 0C                    4422 	.db #0x0c	; 12
      000284 02                    4423 	.db #0x02	; 2
      000285 0F                    4424 	.db #0x0f	; 15
      000286 08                    4425 	.db #0x08	; 8
      000287 06                    4426 	.db #0x06	; 6
      000288 01                    4427 	.db #0x01	; 1
      000289 04                    4428 	.db #0x04	; 4
      00028A 0B                    4429 	.db #0x0b	; 11
      00028B 0D                    4430 	.db #0x0d	; 13
      00028C 0C                    4431 	.db #0x0c	; 12
      00028D 03                    4432 	.db #0x03	; 3
      00028E 07                    4433 	.db #0x07	; 7
      00028F 0E                    4434 	.db #0x0e	; 14
      000290 0A                    4435 	.db #0x0a	; 10
      000291 0F                    4436 	.db #0x0f	; 15
      000292 06                    4437 	.db #0x06	; 6
      000293 08                    4438 	.db #0x08	; 8
      000294 00                    4439 	.db #0x00	; 0
      000295 05                    4440 	.db #0x05	; 5
      000296 09                    4441 	.db #0x09	; 9
      000297 02                    4442 	.db #0x02	; 2
      000298 06                    4443 	.db #0x06	; 6
      000299 0B                    4444 	.db #0x0b	; 11
      00029A 0D                    4445 	.db #0x0d	; 13
      00029B 08                    4446 	.db #0x08	; 8
      00029C 01                    4447 	.db #0x01	; 1
      00029D 04                    4448 	.db #0x04	; 4
      00029E 0A                    4449 	.db #0x0a	; 10
      00029F 07                    4450 	.db #0x07	; 7
      0002A0 09                    4451 	.db #0x09	; 9
      0002A1 05                    4452 	.db #0x05	; 5
      0002A2 00                    4453 	.db #0x00	; 0
      0002A3 0F                    4454 	.db #0x0f	; 15
      0002A4 0E                    4455 	.db #0x0e	; 14
      0002A5 02                    4456 	.db #0x02	; 2
      0002A6 03                    4457 	.db #0x03	; 3
      0002A7 0C                    4458 	.db #0x0c	; 12
      0002A8                       4459 _s8:
      0002A8 0D                    4460 	.db #0x0d	; 13
      0002A9 02                    4461 	.db #0x02	; 2
      0002AA 08                    4462 	.db #0x08	; 8
      0002AB 04                    4463 	.db #0x04	; 4
      0002AC 06                    4464 	.db #0x06	; 6
      0002AD 0F                    4465 	.db #0x0f	; 15
      0002AE 0B                    4466 	.db #0x0b	; 11
      0002AF 01                    4467 	.db #0x01	; 1
      0002B0 0A                    4468 	.db #0x0a	; 10
      0002B1 09                    4469 	.db #0x09	; 9
      0002B2 03                    4470 	.db #0x03	; 3
      0002B3 0E                    4471 	.db #0x0e	; 14
      0002B4 05                    4472 	.db #0x05	; 5
      0002B5 00                    4473 	.db #0x00	; 0
      0002B6 0C                    4474 	.db #0x0c	; 12
      0002B7 07                    4475 	.db #0x07	; 7
      0002B8 01                    4476 	.db #0x01	; 1
      0002B9 0F                    4477 	.db #0x0f	; 15
      0002BA 0D                    4478 	.db #0x0d	; 13
      0002BB 08                    4479 	.db #0x08	; 8
      0002BC 0A                    4480 	.db #0x0a	; 10
      0002BD 03                    4481 	.db #0x03	; 3
      0002BE 07                    4482 	.db #0x07	; 7
      0002BF 04                    4483 	.db #0x04	; 4
      0002C0 0C                    4484 	.db #0x0c	; 12
      0002C1 05                    4485 	.db #0x05	; 5
      0002C2 06                    4486 	.db #0x06	; 6
      0002C3 0B                    4487 	.db #0x0b	; 11
      0002C4 00                    4488 	.db #0x00	; 0
      0002C5 0E                    4489 	.db #0x0e	; 14
      0002C6 09                    4490 	.db #0x09	; 9
      0002C7 02                    4491 	.db #0x02	; 2
      0002C8 07                    4492 	.db #0x07	; 7
      0002C9 0B                    4493 	.db #0x0b	; 11
      0002CA 04                    4494 	.db #0x04	; 4
      0002CB 01                    4495 	.db #0x01	; 1
      0002CC 09                    4496 	.db #0x09	; 9
      0002CD 0C                    4497 	.db #0x0c	; 12
      0002CE 0E                    4498 	.db #0x0e	; 14
      0002CF 02                    4499 	.db #0x02	; 2
      0002D0 00                    4500 	.db #0x00	; 0
      0002D1 06                    4501 	.db #0x06	; 6
      0002D2 0A                    4502 	.db #0x0a	; 10
      0002D3 0D                    4503 	.db #0x0d	; 13
      0002D4 0F                    4504 	.db #0x0f	; 15
      0002D5 03                    4505 	.db #0x03	; 3
      0002D6 05                    4506 	.db #0x05	; 5
      0002D7 08                    4507 	.db #0x08	; 8
      0002D8 02                    4508 	.db #0x02	; 2
      0002D9 01                    4509 	.db #0x01	; 1
      0002DA 0E                    4510 	.db #0x0e	; 14
      0002DB 07                    4511 	.db #0x07	; 7
      0002DC 04                    4512 	.db #0x04	; 4
      0002DD 0A                    4513 	.db #0x0a	; 10
      0002DE 08                    4514 	.db #0x08	; 8
      0002DF 0D                    4515 	.db #0x0d	; 13
      0002E0 0F                    4516 	.db #0x0f	; 15
      0002E1 0C                    4517 	.db #0x0c	; 12
      0002E2 09                    4518 	.db #0x09	; 9
      0002E3 00                    4519 	.db #0x00	; 0
      0002E4 03                    4520 	.db #0x03	; 3
      0002E5 05                    4521 	.db #0x05	; 5
      0002E6 06                    4522 	.db #0x06	; 6
      0002E7 0B                    4523 	.db #0x0b	; 11
      0002E8                       4524 _e:
      0002E8 20                    4525 	.db #0x20	; 32
      0002E9 01                    4526 	.db #0x01	; 1
      0002EA 02                    4527 	.db #0x02	; 2
      0002EB 03                    4528 	.db #0x03	; 3
      0002EC 04                    4529 	.db #0x04	; 4
      0002ED 05                    4530 	.db #0x05	; 5
      0002EE 04                    4531 	.db #0x04	; 4
      0002EF 05                    4532 	.db #0x05	; 5
      0002F0 06                    4533 	.db #0x06	; 6
      0002F1 07                    4534 	.db #0x07	; 7
      0002F2 08                    4535 	.db #0x08	; 8
      0002F3 09                    4536 	.db #0x09	; 9
      0002F4 08                    4537 	.db #0x08	; 8
      0002F5 09                    4538 	.db #0x09	; 9
      0002F6 0A                    4539 	.db #0x0a	; 10
      0002F7 0B                    4540 	.db #0x0b	; 11
      0002F8 0C                    4541 	.db #0x0c	; 12
      0002F9 0D                    4542 	.db #0x0d	; 13
      0002FA 0C                    4543 	.db #0x0c	; 12
      0002FB 0D                    4544 	.db #0x0d	; 13
      0002FC 0E                    4545 	.db #0x0e	; 14
      0002FD 0F                    4546 	.db #0x0f	; 15
      0002FE 10                    4547 	.db #0x10	; 16
      0002FF 11                    4548 	.db #0x11	; 17
      000300 10                    4549 	.db #0x10	; 16
      000301 11                    4550 	.db #0x11	; 17
      000302 12                    4551 	.db #0x12	; 18
      000303 13                    4552 	.db #0x13	; 19
      000304 14                    4553 	.db #0x14	; 20
      000305 15                    4554 	.db #0x15	; 21
      000306 14                    4555 	.db #0x14	; 20
      000307 15                    4556 	.db #0x15	; 21
      000308 16                    4557 	.db #0x16	; 22
      000309 17                    4558 	.db #0x17	; 23
      00030A 18                    4559 	.db #0x18	; 24
      00030B 19                    4560 	.db #0x19	; 25
      00030C 18                    4561 	.db #0x18	; 24
      00030D 19                    4562 	.db #0x19	; 25
      00030E 1A                    4563 	.db #0x1a	; 26
      00030F 1B                    4564 	.db #0x1b	; 27
      000310 1C                    4565 	.db #0x1c	; 28
      000311 1D                    4566 	.db #0x1d	; 29
      000312 1C                    4567 	.db #0x1c	; 28
      000313 1D                    4568 	.db #0x1d	; 29
      000314 1E                    4569 	.db #0x1e	; 30
      000315 1F                    4570 	.db #0x1f	; 31
      000316 20                    4571 	.db #0x20	; 32
      000317 01                    4572 	.db #0x01	; 1
      000318                       4573 _p:
      000318 10                    4574 	.db #0x10	; 16
      000319 07                    4575 	.db #0x07	; 7
      00031A 14                    4576 	.db #0x14	; 20
      00031B 15                    4577 	.db #0x15	; 21
      00031C 1D                    4578 	.db #0x1d	; 29
      00031D 0C                    4579 	.db #0x0c	; 12
      00031E 1C                    4580 	.db #0x1c	; 28
      00031F 11                    4581 	.db #0x11	; 17
      000320 01                    4582 	.db #0x01	; 1
      000321 0F                    4583 	.db #0x0f	; 15
      000322 17                    4584 	.db #0x17	; 23
      000323 1A                    4585 	.db #0x1a	; 26
      000324 05                    4586 	.db #0x05	; 5
      000325 12                    4587 	.db #0x12	; 18
      000326 1F                    4588 	.db #0x1f	; 31
      000327 0A                    4589 	.db #0x0a	; 10
      000328 02                    4590 	.db #0x02	; 2
      000329 08                    4591 	.db #0x08	; 8
      00032A 18                    4592 	.db #0x18	; 24
      00032B 0E                    4593 	.db #0x0e	; 14
      00032C 20                    4594 	.db #0x20	; 32
      00032D 1B                    4595 	.db #0x1b	; 27
      00032E 03                    4596 	.db #0x03	; 3
      00032F 09                    4597 	.db #0x09	; 9
      000330 13                    4598 	.db #0x13	; 19
      000331 0D                    4599 	.db #0x0d	; 13
      000332 1E                    4600 	.db #0x1e	; 30
      000333 06                    4601 	.db #0x06	; 6
      000334 16                    4602 	.db #0x16	; 22
      000335 0B                    4603 	.db #0x0b	; 11
      000336 04                    4604 	.db #0x04	; 4
      000337 19                    4605 	.db #0x19	; 25
                                   4606 	.area XINIT   (CODE)
                                   4607 	.area CABS    (ABS,CODE)
