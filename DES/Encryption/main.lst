                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _p
                                     12 	.globl _e
                                     13 	.globl _s8
                                     14 	.globl _s7
                                     15 	.globl _s6
                                     16 	.globl _s5
                                     17 	.globl _s4
                                     18 	.globl _s3
                                     19 	.globl _s2
                                     20 	.globl _s1
                                     21 	.globl _fp
                                     22 	.globl _ip
                                     23 	.globl _pc2
                                     24 	.globl _pc1
                                     25 	.globl _main
                                     26 	.globl _rotate
                                     27 	.globl _G_Function
                                     28 	.globl _spi_transmit
                                     29 	.globl _spi_init
                                     30 	.globl _spi_delay2
                                     31 	.globl _spi_delay
                                     32 	.globl _TR1
                                     33 	.globl _RI
                                     34 	.globl _TI
                                     35 	.globl _d
                                     36 	.globl _c
                                     37 	.globl _b
                                     38 	.globl _a
                                     39 	.globl _RXD
                                     40 	.globl _TXD
                                     41 	.globl _miso
                                     42 	.globl _mosi
                                     43 	.globl _sclk
                                     44 	.globl _cs
                                     45 	.globl _TL1
                                     46 	.globl _TH1
                                     47 	.globl _TMOD
                                     48 	.globl _SBUF
                                     49 	.globl _SCON
                                     50 	.globl _P3
                                     51 	.globl _P2
                                     52 	.globl _final_original_key
                                     53 	.globl _Temp
                                     54 	.globl _temp
                                     55 	.globl _i
                                     56 	.globl _arr
                                     57 ;--------------------------------------------------------
                                     58 ; special function registers
                                     59 ;--------------------------------------------------------
                                     60 	.area RSEG    (ABS,DATA)
      000000                         61 	.org 0x0000
                           0000A0    62 _P2	=	0x00a0
                           0000B0    63 _P3	=	0x00b0
                           000098    64 _SCON	=	0x0098
                           000099    65 _SBUF	=	0x0099
                           000089    66 _TMOD	=	0x0089
                           00008D    67 _TH1	=	0x008d
                           00008B    68 _TL1	=	0x008b
                                     69 ;--------------------------------------------------------
                                     70 ; special function bits
                                     71 ;--------------------------------------------------------
                                     72 	.area RSEG    (ABS,DATA)
      000000                         73 	.org 0x0000
                           0000A0    74 _cs	=	0x00a0
                           0000A1    75 _sclk	=	0x00a1
                           0000A2    76 _mosi	=	0x00a2
                           0000A3    77 _miso	=	0x00a3
                           0000B1    78 _TXD	=	0x00b1
                           0000B0    79 _RXD	=	0x00b0
                           0000B2    80 _a	=	0x00b2
                           0000B3    81 _b	=	0x00b3
                           0000B4    82 _c	=	0x00b4
                           0000B5    83 _d	=	0x00b5
                           000099    84 _TI	=	0x0099
                           000098    85 _RI	=	0x0098
                           00008E    86 _TR1	=	0x008e
                                     87 ;--------------------------------------------------------
                                     88 ; overlayable register banks
                                     89 ;--------------------------------------------------------
                                     90 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         91 	.ds 8
                                     92 ;--------------------------------------------------------
                                     93 ; internal ram data
                                     94 ;--------------------------------------------------------
                                     95 	.area DSEG    (DATA)
      000000                         96 _arr::
      000000                         97 	.ds 16
      000010                         98 _i::
      000010                         99 	.ds 1
      000011                        100 _temp::
      000011                        101 	.ds 1
      000012                        102 _Temp::
      000012                        103 	.ds 4
      000016                        104 _final_original_key::
      000016                        105 	.ds 8
                                    106 ;--------------------------------------------------------
                                    107 ; overlayable items in internal ram
                                    108 ;--------------------------------------------------------
                                    109 ;--------------------------------------------------------
                                    110 ; Stack segment in internal ram
                                    111 ;--------------------------------------------------------
                                    112 	.area SSEG
      000000                        113 __start__stack:
      000000                        114 	.ds	1
                                    115 
                                    116 ;--------------------------------------------------------
                                    117 ; indirectly addressable internal ram data
                                    118 ;--------------------------------------------------------
                                    119 	.area ISEG    (DATA)
                                    120 ;--------------------------------------------------------
                                    121 ; absolute internal ram data
                                    122 ;--------------------------------------------------------
                                    123 	.area IABS    (ABS,DATA)
                                    124 	.area IABS    (ABS,DATA)
                                    125 ;--------------------------------------------------------
                                    126 ; bit data
                                    127 ;--------------------------------------------------------
                                    128 	.area BSEG    (BIT)
                                    129 ;--------------------------------------------------------
                                    130 ; paged external ram data
                                    131 ;--------------------------------------------------------
                                    132 	.area PSEG    (PAG,XDATA)
                                    133 ;--------------------------------------------------------
                                    134 ; uninitialized external ram data
                                    135 ;--------------------------------------------------------
                                    136 	.area XSEG    (XDATA)
                                    137 ;--------------------------------------------------------
                                    138 ; absolute external ram data
                                    139 ;--------------------------------------------------------
                                    140 	.area XABS    (ABS,XDATA)
                                    141 ;--------------------------------------------------------
                                    142 ; initialized external ram data
                                    143 ;--------------------------------------------------------
                                    144 	.area XISEG   (XDATA)
                                    145 	.area HOME    (CODE)
                                    146 	.area GSINIT0 (CODE)
                                    147 	.area GSINIT1 (CODE)
                                    148 	.area GSINIT2 (CODE)
                                    149 	.area GSINIT3 (CODE)
                                    150 	.area GSINIT4 (CODE)
                                    151 	.area GSINIT5 (CODE)
                                    152 	.area GSINIT  (CODE)
                                    153 	.area GSFINAL (CODE)
                                    154 	.area CSEG    (CODE)
                                    155 ;--------------------------------------------------------
                                    156 ; interrupt vector
                                    157 ;--------------------------------------------------------
                                    158 	.area HOME    (CODE)
      000000                        159 __interrupt_vect:
      000000 02r00r00         [24]  160 	ljmp	__sdcc_gsinit_startup
                                    161 ;--------------------------------------------------------
                                    162 ; global & static initialisations
                                    163 ;--------------------------------------------------------
                                    164 	.area HOME    (CODE)
                                    165 	.area GSINIT  (CODE)
                                    166 	.area GSFINAL (CODE)
                                    167 	.area GSINIT  (CODE)
                                    168 	.globl __sdcc_gsinit_startup
                                    169 	.globl __sdcc_program_startup
                                    170 	.globl __start__stack
                                    171 	.globl __mcs51_genXINIT
                                    172 	.globl __mcs51_genXRAMCLEAR
                                    173 	.globl __mcs51_genRAMCLEAR
                                    174 ;	main.c:310: __code uint8* arr[8]={s1,s2,s3,s4,s5,s6,s7,s8};
      000000 75*00rE8         [24]  175 	mov	(_arr + 0),#_s1
      000003 75*01s00         [24]  176 	mov	(_arr + 1),#(_s1 >> 8)
      000006 75*02r28         [24]  177 	mov	((_arr + 0x0002) + 0),#_s2
      000009 75*03s01         [24]  178 	mov	((_arr + 0x0002) + 1),#(_s2 >> 8)
      00000C 75*04r68         [24]  179 	mov	((_arr + 0x0004) + 0),#_s3
      00000F 75*05s01         [24]  180 	mov	((_arr + 0x0004) + 1),#(_s3 >> 8)
      000012 75*06rA8         [24]  181 	mov	((_arr + 0x0006) + 0),#_s4
      000015 75*07s01         [24]  182 	mov	((_arr + 0x0006) + 1),#(_s4 >> 8)
      000018 75*08rE8         [24]  183 	mov	((_arr + 0x0008) + 0),#_s5
      00001B 75*09s01         [24]  184 	mov	((_arr + 0x0008) + 1),#(_s5 >> 8)
      00001E 75*0Ar28         [24]  185 	mov	((_arr + 0x000a) + 0),#_s6
      000021 75*0Bs02         [24]  186 	mov	((_arr + 0x000a) + 1),#(_s6 >> 8)
      000024 75*0Cr68         [24]  187 	mov	((_arr + 0x000c) + 0),#_s7
      000027 75*0Ds02         [24]  188 	mov	((_arr + 0x000c) + 1),#(_s7 >> 8)
      00002A 75*0ErA8         [24]  189 	mov	((_arr + 0x000e) + 0),#_s8
      00002D 75*0Fs02         [24]  190 	mov	((_arr + 0x000e) + 1),#(_s8 >> 8)
                                    191 ;	main.c:312: uint32 Temp = 0;
      000030 E4               [12]  192 	clr	a
      000031 F5*12            [12]  193 	mov	_Temp,a
      000033 F5*13            [12]  194 	mov	(_Temp + 1),a
      000035 F5*14            [12]  195 	mov	(_Temp + 2),a
      000037 F5*15            [12]  196 	mov	(_Temp + 3),a
                                    197 ;	main.c:579: DATA final_original_key =  {.Array ={0x4b,0x41,0x53,0x48,0x49,0x53,0x41,0x42}};//{0x4b,0x41,0x53,0x48,0x49,0x53,0x41,0x42}};
      000039 75*16 4B         [24]  198 	mov	_final_original_key,#0x4b
      00003C 75*17 41         [24]  199 	mov	(_final_original_key + 0x0001),#0x41
      00003F 75*18 53         [24]  200 	mov	(_final_original_key + 0x0002),#0x53
      000042 75*19 48         [24]  201 	mov	(_final_original_key + 0x0003),#0x48
      000045 75*1A 49         [24]  202 	mov	(_final_original_key + 0x0004),#0x49
      000048 75*1B 53         [24]  203 	mov	(_final_original_key + 0x0005),#0x53
      00004B 75*1C 41         [24]  204 	mov	(_final_original_key + 0x0006),#0x41
      00004E 75*1D 42         [24]  205 	mov	(_final_original_key + 0x0007),#0x42
                                    206 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  207 	ljmp	__sdcc_program_startup
                                    208 ;--------------------------------------------------------
                                    209 ; Home
                                    210 ;--------------------------------------------------------
                                    211 	.area HOME    (CODE)
                                    212 	.area HOME    (CODE)
      000003                        213 __sdcc_program_startup:
      000003 02r0Er2D         [24]  214 	ljmp	_main
                                    215 ;	return from main will return to caller
                                    216 ;--------------------------------------------------------
                                    217 ; code
                                    218 ;--------------------------------------------------------
                                    219 	.area CSEG    (CODE)
                                    220 ;------------------------------------------------------------
                                    221 ;Allocation info for local variables in function 'spi_delay'
                                    222 ;------------------------------------------------------------
                                    223 ;j                         Allocated to registers r7 
                                    224 ;------------------------------------------------------------
                                    225 ;	main.c:126: void spi_delay (void){
                                    226 ;	-----------------------------------------
                                    227 ;	 function spi_delay
                                    228 ;	-----------------------------------------
      000000                        229 _spi_delay:
                           000007   230 	ar7 = 0x07
                           000006   231 	ar6 = 0x06
                           000005   232 	ar5 = 0x05
                           000004   233 	ar4 = 0x04
                           000003   234 	ar3 = 0x03
                           000002   235 	ar2 = 0x02
                           000001   236 	ar1 = 0x01
                           000000   237 	ar0 = 0x00
                                    238 ;	main.c:128: for (j = 0; j <100 ; j++);
      000000 7F 64            [12]  239 	mov	r7,#0x64
      000002                        240 00104$:
      000002 DF FE            [24]  241 	djnz	r7,00104$
                                    242 ;	main.c:129: }
      000004 22               [24]  243 	ret
                                    244 ;------------------------------------------------------------
                                    245 ;Allocation info for local variables in function 'spi_delay2'
                                    246 ;------------------------------------------------------------
                                    247 ;j                         Allocated to registers r7 
                                    248 ;------------------------------------------------------------
                                    249 ;	main.c:130: void spi_delay2 (void){
                                    250 ;	-----------------------------------------
                                    251 ;	 function spi_delay2
                                    252 ;	-----------------------------------------
      000005                        253 _spi_delay2:
                                    254 ;	main.c:132: for (j = 0; j <3 ; j++);
      000005 7F 03            [12]  255 	mov	r7,#0x03
      000007                        256 00104$:
      000007 DF FE            [24]  257 	djnz	r7,00104$
                                    258 ;	main.c:133: }
      000009 22               [24]  259 	ret
                                    260 ;------------------------------------------------------------
                                    261 ;Allocation info for local variables in function 'spi_init'
                                    262 ;------------------------------------------------------------
                                    263 ;	main.c:135: void spi_init (void){
                                    264 ;	-----------------------------------------
                                    265 ;	 function spi_init
                                    266 ;	-----------------------------------------
      00000A                        267 _spi_init:
                                    268 ;	main.c:136: cs   = 0;
                                    269 ;	assignBit
      00000A C2 A0            [12]  270 	clr	_cs
                                    271 ;	main.c:137: cs   = 0;
                                    272 ;	assignBit
      00000C C2 A0            [12]  273 	clr	_cs
                                    274 ;	main.c:139: sclk = 0;
                                    275 ;	assignBit
      00000E C2 A1            [12]  276 	clr	_sclk
                                    277 ;	main.c:140: sclk = 0;
                                    278 ;	assignBit
      000010 C2 A1            [12]  279 	clr	_sclk
                                    280 ;	main.c:142: mosi = 0;
                                    281 ;	assignBit
      000012 C2 A2            [12]  282 	clr	_mosi
                                    283 ;	main.c:143: mosi = 0;
                                    284 ;	assignBit
      000014 C2 A2            [12]  285 	clr	_mosi
                                    286 ;	main.c:144: miso = 0;
                                    287 ;	assignBit
      000016 C2 A3            [12]  288 	clr	_miso
                                    289 ;	main.c:145: miso = 1;
                                    290 ;	assignBit
      000018 D2 A3            [12]  291 	setb	_miso
                                    292 ;	main.c:146: }
      00001A 22               [24]  293 	ret
                                    294 ;------------------------------------------------------------
                                    295 ;Allocation info for local variables in function 'spi_transmit'
                                    296 ;------------------------------------------------------------
                                    297 ;byte                      Allocated to registers r7 
                                    298 ;tt                        Allocated to registers r6 
                                    299 ;------------------------------------------------------------
                                    300 ;	main.c:148: void spi_transmit (char byte){
                                    301 ;	-----------------------------------------
                                    302 ;	 function spi_transmit
                                    303 ;	-----------------------------------------
      00001B                        304 _spi_transmit:
      00001B AF 82            [24]  305 	mov	r7,dpl
                                    306 ;	main.c:150: cs = 1;
                                    307 ;	assignBit
      00001D D2 A0            [12]  308 	setb	_cs
                                    309 ;	main.c:151: sclk = 0;
                                    310 ;	assignBit
      00001F C2 A1            [12]  311 	clr	_sclk
                                    312 ;	main.c:152: cs = 0;
                                    313 ;	assignBit
      000021 C2 A0            [12]  314 	clr	_cs
                                    315 ;	main.c:153: for (tt = 0 ; tt <8 ; tt++){
      000023 7E 00            [12]  316 	mov	r6,#0x00
      000025                        317 00102$:
                                    318 ;	main.c:154: mosi = ((byte >> tt) & 0x01); // send b0 first
      000025 8E F0            [24]  319 	mov	b,r6
      000027 05 F0            [12]  320 	inc	b
      000029 EF               [12]  321 	mov	a,r7
      00002A 80 02            [24]  322 	sjmp	00112$
      00002C                        323 00111$:
      00002C C3               [12]  324 	clr	c
      00002D 13               [12]  325 	rrc	a
      00002E                        326 00112$:
      00002E D5 F0 FB         [24]  327 	djnz	b,00111$
      000031 54 01            [12]  328 	anl	a,#0x01
                                    329 ;	assignBit
      000033 24 FF            [12]  330 	add	a,#0xff
      000035 92 A2            [24]  331 	mov	_mosi,c
                                    332 ;	main.c:155: spi_delay ();
      000037 C0 07            [24]  333 	push	ar7
      000039 C0 06            [24]  334 	push	ar6
      00003B 12r00r00         [24]  335 	lcall	_spi_delay
                                    336 ;	main.c:156: sclk = 1; // rx read at rising edge
                                    337 ;	assignBit
      00003E D2 A1            [12]  338 	setb	_sclk
                                    339 ;	main.c:157: spi_delay2();
      000040 12r00r05         [24]  340 	lcall	_spi_delay2
                                    341 ;	main.c:158: sclk = 0;
                                    342 ;	assignBit
      000043 C2 A1            [12]  343 	clr	_sclk
                                    344 ;	main.c:159: spi_delay ();
      000045 12r00r00         [24]  345 	lcall	_spi_delay
      000048 D0 06            [24]  346 	pop	ar6
      00004A D0 07            [24]  347 	pop	ar7
                                    348 ;	main.c:153: for (tt = 0 ; tt <8 ; tt++){
      00004C 0E               [12]  349 	inc	r6
      00004D BE 08 00         [24]  350 	cjne	r6,#0x08,00113$
      000050                        351 00113$:
      000050 40 D3            [24]  352 	jc	00102$
                                    353 ;	main.c:161: }}
      000052 22               [24]  354 	ret
                                    355 ;------------------------------------------------------------
                                    356 ;Allocation info for local variables in function 'Permutation'
                                    357 ;------------------------------------------------------------
                                    358 ;permuted_text             Allocated to stack - _bp -5
                                    359 ;type                      Allocated to stack - _bp -6
                                    360 ;table                     Allocated to stack - _bp -9
                                    361 ;plain_text                Allocated to stack - _bp +1
                                    362 ;sloc0                     Allocated to stack - _bp +4
                                    363 ;------------------------------------------------------------
                                    364 ;	main.c:317: static void Permutation ( DATA *plain_text,DATA *permuted_text,uint8 type,uint8 *table){
                                    365 ;	-----------------------------------------
                                    366 ;	 function Permutation
                                    367 ;	-----------------------------------------
      000053                        368 _Permutation:
      000053 C0*00            [24]  369 	push	_bp
      000055 85 81*00         [24]  370 	mov	_bp,sp
      000058 C0 82            [24]  371 	push	dpl
      00005A C0 83            [24]  372 	push	dph
      00005C C0 F0            [24]  373 	push	b
      00005E 05 81            [12]  374 	inc	sp
      000060 05 81            [12]  375 	inc	sp
      000062 05 81            [12]  376 	inc	sp
                                    377 ;	main.c:318: for (i = 0 ;i < type ; i++){
      000064 75*10 00         [24]  378 	mov	_i,#0x00
      000067                        379 00103$:
      000067 E5*00            [12]  380 	mov	a,_bp
      000069 24 FA            [12]  381 	add	a,#0xfa
      00006B F8               [12]  382 	mov	r0,a
      00006C C3               [12]  383 	clr	c
      00006D E5*10            [12]  384 	mov	a,_i
      00006F 96               [12]  385 	subb	a,@r0
      000070 40 03            [24]  386 	jc	00115$
      000072 02r01rC1         [24]  387 	ljmp	00105$
      000075                        388 00115$:
                                    389 ;	main.c:321: temp = GET_BIT_ARRAY(plain_text->Array[((table[i] -1) / 8)],((table[i] -1) % 8));
      000075 E5*00            [12]  390 	mov	a,_bp
      000077 24 F7            [12]  391 	add	a,#0xf7
      000079 F8               [12]  392 	mov	r0,a
      00007A E5*10            [12]  393 	mov	a,_i
      00007C 26               [12]  394 	add	a,@r0
      00007D FA               [12]  395 	mov	r2,a
      00007E E4               [12]  396 	clr	a
      00007F 08               [12]  397 	inc	r0
      000080 36               [12]  398 	addc	a,@r0
      000081 FB               [12]  399 	mov	r3,a
      000082 08               [12]  400 	inc	r0
      000083 86 04            [24]  401 	mov	ar4,@r0
      000085 8A 82            [24]  402 	mov	dpl,r2
      000087 8B 83            [24]  403 	mov	dph,r3
      000089 8C F0            [24]  404 	mov	b,r4
      00008B 12r00r00         [24]  405 	lcall	__gptrget
      00008E FA               [12]  406 	mov	r2,a
      00008F 7C 00            [12]  407 	mov	r4,#0x00
      000091 1A               [12]  408 	dec	r2
      000092 BA FF 01         [24]  409 	cjne	r2,#0xff,00116$
      000095 1C               [12]  410 	dec	r4
      000096                        411 00116$:
      000096 C0 04            [24]  412 	push	ar4
      000098 C0 02            [24]  413 	push	ar2
      00009A 74 08            [12]  414 	mov	a,#0x08
      00009C C0 E0            [24]  415 	push	acc
      00009E E4               [12]  416 	clr	a
      00009F C0 E0            [24]  417 	push	acc
      0000A1 8A 82            [24]  418 	mov	dpl,r2
      0000A3 8C 83            [24]  419 	mov	dph,r4
      0000A5 12r00r00         [24]  420 	lcall	__divsint
      0000A8 AB 82            [24]  421 	mov	r3,dpl
      0000AA AF 83            [24]  422 	mov	r7,dph
      0000AC 15 81            [12]  423 	dec	sp
      0000AE 15 81            [12]  424 	dec	sp
      0000B0 D0 02            [24]  425 	pop	ar2
      0000B2 D0 04            [24]  426 	pop	ar4
      0000B4 A8*00            [24]  427 	mov	r0,_bp
      0000B6 08               [12]  428 	inc	r0
      0000B7 EB               [12]  429 	mov	a,r3
      0000B8 26               [12]  430 	add	a,@r0
      0000B9 FB               [12]  431 	mov	r3,a
      0000BA EF               [12]  432 	mov	a,r7
      0000BB 08               [12]  433 	inc	r0
      0000BC 36               [12]  434 	addc	a,@r0
      0000BD FF               [12]  435 	mov	r7,a
      0000BE 08               [12]  436 	inc	r0
      0000BF 86 06            [24]  437 	mov	ar6,@r0
      0000C1 8B 82            [24]  438 	mov	dpl,r3
      0000C3 8F 83            [24]  439 	mov	dph,r7
      0000C5 8E F0            [24]  440 	mov	b,r6
      0000C7 12r00r00         [24]  441 	lcall	__gptrget
      0000CA FB               [12]  442 	mov	r3,a
      0000CB 7F 00            [12]  443 	mov	r7,#0x00
      0000CD C0 07            [24]  444 	push	ar7
      0000CF C0 03            [24]  445 	push	ar3
      0000D1 74 08            [12]  446 	mov	a,#0x08
      0000D3 C0 E0            [24]  447 	push	acc
      0000D5 E4               [12]  448 	clr	a
      0000D6 C0 E0            [24]  449 	push	acc
      0000D8 8A 82            [24]  450 	mov	dpl,r2
      0000DA 8C 83            [24]  451 	mov	dph,r4
      0000DC 12r00r00         [24]  452 	lcall	__modsint
      0000DF AD 82            [24]  453 	mov	r5,dpl
      0000E1 15 81            [12]  454 	dec	sp
      0000E3 15 81            [12]  455 	dec	sp
      0000E5 D0 03            [24]  456 	pop	ar3
      0000E7 D0 07            [24]  457 	pop	ar7
      0000E9 8D F0            [24]  458 	mov	b,r5
      0000EB 05 F0            [12]  459 	inc	b
      0000ED 80 06            [24]  460 	sjmp	00118$
      0000EF                        461 00117$:
      0000EF EB               [12]  462 	mov	a,r3
      0000F0 2B               [12]  463 	add	a,r3
      0000F1 FB               [12]  464 	mov	r3,a
      0000F2 EF               [12]  465 	mov	a,r7
      0000F3 33               [12]  466 	rlc	a
      0000F4 FF               [12]  467 	mov	r7,a
      0000F5                        468 00118$:
      0000F5 D5 F0 F7         [24]  469 	djnz	b,00117$
      0000F8 53 03 80         [24]  470 	anl	ar3,#0x80
      0000FB E4               [12]  471 	clr	a
      0000FC A2 E7            [12]  472 	mov	c,acc.7
      0000FE CB               [12]  473 	xch	a,r3
      0000FF 33               [12]  474 	rlc	a
      000100 CB               [12]  475 	xch	a,r3
      000101 33               [12]  476 	rlc	a
      000102 CB               [12]  477 	xch	a,r3
      000103 54 01            [12]  478 	anl	a,#0x01
      000105 30 E0 02         [24]  479 	jnb	acc.0,00119$
      000108 44 FE            [12]  480 	orl	a,#0xfffffffe
      00010A                        481 00119$:
      00010A 8B*11            [24]  482 	mov	_temp,r3
                                    483 ;	main.c:324: WRITE_BIT_ARRAY(permuted_text->Array[(i/8)],(i%8),temp);
      00010C E5*00            [12]  484 	mov	a,_bp
      00010E 24 FB            [12]  485 	add	a,#0xfb
      000110 F8               [12]  486 	mov	r0,a
      000111 E5*00            [12]  487 	mov	a,_bp
      000113 24 04            [12]  488 	add	a,#0x04
      000115 F9               [12]  489 	mov	r1,a
      000116 E6               [12]  490 	mov	a,@r0
      000117 F7               [12]  491 	mov	@r1,a
      000118 08               [12]  492 	inc	r0
      000119 E6               [12]  493 	mov	a,@r0
      00011A 09               [12]  494 	inc	r1
      00011B F7               [12]  495 	mov	@r1,a
      00011C 08               [12]  496 	inc	r0
      00011D E6               [12]  497 	mov	a,@r0
      00011E 09               [12]  498 	inc	r1
      00011F F7               [12]  499 	mov	@r1,a
      000120 AB*10            [24]  500 	mov	r3,_i
      000122 7C 00            [12]  501 	mov	r4,#0x00
      000124 C0 04            [24]  502 	push	ar4
      000126 C0 03            [24]  503 	push	ar3
      000128 74 08            [12]  504 	mov	a,#0x08
      00012A C0 E0            [24]  505 	push	acc
      00012C E4               [12]  506 	clr	a
      00012D C0 E0            [24]  507 	push	acc
      00012F 8B 82            [24]  508 	mov	dpl,r3
      000131 8C 83            [24]  509 	mov	dph,r4
      000133 12r00r00         [24]  510 	lcall	__divsint
      000136 AA 82            [24]  511 	mov	r2,dpl
      000138 AF 83            [24]  512 	mov	r7,dph
      00013A 15 81            [12]  513 	dec	sp
      00013C 15 81            [12]  514 	dec	sp
      00013E D0 03            [24]  515 	pop	ar3
      000140 D0 04            [24]  516 	pop	ar4
      000142 E5*00            [12]  517 	mov	a,_bp
      000144 24 04            [12]  518 	add	a,#0x04
      000146 F8               [12]  519 	mov	r0,a
      000147 EA               [12]  520 	mov	a,r2
      000148 26               [12]  521 	add	a,@r0
      000149 FA               [12]  522 	mov	r2,a
      00014A EF               [12]  523 	mov	a,r7
      00014B 08               [12]  524 	inc	r0
      00014C 36               [12]  525 	addc	a,@r0
      00014D FF               [12]  526 	mov	r7,a
      00014E 08               [12]  527 	inc	r0
      00014F 86 06            [24]  528 	mov	ar6,@r0
      000151 E5*00            [12]  529 	mov	a,_bp
      000153 24 04            [12]  530 	add	a,#0x04
      000155 F8               [12]  531 	mov	r0,a
      000156 74 07            [12]  532 	mov	a,#0x07
      000158 5B               [12]  533 	anl	a,r3
      000159 F6               [12]  534 	mov	@r0,a
      00015A 08               [12]  535 	inc	r0
      00015B 76 00            [12]  536 	mov	@r0,#0x00
      00015D E5*00            [12]  537 	mov	a,_bp
      00015F 24 04            [12]  538 	add	a,#0x04
      000161 F8               [12]  539 	mov	r0,a
      000162 86 F0            [24]  540 	mov	b,@r0
      000164 05 F0            [12]  541 	inc	b
      000166 7C 80            [12]  542 	mov	r4,#0x80
      000168 E4               [12]  543 	clr	a
      000169 FD               [12]  544 	mov	r5,a
      00016A 33               [12]  545 	rlc	a
      00016B 92 D2            [24]  546 	mov	ov,c
      00016D 80 08            [24]  547 	sjmp	00121$
      00016F                        548 00120$:
      00016F A2 D2            [12]  549 	mov	c,ov
      000171 ED               [12]  550 	mov	a,r5
      000172 13               [12]  551 	rrc	a
      000173 FD               [12]  552 	mov	r5,a
      000174 EC               [12]  553 	mov	a,r4
      000175 13               [12]  554 	rrc	a
      000176 FC               [12]  555 	mov	r4,a
      000177                        556 00121$:
      000177 D5 F0 F5         [24]  557 	djnz	b,00120$
      00017A EC               [12]  558 	mov	a,r4
      00017B F4               [12]  559 	cpl	a
      00017C FC               [12]  560 	mov	r4,a
      00017D 8A 82            [24]  561 	mov	dpl,r2
      00017F 8F 83            [24]  562 	mov	dph,r7
      000181 8E F0            [24]  563 	mov	b,r6
      000183 12r00r00         [24]  564 	lcall	__gptrget
      000186 52 04            [12]  565 	anl	ar4,a
      000188 AB*11            [24]  566 	mov	r3,_temp
      00018A E4               [12]  567 	clr	a
      00018B 54 01            [12]  568 	anl	a,#0x01
      00018D A2 E0            [12]  569 	mov	c,acc.0
      00018F CB               [12]  570 	xch	a,r3
      000190 13               [12]  571 	rrc	a
      000191 CB               [12]  572 	xch	a,r3
      000192 13               [12]  573 	rrc	a
      000193 CB               [12]  574 	xch	a,r3
      000194 FD               [12]  575 	mov	r5,a
      000195 E5*00            [12]  576 	mov	a,_bp
      000197 24 04            [12]  577 	add	a,#0x04
      000199 F8               [12]  578 	mov	r0,a
      00019A 86 F0            [24]  579 	mov	b,@r0
      00019C 05 F0            [12]  580 	inc	b
      00019E ED               [12]  581 	mov	a,r5
      00019F 33               [12]  582 	rlc	a
      0001A0 92 D2            [24]  583 	mov	ov,c
      0001A2 80 08            [24]  584 	sjmp	00123$
      0001A4                        585 00122$:
      0001A4 A2 D2            [12]  586 	mov	c,ov
      0001A6 ED               [12]  587 	mov	a,r5
      0001A7 13               [12]  588 	rrc	a
      0001A8 FD               [12]  589 	mov	r5,a
      0001A9 EB               [12]  590 	mov	a,r3
      0001AA 13               [12]  591 	rrc	a
      0001AB FB               [12]  592 	mov	r3,a
      0001AC                        593 00123$:
      0001AC D5 F0 F5         [24]  594 	djnz	b,00122$
      0001AF EB               [12]  595 	mov	a,r3
      0001B0 42 04            [12]  596 	orl	ar4,a
      0001B2 8A 82            [24]  597 	mov	dpl,r2
      0001B4 8F 83            [24]  598 	mov	dph,r7
      0001B6 8E F0            [24]  599 	mov	b,r6
      0001B8 EC               [12]  600 	mov	a,r4
      0001B9 12r00r00         [24]  601 	lcall	__gptrput
                                    602 ;	main.c:318: for (i = 0 ;i < type ; i++){
      0001BC 05*10            [12]  603 	inc	_i
      0001BE 02r00r67         [24]  604 	ljmp	00103$
      0001C1                        605 00105$:
                                    606 ;	main.c:326: }
      0001C1 85*00 81         [24]  607 	mov	sp,_bp
      0001C4 D0*00            [24]  608 	pop	_bp
      0001C6 22               [24]  609 	ret
                                    610 ;------------------------------------------------------------
                                    611 ;Allocation info for local variables in function 'G_Function'
                                    612 ;------------------------------------------------------------
                                    613 ;sub_key                   Allocated to stack - _bp -5
                                    614 ;out_g                     Allocated to stack - _bp -8
                                    615 ;round_text                Allocated to registers r5 r6 r7 
                                    616 ;j                         Allocated to stack - _bp +16
                                    617 ;in_s_box                  Allocated to registers r3 
                                    618 ;out_s_box                 Allocated to registers r3 
                                    619 ;raw_s                     Allocated to registers r2 
                                    620 ;column_s                  Allocated to registers r7 
                                    621 ;S_boxes_out               Allocated to registers r7 r6 r5 r4 
                                    622 ;sloc0                     Allocated to stack - _bp +1
                                    623 ;sloc1                     Allocated to stack - _bp +4
                                    624 ;sloc2                     Allocated to stack - _bp +8
                                    625 ;sloc3                     Allocated to stack - _bp +11
                                    626 ;sloc4                     Allocated to stack - _bp +24
                                    627 ;sloc5                     Allocated to stack - _bp +12
                                    628 ;------------------------------------------------------------
                                    629 ;	main.c:328: void G_Function (DATA *round_text,DATA *sub_key,DATA *out_g){
                                    630 ;	-----------------------------------------
                                    631 ;	 function G_Function
                                    632 ;	-----------------------------------------
      0001C7                        633 _G_Function:
      0001C7 C0*00            [24]  634 	push	_bp
      0001C9 E5 81            [12]  635 	mov	a,sp
      0001CB F5*00            [12]  636 	mov	_bp,a
      0001CD 24 10            [12]  637 	add	a,#0x10
      0001CF F5 81            [12]  638 	mov	sp,a
      0001D1 AD 82            [24]  639 	mov	r5,dpl
      0001D3 AE 83            [24]  640 	mov	r6,dph
      0001D5 AF F0            [24]  641 	mov	r7,b
                                    642 ;	main.c:331: Temp = 0;
      0001D7 E4               [12]  643 	clr	a
      0001D8 F5*12            [12]  644 	mov	_Temp,a
      0001DA F5*13            [12]  645 	mov	(_Temp + 1),a
      0001DC F5*14            [12]  646 	mov	(_Temp + 2),a
      0001DE F5*15            [12]  647 	mov	(_Temp + 3),a
                                    648 ;	main.c:332: for (i = 4 ; i<8 ; i++){
      0001E0 75*10 04         [24]  649 	mov	_i,#0x04
      0001E3                        650 00107$:
                                    651 ;	main.c:333: Temp <<=8;
      0001E3 85*14*15         [24]  652 	mov	(_Temp + 3),(_Temp + 2)
      0001E6 85*13*14         [24]  653 	mov	(_Temp + 2),(_Temp + 1)
      0001E9 85*12*13         [24]  654 	mov	(_Temp + 1),_Temp
      0001EC 75*12 00         [24]  655 	mov	_Temp,#0x00
                                    656 ;	main.c:334: Temp |= round_text->Array[i];
      0001EF E5*10            [12]  657 	mov	a,_i
      0001F1 2D               [12]  658 	add	a,r5
      0001F2 FA               [12]  659 	mov	r2,a
      0001F3 E4               [12]  660 	clr	a
      0001F4 3E               [12]  661 	addc	a,r6
      0001F5 FB               [12]  662 	mov	r3,a
      0001F6 8F 04            [24]  663 	mov	ar4,r7
      0001F8 8A 82            [24]  664 	mov	dpl,r2
      0001FA 8B 83            [24]  665 	mov	dph,r3
      0001FC 8C F0            [24]  666 	mov	b,r4
      0001FE 12r00r00         [24]  667 	lcall	__gptrget
      000201 FA               [12]  668 	mov	r2,a
      000202 C0 05            [24]  669 	push	ar5
      000204 C0 06            [24]  670 	push	ar6
      000206 C0 07            [24]  671 	push	ar7
      000208 E4               [12]  672 	clr	a
      000209 FB               [12]  673 	mov	r3,a
      00020A FC               [12]  674 	mov	r4,a
      00020B FF               [12]  675 	mov	r7,a
      00020C EA               [12]  676 	mov	a,r2
      00020D 42*12            [12]  677 	orl	_Temp,a
      00020F EB               [12]  678 	mov	a,r3
      000210 42*13            [12]  679 	orl	(_Temp + 1),a
      000212 EC               [12]  680 	mov	a,r4
      000213 42*14            [12]  681 	orl	(_Temp + 2),a
      000215 EF               [12]  682 	mov	a,r7
      000216 42*15            [12]  683 	orl	(_Temp + 3),a
                                    684 ;	main.c:332: for (i = 4 ; i<8 ; i++){
      000218 05*10            [12]  685 	inc	_i
      00021A C3               [12]  686 	clr	c
      00021B E5*10            [12]  687 	mov	a,_i
      00021D 94 08            [12]  688 	subb	a,#0x08
      00021F D0 07            [24]  689 	pop	ar7
      000221 D0 06            [24]  690 	pop	ar6
      000223 D0 05            [24]  691 	pop	ar5
      000225 40 BC            [24]  692 	jc	00107$
                                    693 ;	main.c:337: for (i = 0 ;i <= 47 ; i++){ //arr = {f0 ,aa, f0, aa} >>> aa f0 aa f0
      000227 75*10 00         [24]  694 	mov	_i,#0x00
      00022A E5*00            [12]  695 	mov	a,_bp
      00022C 24 F8            [12]  696 	add	a,#0xf8
      00022E F8               [12]  697 	mov	r0,a
      00022F A9*00            [24]  698 	mov	r1,_bp
      000231 09               [12]  699 	inc	r1
      000232 E6               [12]  700 	mov	a,@r0
      000233 F7               [12]  701 	mov	@r1,a
      000234 08               [12]  702 	inc	r0
      000235 E6               [12]  703 	mov	a,@r0
      000236 09               [12]  704 	inc	r1
      000237 F7               [12]  705 	mov	@r1,a
      000238 08               [12]  706 	inc	r0
      000239 E6               [12]  707 	mov	a,@r0
      00023A 09               [12]  708 	inc	r1
      00023B F7               [12]  709 	mov	@r1,a
      00023C                        710 00109$:
                                    711 ;	main.c:339: temp =(uint8)(((Temp<<(e[i]-1)) & 0x80000000)>>31) ;
      00023C E5*10            [12]  712 	mov	a,_i
      00023E 90r02rE8         [24]  713 	mov	dptr,#_e
      000241 93               [24]  714 	movc	a,@a+dptr
      000242 FC               [12]  715 	mov	r4,a
      000243 1C               [12]  716 	dec	r4
      000244 8C F0            [24]  717 	mov	b,r4
      000246 05 F0            [12]  718 	inc	b
      000248 AF*12            [24]  719 	mov	r7,_Temp
      00024A AE*13            [24]  720 	mov	r6,(_Temp + 1)
      00024C AD*14            [24]  721 	mov	r5,(_Temp + 2)
      00024E AC*15            [24]  722 	mov	r4,(_Temp + 3)
      000250 80 0C            [24]  723 	sjmp	00180$
      000252                        724 00179$:
      000252 EF               [12]  725 	mov	a,r7
      000253 2F               [12]  726 	add	a,r7
      000254 FF               [12]  727 	mov	r7,a
      000255 EE               [12]  728 	mov	a,r6
      000256 33               [12]  729 	rlc	a
      000257 FE               [12]  730 	mov	r6,a
      000258 ED               [12]  731 	mov	a,r5
      000259 33               [12]  732 	rlc	a
      00025A FD               [12]  733 	mov	r5,a
      00025B EC               [12]  734 	mov	a,r4
      00025C 33               [12]  735 	rlc	a
      00025D FC               [12]  736 	mov	r4,a
      00025E                        737 00180$:
      00025E D5 F0 F1         [24]  738 	djnz	b,00179$
      000261 53 04 80         [24]  739 	anl	ar4,#0x80
      000264 EC               [12]  740 	mov	a,r4
      000265 23               [12]  741 	rl	a
      000266 54 01            [12]  742 	anl	a,#0x01
      000268 FF               [12]  743 	mov	r7,a
      000269 7E 00            [12]  744 	mov	r6,#0x00
      00026B 8F*11            [24]  745 	mov	_temp,r7
                                    746 ;	main.c:343: WRITE_BIT_ARRAY(out_g->Array[(i/8)],(i%8),temp); //
      00026D AF*10            [24]  747 	mov	r7,_i
      00026F C0 07            [24]  748 	push	ar7
      000271 C0 06            [24]  749 	push	ar6
      000273 74 08            [12]  750 	mov	a,#0x08
      000275 C0 E0            [24]  751 	push	acc
      000277 E4               [12]  752 	clr	a
      000278 C0 E0            [24]  753 	push	acc
      00027A 8F 82            [24]  754 	mov	dpl,r7
      00027C 8E 83            [24]  755 	mov	dph,r6
      00027E 12r00r00         [24]  756 	lcall	__divsint
      000281 AA 82            [24]  757 	mov	r2,dpl
      000283 AC 83            [24]  758 	mov	r4,dph
      000285 15 81            [12]  759 	dec	sp
      000287 15 81            [12]  760 	dec	sp
      000289 D0 06            [24]  761 	pop	ar6
      00028B D0 07            [24]  762 	pop	ar7
      00028D A8*00            [24]  763 	mov	r0,_bp
      00028F 08               [12]  764 	inc	r0
      000290 E5*00            [12]  765 	mov	a,_bp
      000292 24 08            [12]  766 	add	a,#0x08
      000294 F9               [12]  767 	mov	r1,a
      000295 EA               [12]  768 	mov	a,r2
      000296 26               [12]  769 	add	a,@r0
      000297 F7               [12]  770 	mov	@r1,a
      000298 EC               [12]  771 	mov	a,r4
      000299 08               [12]  772 	inc	r0
      00029A 36               [12]  773 	addc	a,@r0
      00029B 09               [12]  774 	inc	r1
      00029C F7               [12]  775 	mov	@r1,a
      00029D 08               [12]  776 	inc	r0
      00029E E6               [12]  777 	mov	a,@r0
      00029F 09               [12]  778 	inc	r1
      0002A0 F7               [12]  779 	mov	@r1,a
      0002A1 53 07 07         [24]  780 	anl	ar7,#0x07
      0002A4 7E 00            [12]  781 	mov	r6,#0x00
      0002A6 8F F0            [24]  782 	mov	b,r7
      0002A8 05 F0            [12]  783 	inc	b
      0002AA 7A 80            [12]  784 	mov	r2,#0x80
      0002AC E4               [12]  785 	clr	a
      0002AD FC               [12]  786 	mov	r4,a
      0002AE 33               [12]  787 	rlc	a
      0002AF 92 D2            [24]  788 	mov	ov,c
      0002B1 80 08            [24]  789 	sjmp	00182$
      0002B3                        790 00181$:
      0002B3 A2 D2            [12]  791 	mov	c,ov
      0002B5 EC               [12]  792 	mov	a,r4
      0002B6 13               [12]  793 	rrc	a
      0002B7 FC               [12]  794 	mov	r4,a
      0002B8 EA               [12]  795 	mov	a,r2
      0002B9 13               [12]  796 	rrc	a
      0002BA FA               [12]  797 	mov	r2,a
      0002BB                        798 00182$:
      0002BB D5 F0 F5         [24]  799 	djnz	b,00181$
      0002BE EA               [12]  800 	mov	a,r2
      0002BF F4               [12]  801 	cpl	a
      0002C0 FA               [12]  802 	mov	r2,a
      0002C1 E5*00            [12]  803 	mov	a,_bp
      0002C3 24 08            [12]  804 	add	a,#0x08
      0002C5 F8               [12]  805 	mov	r0,a
      0002C6 86 82            [24]  806 	mov	dpl,@r0
      0002C8 08               [12]  807 	inc	r0
      0002C9 86 83            [24]  808 	mov	dph,@r0
      0002CB 08               [12]  809 	inc	r0
      0002CC 86 F0            [24]  810 	mov	b,@r0
      0002CE 12r00r00         [24]  811 	lcall	__gptrget
      0002D1 52 02            [12]  812 	anl	ar2,a
      0002D3 AB*11            [24]  813 	mov	r3,_temp
      0002D5 E4               [12]  814 	clr	a
      0002D6 C3               [12]  815 	clr	c
      0002D7 CB               [12]  816 	xch	a,r3
      0002D8 13               [12]  817 	rrc	a
      0002D9 CB               [12]  818 	xch	a,r3
      0002DA 13               [12]  819 	rrc	a
      0002DB CB               [12]  820 	xch	a,r3
      0002DC FC               [12]  821 	mov	r4,a
      0002DD 8F F0            [24]  822 	mov	b,r7
      0002DF 05 F0            [12]  823 	inc	b
      0002E1 EC               [12]  824 	mov	a,r4
      0002E2 33               [12]  825 	rlc	a
      0002E3 92 D2            [24]  826 	mov	ov,c
      0002E5 80 08            [24]  827 	sjmp	00184$
      0002E7                        828 00183$:
      0002E7 A2 D2            [12]  829 	mov	c,ov
      0002E9 EC               [12]  830 	mov	a,r4
      0002EA 13               [12]  831 	rrc	a
      0002EB FC               [12]  832 	mov	r4,a
      0002EC EB               [12]  833 	mov	a,r3
      0002ED 13               [12]  834 	rrc	a
      0002EE FB               [12]  835 	mov	r3,a
      0002EF                        836 00184$:
      0002EF D5 F0 F5         [24]  837 	djnz	b,00183$
      0002F2 EB               [12]  838 	mov	a,r3
      0002F3 42 02            [12]  839 	orl	ar2,a
      0002F5 E5*00            [12]  840 	mov	a,_bp
      0002F7 24 08            [12]  841 	add	a,#0x08
      0002F9 F8               [12]  842 	mov	r0,a
      0002FA 86 82            [24]  843 	mov	dpl,@r0
      0002FC 08               [12]  844 	inc	r0
      0002FD 86 83            [24]  845 	mov	dph,@r0
      0002FF 08               [12]  846 	inc	r0
      000300 86 F0            [24]  847 	mov	b,@r0
      000302 EA               [12]  848 	mov	a,r2
      000303 12r00r00         [24]  849 	lcall	__gptrput
                                    850 ;	main.c:337: for (i = 0 ;i <= 47 ; i++){ //arr = {f0 ,aa, f0, aa} >>> aa f0 aa f0
      000306 05*10            [12]  851 	inc	_i
      000308 E5*10            [12]  852 	mov	a,_i
      00030A 24 D0            [12]  853 	add	a,#0xff - 0x2f
      00030C 40 03            [24]  854 	jc	00185$
      00030E 02r02r3C         [24]  855 	ljmp	00109$
      000311                        856 00185$:
                                    857 ;	main.c:348: for (i = 0; i<7 ;i++){
      000311 75*10 00         [24]  858 	mov	_i,#0x00
      000314                        859 00111$:
                                    860 ;	main.c:349: out_g->Array[i] ^=sub_key->Array[i];
      000314 A8*00            [24]  861 	mov	r0,_bp
      000316 08               [12]  862 	inc	r0
      000317 E5*10            [12]  863 	mov	a,_i
      000319 26               [12]  864 	add	a,@r0
      00031A FF               [12]  865 	mov	r7,a
      00031B E4               [12]  866 	clr	a
      00031C 08               [12]  867 	inc	r0
      00031D 36               [12]  868 	addc	a,@r0
      00031E FE               [12]  869 	mov	r6,a
      00031F 08               [12]  870 	inc	r0
      000320 86 05            [24]  871 	mov	ar5,@r0
      000322 A8*00            [24]  872 	mov	r0,_bp
      000324 08               [12]  873 	inc	r0
      000325 E5*00            [12]  874 	mov	a,_bp
      000327 24 04            [12]  875 	add	a,#0x04
      000329 F9               [12]  876 	mov	r1,a
      00032A E5*10            [12]  877 	mov	a,_i
      00032C 26               [12]  878 	add	a,@r0
      00032D F7               [12]  879 	mov	@r1,a
      00032E E4               [12]  880 	clr	a
      00032F 08               [12]  881 	inc	r0
      000330 36               [12]  882 	addc	a,@r0
      000331 09               [12]  883 	inc	r1
      000332 F7               [12]  884 	mov	@r1,a
      000333 08               [12]  885 	inc	r0
      000334 E6               [12]  886 	mov	a,@r0
      000335 09               [12]  887 	inc	r1
      000336 F7               [12]  888 	mov	@r1,a
      000337 E5*00            [12]  889 	mov	a,_bp
      000339 24 FB            [12]  890 	add	a,#0xfb
      00033B F8               [12]  891 	mov	r0,a
      00033C 86 02            [24]  892 	mov	ar2,@r0
      00033E 08               [12]  893 	inc	r0
      00033F 86 03            [24]  894 	mov	ar3,@r0
      000341 08               [12]  895 	inc	r0
      000342 86 04            [24]  896 	mov	ar4,@r0
      000344 E5*10            [12]  897 	mov	a,_i
      000346 2A               [12]  898 	add	a,r2
      000347 FA               [12]  899 	mov	r2,a
      000348 E4               [12]  900 	clr	a
      000349 3B               [12]  901 	addc	a,r3
      00034A FB               [12]  902 	mov	r3,a
      00034B 8A 82            [24]  903 	mov	dpl,r2
      00034D 8B 83            [24]  904 	mov	dph,r3
      00034F 8C F0            [24]  905 	mov	b,r4
      000351 12r00r00         [24]  906 	lcall	__gptrget
      000354 FA               [12]  907 	mov	r2,a
      000355 E5*00            [12]  908 	mov	a,_bp
      000357 24 04            [12]  909 	add	a,#0x04
      000359 F8               [12]  910 	mov	r0,a
      00035A 86 82            [24]  911 	mov	dpl,@r0
      00035C 08               [12]  912 	inc	r0
      00035D 86 83            [24]  913 	mov	dph,@r0
      00035F 08               [12]  914 	inc	r0
      000360 86 F0            [24]  915 	mov	b,@r0
      000362 12r00r00         [24]  916 	lcall	__gptrget
      000365 FC               [12]  917 	mov	r4,a
      000366 62 02            [12]  918 	xrl	ar2,a
      000368 8F 82            [24]  919 	mov	dpl,r7
      00036A 8E 83            [24]  920 	mov	dph,r6
      00036C 8D F0            [24]  921 	mov	b,r5
      00036E EA               [12]  922 	mov	a,r2
      00036F 12r00r00         [24]  923 	lcall	__gptrput
                                    924 ;	main.c:348: for (i = 0; i<7 ;i++){
      000372 05*10            [12]  925 	inc	_i
      000374 74 F9            [12]  926 	mov	a,#0x100 - 0x07
      000376 25*10            [12]  927 	add	a,_i
      000378 50 9A            [24]  928 	jnc	00111$
                                    929 ;	main.c:355: uint32 S_boxes_out = 0;				// Output of the s-boxes
      00037A E5*00            [12]  930 	mov	a,_bp
      00037C 24 04            [12]  931 	add	a,#0x04
      00037E F8               [12]  932 	mov	r0,a
      00037F E4               [12]  933 	clr	a
      000380 F6               [12]  934 	mov	@r0,a
      000381 08               [12]  935 	inc	r0
      000382 F6               [12]  936 	mov	@r0,a
      000383 08               [12]  937 	inc	r0
      000384 F6               [12]  938 	mov	@r0,a
      000385 08               [12]  939 	inc	r0
      000386 F6               [12]  940 	mov	@r0,a
                                    941 ;	main.c:356: for (j = 0; j < 8; j++){
      000387 E5*00            [12]  942 	mov	a,_bp
      000389 24 10            [12]  943 	add	a,#0x10
      00038B F8               [12]  944 	mov	r0,a
      00038C 76 00            [12]  945 	mov	@r0,#0x00
      00038E                        946 00116$:
                                    947 ;	main.c:357: in_s_box  = 0;
      00038E E5*00            [12]  948 	mov	a,_bp
      000390 24 0B            [12]  949 	add	a,#0x0b
      000392 F8               [12]  950 	mov	r0,a
      000393 76 00            [12]  951 	mov	@r0,#0x00
                                    952 ;	main.c:361: for (i = j*6 ;i < (j*6+6) ; i++){                // 0 6    6 12      12 18   18 24       24 30        30 36      36 42   42 48
      000395 E5*00            [12]  953 	mov	a,_bp
      000397 24 10            [12]  954 	add	a,#0x10
      000399 F8               [12]  955 	mov	r0,a
      00039A E6               [12]  956 	mov	a,@r0
      00039B 75 F0 06         [24]  957 	mov	b,#0x06
      00039E A4               [48]  958 	mul	ab
      00039F F5*10            [12]  959 	mov	_i,a
      0003A1                        960 00114$:
      0003A1 E5*00            [12]  961 	mov	a,_bp
      0003A3 24 10            [12]  962 	add	a,#0x10
      0003A5 F8               [12]  963 	mov	r0,a
      0003A6 86 02            [24]  964 	mov	ar2,@r0
      0003A8 7B 00            [12]  965 	mov	r3,#0x00
      0003AA C0 02            [24]  966 	push	ar2
      0003AC C0 03            [24]  967 	push	ar3
      0003AE 90 00 06         [24]  968 	mov	dptr,#0x0006
      0003B1 12r00r00         [24]  969 	lcall	__mulint
      0003B4 AA 82            [24]  970 	mov	r2,dpl
      0003B6 AB 83            [24]  971 	mov	r3,dph
      0003B8 15 81            [12]  972 	dec	sp
      0003BA 15 81            [12]  973 	dec	sp
      0003BC 74 06            [12]  974 	mov	a,#0x06
      0003BE 2A               [12]  975 	add	a,r2
      0003BF FA               [12]  976 	mov	r2,a
      0003C0 E4               [12]  977 	clr	a
      0003C1 3B               [12]  978 	addc	a,r3
      0003C2 FB               [12]  979 	mov	r3,a
      0003C3 AF*10            [24]  980 	mov	r7,_i
      0003C5 7E 00            [12]  981 	mov	r6,#0x00
      0003C7 C3               [12]  982 	clr	c
      0003C8 EF               [12]  983 	mov	a,r7
      0003C9 9A               [12]  984 	subb	a,r2
      0003CA EE               [12]  985 	mov	a,r6
      0003CB 64 80            [12]  986 	xrl	a,#0x80
      0003CD 8B F0            [24]  987 	mov	b,r3
      0003CF 63 F0 80         [24]  988 	xrl	b,#0x80
      0003D2 95 F0            [12]  989 	subb	a,b
      0003D4 50 79            [24]  990 	jnc	00104$
                                    991 ;	main.c:362: temp = GET_BIT_ARRAY(out_g->Array[(i/8)],(i%8));
      0003D6 C0 07            [24]  992 	push	ar7
      0003D8 C0 06            [24]  993 	push	ar6
      0003DA 74 08            [12]  994 	mov	a,#0x08
      0003DC C0 E0            [24]  995 	push	acc
      0003DE E4               [12]  996 	clr	a
      0003DF C0 E0            [24]  997 	push	acc
      0003E1 8F 82            [24]  998 	mov	dpl,r7
      0003E3 8E 83            [24]  999 	mov	dph,r6
      0003E5 12r00r00         [24] 1000 	lcall	__divsint
      0003E8 AA 82            [24] 1001 	mov	r2,dpl
      0003EA AC 83            [24] 1002 	mov	r4,dph
      0003EC 15 81            [12] 1003 	dec	sp
      0003EE 15 81            [12] 1004 	dec	sp
      0003F0 D0 06            [24] 1005 	pop	ar6
      0003F2 D0 07            [24] 1006 	pop	ar7
      0003F4 A8*00            [24] 1007 	mov	r0,_bp
      0003F6 08               [12] 1008 	inc	r0
      0003F7 EA               [12] 1009 	mov	a,r2
      0003F8 26               [12] 1010 	add	a,@r0
      0003F9 FA               [12] 1011 	mov	r2,a
      0003FA EC               [12] 1012 	mov	a,r4
      0003FB 08               [12] 1013 	inc	r0
      0003FC 36               [12] 1014 	addc	a,@r0
      0003FD FB               [12] 1015 	mov	r3,a
      0003FE 08               [12] 1016 	inc	r0
      0003FF 86 04            [24] 1017 	mov	ar4,@r0
      000401 8A 82            [24] 1018 	mov	dpl,r2
      000403 8B 83            [24] 1019 	mov	dph,r3
      000405 8C F0            [24] 1020 	mov	b,r4
      000407 12r00r00         [24] 1021 	lcall	__gptrget
      00040A FA               [12] 1022 	mov	r2,a
      00040B 7D 00            [12] 1023 	mov	r5,#0x00
      00040D 74 07            [12] 1024 	mov	a,#0x07
      00040F 5F               [12] 1025 	anl	a,r7
      000410 FB               [12] 1026 	mov	r3,a
      000411 8B F0            [24] 1027 	mov	b,r3
      000413 05 F0            [12] 1028 	inc	b
      000415 AB 02            [24] 1029 	mov	r3,ar2
      000417 AC 05            [24] 1030 	mov	r4,ar5
      000419 80 06            [24] 1031 	sjmp	00189$
      00041B                       1032 00188$:
      00041B EB               [12] 1033 	mov	a,r3
      00041C 2B               [12] 1034 	add	a,r3
      00041D FB               [12] 1035 	mov	r3,a
      00041E EC               [12] 1036 	mov	a,r4
      00041F 33               [12] 1037 	rlc	a
      000420 FC               [12] 1038 	mov	r4,a
      000421                       1039 00189$:
      000421 D5 F0 F7         [24] 1040 	djnz	b,00188$
      000424 53 03 80         [24] 1041 	anl	ar3,#0x80
      000427 E4               [12] 1042 	clr	a
      000428 A2 E7            [12] 1043 	mov	c,acc.7
      00042A CB               [12] 1044 	xch	a,r3
      00042B 33               [12] 1045 	rlc	a
      00042C CB               [12] 1046 	xch	a,r3
      00042D 33               [12] 1047 	rlc	a
      00042E CB               [12] 1048 	xch	a,r3
      00042F 54 01            [12] 1049 	anl	a,#0x01
      000431 30 E0 02         [24] 1050 	jnb	acc.0,00190$
      000434 44 FE            [12] 1051 	orl	a,#0xfffffffe
      000436                       1052 00190$:
      000436 FC               [12] 1053 	mov	r4,a
      000437 8B*11            [24] 1054 	mov	_temp,r3
                                   1055 ;	main.c:363: in_s_box <<= 1;
      000439 E5*00            [12] 1056 	mov	a,_bp
      00043B 24 0B            [12] 1057 	add	a,#0x0b
      00043D F8               [12] 1058 	mov	r0,a
      00043E E6               [12] 1059 	mov	a,@r0
      00043F 26               [12] 1060 	add	a,@r0
      000440 FB               [12] 1061 	mov	r3,a
                                   1062 ;	main.c:364: in_s_box |= temp ;
      000441 E5*00            [12] 1063 	mov	a,_bp
      000443 24 0B            [12] 1064 	add	a,#0x0b
      000445 F8               [12] 1065 	mov	r0,a
      000446 E5*11            [12] 1066 	mov	a,_temp
      000448 4B               [12] 1067 	orl	a,r3
      000449 F6               [12] 1068 	mov	@r0,a
                                   1069 ;	main.c:361: for (i = j*6 ;i < (j*6+6) ; i++){                // 0 6    6 12      12 18   18 24       24 30        30 36      36 42   42 48
      00044A 05*10            [12] 1070 	inc	_i
      00044C 02r03rA1         [24] 1071 	ljmp	00114$
      00044F                       1072 00104$:
                                   1073 ;	main.c:367: column_s = in_s_box & 0b00011110;
      00044F E5*00            [12] 1074 	mov	a,_bp
      000451 24 0B            [12] 1075 	add	a,#0x0b
      000453 F8               [12] 1076 	mov	r0,a
      000454 74 1E            [12] 1077 	mov	a,#0x1e
      000456 56               [12] 1078 	anl	a,@r0
                                   1079 ;	main.c:368: column_s >>= 1;
      000457 C3               [12] 1080 	clr	c
      000458 13               [12] 1081 	rrc	a
      000459 FF               [12] 1082 	mov	r7,a
                                   1083 ;	main.c:370: raw_s = GET_BIT(in_s_box,5);
      00045A E5*00            [12] 1084 	mov	a,_bp
      00045C 24 0B            [12] 1085 	add	a,#0x0b
      00045E F8               [12] 1086 	mov	r0,a
      00045F E6               [12] 1087 	mov	a,@r0
      000460 A2 E5            [12] 1088 	mov	c,acc[5]
      000462 E4               [12] 1089 	clr	a
      000463 33               [12] 1090 	rlc	a
                                   1091 ;	main.c:371: raw_s <<= 1;
      000464 25 E0            [12] 1092 	add	a,acc
      000466 FA               [12] 1093 	mov	r2,a
                                   1094 ;	main.c:372: raw_s |= GET_BIT(in_s_box,0);
      000467 E5*00            [12] 1095 	mov	a,_bp
      000469 24 0B            [12] 1096 	add	a,#0x0b
      00046B F8               [12] 1097 	mov	r0,a
      00046C E6               [12] 1098 	mov	a,@r0
      00046D 54 01            [12] 1099 	anl	a,#0x01
      00046F 42 02            [12] 1100 	orl	ar2,a
                                   1101 ;	main.c:373: out_s_box = arr[j][raw_s * 16 + column_s];
      000471 E5*00            [12] 1102 	mov	a,_bp
      000473 24 10            [12] 1103 	add	a,#0x10
      000475 F8               [12] 1104 	mov	r0,a
      000476 E6               [12] 1105 	mov	a,@r0
      000477 25 E0            [12] 1106 	add	a,acc
      000479 24r00            [12] 1107 	add	a,#_arr
      00047B F9               [12] 1108 	mov	r1,a
      00047C 87 06            [24] 1109 	mov	ar6,@r1
      00047E 09               [12] 1110 	inc	r1
      00047F 87 05            [24] 1111 	mov	ar5,@r1
      000481 19               [12] 1112 	dec	r1
      000482 7C 00            [12] 1113 	mov	r4,#0x00
      000484 E5*00            [12] 1114 	mov	a,_bp
      000486 24 08            [12] 1115 	add	a,#0x08
      000488 F8               [12] 1116 	mov	r0,a
      000489 A6 02            [24] 1117 	mov	@r0,ar2
      00048B EC               [12] 1118 	mov	a,r4
      00048C C4               [12] 1119 	swap	a
      00048D 54 F0            [12] 1120 	anl	a,#0xf0
      00048F C6               [12] 1121 	xch	a,@r0
      000490 C4               [12] 1122 	swap	a
      000491 C6               [12] 1123 	xch	a,@r0
      000492 66               [12] 1124 	xrl	a,@r0
      000493 C6               [12] 1125 	xch	a,@r0
      000494 54 F0            [12] 1126 	anl	a,#0xf0
      000496 C6               [12] 1127 	xch	a,@r0
      000497 66               [12] 1128 	xrl	a,@r0
      000498 08               [12] 1129 	inc	r0
      000499 F6               [12] 1130 	mov	@r0,a
      00049A 8F 03            [24] 1131 	mov	ar3,r7
      00049C 7C 00            [12] 1132 	mov	r4,#0x00
      00049E E5*00            [12] 1133 	mov	a,_bp
      0004A0 24 08            [12] 1134 	add	a,#0x08
      0004A2 F8               [12] 1135 	mov	r0,a
      0004A3 EB               [12] 1136 	mov	a,r3
      0004A4 26               [12] 1137 	add	a,@r0
      0004A5 FB               [12] 1138 	mov	r3,a
      0004A6 EC               [12] 1139 	mov	a,r4
      0004A7 08               [12] 1140 	inc	r0
      0004A8 36               [12] 1141 	addc	a,@r0
      0004A9 FC               [12] 1142 	mov	r4,a
      0004AA EB               [12] 1143 	mov	a,r3
      0004AB 2E               [12] 1144 	add	a,r6
      0004AC F5 82            [12] 1145 	mov	dpl,a
      0004AE EC               [12] 1146 	mov	a,r4
      0004AF 3D               [12] 1147 	addc	a,r5
      0004B0 F5 83            [12] 1148 	mov	dph,a
      0004B2 E4               [12] 1149 	clr	a
      0004B3 93               [24] 1150 	movc	a,@a+dptr
      0004B4 FB               [12] 1151 	mov	r3,a
                                   1152 ;	main.c:374: S_boxes_out <<= 4;
      0004B5 E5*00            [12] 1153 	mov	a,_bp
      0004B7 24 04            [12] 1154 	add	a,#0x04
      0004B9 F8               [12] 1155 	mov	r0,a
      0004BA 08               [12] 1156 	inc	r0
      0004BB 08               [12] 1157 	inc	r0
      0004BC 86 05            [24] 1158 	mov	ar5,@r0
      0004BE 08               [12] 1159 	inc	r0
      0004BF E6               [12] 1160 	mov	a,@r0
      0004C0 C4               [12] 1161 	swap	a
      0004C1 54 F0            [12] 1162 	anl	a,#0xf0
      0004C3 CD               [12] 1163 	xch	a,r5
      0004C4 C4               [12] 1164 	swap	a
      0004C5 CD               [12] 1165 	xch	a,r5
      0004C6 6D               [12] 1166 	xrl	a,r5
      0004C7 CD               [12] 1167 	xch	a,r5
      0004C8 54 F0            [12] 1168 	anl	a,#0xf0
      0004CA CD               [12] 1169 	xch	a,r5
      0004CB 6D               [12] 1170 	xrl	a,r5
      0004CC FC               [12] 1171 	mov	r4,a
      0004CD 18               [12] 1172 	dec	r0
      0004CE 18               [12] 1173 	dec	r0
      0004CF E6               [12] 1174 	mov	a,@r0
      0004D0 C4               [12] 1175 	swap	a
      0004D1 54 0F            [12] 1176 	anl	a,#0x0f
      0004D3 4D               [12] 1177 	orl	a,r5
      0004D4 FD               [12] 1178 	mov	r5,a
      0004D5 18               [12] 1179 	dec	r0
      0004D6 86 07            [24] 1180 	mov	ar7,@r0
      0004D8 08               [12] 1181 	inc	r0
      0004D9 E6               [12] 1182 	mov	a,@r0
      0004DA C4               [12] 1183 	swap	a
      0004DB 54 F0            [12] 1184 	anl	a,#0xf0
      0004DD CF               [12] 1185 	xch	a,r7
      0004DE C4               [12] 1186 	swap	a
      0004DF CF               [12] 1187 	xch	a,r7
      0004E0 6F               [12] 1188 	xrl	a,r7
      0004E1 CF               [12] 1189 	xch	a,r7
      0004E2 54 F0            [12] 1190 	anl	a,#0xf0
      0004E4 CF               [12] 1191 	xch	a,r7
      0004E5 6F               [12] 1192 	xrl	a,r7
      0004E6 FE               [12] 1193 	mov	r6,a
                                   1194 ;	main.c:375: S_boxes_out |= out_s_box;
      0004E7 E5*00            [12] 1195 	mov	a,_bp
      0004E9 24 0C            [12] 1196 	add	a,#0x0c
      0004EB F8               [12] 1197 	mov	r0,a
      0004EC A6 03            [24] 1198 	mov	@r0,ar3
      0004EE 08               [12] 1199 	inc	r0
      0004EF 76 00            [12] 1200 	mov	@r0,#0x00
      0004F1 08               [12] 1201 	inc	r0
      0004F2 76 00            [12] 1202 	mov	@r0,#0x00
      0004F4 08               [12] 1203 	inc	r0
      0004F5 76 00            [12] 1204 	mov	@r0,#0x00
      0004F7 E5*00            [12] 1205 	mov	a,_bp
      0004F9 24 0C            [12] 1206 	add	a,#0x0c
      0004FB F8               [12] 1207 	mov	r0,a
      0004FC E5*00            [12] 1208 	mov	a,_bp
      0004FE 24 04            [12] 1209 	add	a,#0x04
      000500 F9               [12] 1210 	mov	r1,a
      000501 E6               [12] 1211 	mov	a,@r0
      000502 4F               [12] 1212 	orl	a,r7
      000503 F7               [12] 1213 	mov	@r1,a
      000504 08               [12] 1214 	inc	r0
      000505 E6               [12] 1215 	mov	a,@r0
      000506 4E               [12] 1216 	orl	a,r6
      000507 09               [12] 1217 	inc	r1
      000508 F7               [12] 1218 	mov	@r1,a
      000509 08               [12] 1219 	inc	r0
      00050A E6               [12] 1220 	mov	a,@r0
      00050B 4D               [12] 1221 	orl	a,r5
      00050C 09               [12] 1222 	inc	r1
      00050D F7               [12] 1223 	mov	@r1,a
      00050E 08               [12] 1224 	inc	r0
      00050F E6               [12] 1225 	mov	a,@r0
      000510 4C               [12] 1226 	orl	a,r4
      000511 09               [12] 1227 	inc	r1
      000512 F7               [12] 1228 	mov	@r1,a
                                   1229 ;	main.c:356: for (j = 0; j < 8; j++){
      000513 E5*00            [12] 1230 	mov	a,_bp
      000515 24 10            [12] 1231 	add	a,#0x10
      000517 F8               [12] 1232 	mov	r0,a
      000518 06               [12] 1233 	inc	@r0
      000519 E5*00            [12] 1234 	mov	a,_bp
      00051B 24 10            [12] 1235 	add	a,#0x10
      00051D F8               [12] 1236 	mov	r0,a
      00051E B6 08 00         [24] 1237 	cjne	@r0,#0x08,00191$
      000521                       1238 00191$:
      000521 50 03            [24] 1239 	jnc	00192$
      000523 02r03r8E         [24] 1240 	ljmp	00116$
      000526                       1241 00192$:
                                   1242 ;	main.c:378: out_g->Half[0]=0;
      000526 A8*00            [24] 1243 	mov	r0,_bp
      000528 08               [12] 1244 	inc	r0
      000529 86 82            [24] 1245 	mov	dpl,@r0
      00052B 08               [12] 1246 	inc	r0
      00052C 86 83            [24] 1247 	mov	dph,@r0
      00052E 08               [12] 1248 	inc	r0
      00052F 86 F0            [24] 1249 	mov	b,@r0
      000531 E4               [12] 1250 	clr	a
      000532 12r00r00         [24] 1251 	lcall	__gptrput
      000535 A3               [24] 1252 	inc	dptr
      000536 12r00r00         [24] 1253 	lcall	__gptrput
      000539 A3               [24] 1254 	inc	dptr
      00053A 12r00r00         [24] 1255 	lcall	__gptrput
      00053D A3               [24] 1256 	inc	dptr
      00053E 12r00r00         [24] 1257 	lcall	__gptrput
                                   1258 ;	main.c:379: out_g->Half[1]=0;
      000541 A8*00            [24] 1259 	mov	r0,_bp
      000543 08               [12] 1260 	inc	r0
      000544 74 04            [12] 1261 	mov	a,#0x04
      000546 26               [12] 1262 	add	a,@r0
      000547 FA               [12] 1263 	mov	r2,a
      000548 E4               [12] 1264 	clr	a
      000549 08               [12] 1265 	inc	r0
      00054A 36               [12] 1266 	addc	a,@r0
      00054B FB               [12] 1267 	mov	r3,a
      00054C 08               [12] 1268 	inc	r0
      00054D 86 04            [24] 1269 	mov	ar4,@r0
      00054F 8A 82            [24] 1270 	mov	dpl,r2
      000551 8B 83            [24] 1271 	mov	dph,r3
      000553 8C F0            [24] 1272 	mov	b,r4
      000555 E4               [12] 1273 	clr	a
      000556 12r00r00         [24] 1274 	lcall	__gptrput
      000559 A3               [24] 1275 	inc	dptr
      00055A 12r00r00         [24] 1276 	lcall	__gptrput
      00055D A3               [24] 1277 	inc	dptr
      00055E 12r00r00         [24] 1278 	lcall	__gptrput
      000561 A3               [24] 1279 	inc	dptr
      000562 12r00r00         [24] 1280 	lcall	__gptrput
                                   1281 ;	main.c:381: for (i = 0 ;i <= 31 ; i++){
      000565 F5*10            [12] 1282 	mov	_i,a
      000567                       1283 00118$:
                                   1284 ;	main.c:382: temp = (uint8)(((S_boxes_out<<(p[i]-1)) & 0x80000000)>>31) ;//GET_BIT_ARRAY(S_boxes_out,(p[i] -1));
      000567 E5*10            [12] 1285 	mov	a,_i
      000569 90r03r18         [24] 1286 	mov	dptr,#_p
      00056C 93               [24] 1287 	movc	a,@a+dptr
      00056D FC               [12] 1288 	mov	r4,a
      00056E 1C               [12] 1289 	dec	r4
      00056F 8C F0            [24] 1290 	mov	b,r4
      000571 05 F0            [12] 1291 	inc	b
      000573 E5*00            [12] 1292 	mov	a,_bp
      000575 24 04            [12] 1293 	add	a,#0x04
      000577 F8               [12] 1294 	mov	r0,a
      000578 86 07            [24] 1295 	mov	ar7,@r0
      00057A 08               [12] 1296 	inc	r0
      00057B 86 06            [24] 1297 	mov	ar6,@r0
      00057D 08               [12] 1298 	inc	r0
      00057E 86 05            [24] 1299 	mov	ar5,@r0
      000580 08               [12] 1300 	inc	r0
      000581 86 04            [24] 1301 	mov	ar4,@r0
      000583 80 0C            [24] 1302 	sjmp	00194$
      000585                       1303 00193$:
      000585 EF               [12] 1304 	mov	a,r7
      000586 2F               [12] 1305 	add	a,r7
      000587 FF               [12] 1306 	mov	r7,a
      000588 EE               [12] 1307 	mov	a,r6
      000589 33               [12] 1308 	rlc	a
      00058A FE               [12] 1309 	mov	r6,a
      00058B ED               [12] 1310 	mov	a,r5
      00058C 33               [12] 1311 	rlc	a
      00058D FD               [12] 1312 	mov	r5,a
      00058E EC               [12] 1313 	mov	a,r4
      00058F 33               [12] 1314 	rlc	a
      000590 FC               [12] 1315 	mov	r4,a
      000591                       1316 00194$:
      000591 D5 F0 F1         [24] 1317 	djnz	b,00193$
      000594 53 04 80         [24] 1318 	anl	ar4,#0x80
      000597 EC               [12] 1319 	mov	a,r4
      000598 23               [12] 1320 	rl	a
      000599 54 01            [12] 1321 	anl	a,#0x01
      00059B FF               [12] 1322 	mov	r7,a
      00059C 7C 00            [12] 1323 	mov	r4,#0x00
      00059E 8F*11            [24] 1324 	mov	_temp,r7
                                   1325 ;	main.c:383: WRITE_BIT_ARRAY(out_g->Array[((i+32) / 8)],((i+32) % 8),temp); //
      0005A0 AB*10            [24] 1326 	mov	r3,_i
      0005A2 74 20            [12] 1327 	mov	a,#0x20
      0005A4 2B               [12] 1328 	add	a,r3
      0005A5 FF               [12] 1329 	mov	r7,a
      0005A6 E4               [12] 1330 	clr	a
      0005A7 3C               [12] 1331 	addc	a,r4
      0005A8 FE               [12] 1332 	mov	r6,a
      0005A9 C0 07            [24] 1333 	push	ar7
      0005AB C0 06            [24] 1334 	push	ar6
      0005AD 74 08            [12] 1335 	mov	a,#0x08
      0005AF C0 E0            [24] 1336 	push	acc
      0005B1 E4               [12] 1337 	clr	a
      0005B2 C0 E0            [24] 1338 	push	acc
      0005B4 8F 82            [24] 1339 	mov	dpl,r7
      0005B6 8E 83            [24] 1340 	mov	dph,r6
      0005B8 12r00r00         [24] 1341 	lcall	__divsint
      0005BB AA 82            [24] 1342 	mov	r2,dpl
      0005BD AC 83            [24] 1343 	mov	r4,dph
      0005BF 15 81            [12] 1344 	dec	sp
      0005C1 15 81            [12] 1345 	dec	sp
      0005C3 D0 06            [24] 1346 	pop	ar6
      0005C5 D0 07            [24] 1347 	pop	ar7
      0005C7 A8*00            [24] 1348 	mov	r0,_bp
      0005C9 08               [12] 1349 	inc	r0
      0005CA E5*00            [12] 1350 	mov	a,_bp
      0005CC 24 08            [12] 1351 	add	a,#0x08
      0005CE F9               [12] 1352 	mov	r1,a
      0005CF EA               [12] 1353 	mov	a,r2
      0005D0 26               [12] 1354 	add	a,@r0
      0005D1 F7               [12] 1355 	mov	@r1,a
      0005D2 EC               [12] 1356 	mov	a,r4
      0005D3 08               [12] 1357 	inc	r0
      0005D4 36               [12] 1358 	addc	a,@r0
      0005D5 09               [12] 1359 	inc	r1
      0005D6 F7               [12] 1360 	mov	@r1,a
      0005D7 08               [12] 1361 	inc	r0
      0005D8 E6               [12] 1362 	mov	a,@r0
      0005D9 09               [12] 1363 	inc	r1
      0005DA F7               [12] 1364 	mov	@r1,a
      0005DB 74 08            [12] 1365 	mov	a,#0x08
      0005DD C0 E0            [24] 1366 	push	acc
      0005DF E4               [12] 1367 	clr	a
      0005E0 C0 E0            [24] 1368 	push	acc
      0005E2 8F 82            [24] 1369 	mov	dpl,r7
      0005E4 8E 83            [24] 1370 	mov	dph,r6
      0005E6 12r00r00         [24] 1371 	lcall	__modsint
      0005E9 AF 82            [24] 1372 	mov	r7,dpl
      0005EB AE 83            [24] 1373 	mov	r6,dph
      0005ED 15 81            [12] 1374 	dec	sp
      0005EF 15 81            [12] 1375 	dec	sp
      0005F1 8F F0            [24] 1376 	mov	b,r7
      0005F3 05 F0            [12] 1377 	inc	b
      0005F5 7A 80            [12] 1378 	mov	r2,#0x80
      0005F7 E4               [12] 1379 	clr	a
      0005F8 FC               [12] 1380 	mov	r4,a
      0005F9 33               [12] 1381 	rlc	a
      0005FA 92 D2            [24] 1382 	mov	ov,c
      0005FC 80 08            [24] 1383 	sjmp	00196$
      0005FE                       1384 00195$:
      0005FE A2 D2            [12] 1385 	mov	c,ov
      000600 EC               [12] 1386 	mov	a,r4
      000601 13               [12] 1387 	rrc	a
      000602 FC               [12] 1388 	mov	r4,a
      000603 EA               [12] 1389 	mov	a,r2
      000604 13               [12] 1390 	rrc	a
      000605 FA               [12] 1391 	mov	r2,a
      000606                       1392 00196$:
      000606 D5 F0 F5         [24] 1393 	djnz	b,00195$
      000609 EA               [12] 1394 	mov	a,r2
      00060A F4               [12] 1395 	cpl	a
      00060B FA               [12] 1396 	mov	r2,a
      00060C E5*00            [12] 1397 	mov	a,_bp
      00060E 24 08            [12] 1398 	add	a,#0x08
      000610 F8               [12] 1399 	mov	r0,a
      000611 86 82            [24] 1400 	mov	dpl,@r0
      000613 08               [12] 1401 	inc	r0
      000614 86 83            [24] 1402 	mov	dph,@r0
      000616 08               [12] 1403 	inc	r0
      000617 86 F0            [24] 1404 	mov	b,@r0
      000619 12r00r00         [24] 1405 	lcall	__gptrget
      00061C 52 02            [12] 1406 	anl	ar2,a
      00061E AB*11            [24] 1407 	mov	r3,_temp
      000620 E4               [12] 1408 	clr	a
      000621 C3               [12] 1409 	clr	c
      000622 CB               [12] 1410 	xch	a,r3
      000623 13               [12] 1411 	rrc	a
      000624 CB               [12] 1412 	xch	a,r3
      000625 13               [12] 1413 	rrc	a
      000626 CB               [12] 1414 	xch	a,r3
      000627 FC               [12] 1415 	mov	r4,a
      000628 8F F0            [24] 1416 	mov	b,r7
      00062A 05 F0            [12] 1417 	inc	b
      00062C EC               [12] 1418 	mov	a,r4
      00062D 33               [12] 1419 	rlc	a
      00062E 92 D2            [24] 1420 	mov	ov,c
      000630 80 08            [24] 1421 	sjmp	00198$
      000632                       1422 00197$:
      000632 A2 D2            [12] 1423 	mov	c,ov
      000634 EC               [12] 1424 	mov	a,r4
      000635 13               [12] 1425 	rrc	a
      000636 FC               [12] 1426 	mov	r4,a
      000637 EB               [12] 1427 	mov	a,r3
      000638 13               [12] 1428 	rrc	a
      000639 FB               [12] 1429 	mov	r3,a
      00063A                       1430 00198$:
      00063A D5 F0 F5         [24] 1431 	djnz	b,00197$
      00063D EB               [12] 1432 	mov	a,r3
      00063E 42 02            [12] 1433 	orl	ar2,a
      000640 E5*00            [12] 1434 	mov	a,_bp
      000642 24 08            [12] 1435 	add	a,#0x08
      000644 F8               [12] 1436 	mov	r0,a
      000645 86 82            [24] 1437 	mov	dpl,@r0
      000647 08               [12] 1438 	inc	r0
      000648 86 83            [24] 1439 	mov	dph,@r0
      00064A 08               [12] 1440 	inc	r0
      00064B 86 F0            [24] 1441 	mov	b,@r0
      00064D EA               [12] 1442 	mov	a,r2
      00064E 12r00r00         [24] 1443 	lcall	__gptrput
                                   1444 ;	main.c:381: for (i = 0 ;i <= 31 ; i++){
      000651 05*10            [12] 1445 	inc	_i
      000653 E5*10            [12] 1446 	mov	a,_i
      000655 24 E0            [12] 1447 	add	a,#0xff - 0x1f
      000657 40 03            [24] 1448 	jc	00199$
      000659 02r05r67         [24] 1449 	ljmp	00118$
      00065C                       1450 00199$:
                                   1451 ;	main.c:386: }
      00065C 85*00 81         [24] 1452 	mov	sp,_bp
      00065F D0*00            [24] 1453 	pop	_bp
      000661 22               [24] 1454 	ret
                                   1455 ;------------------------------------------------------------
                                   1456 ;Allocation info for local variables in function 'rotate'
                                   1457 ;------------------------------------------------------------
                                   1458 ;round                     Allocated to stack - _bp -3
                                   1459 ;sub_key                   Allocated to stack - _bp -6
                                   1460 ;Key                       Allocated to stack - _bp +1
                                   1461 ;sloc0                     Allocated to stack - _bp +4
                                   1462 ;sloc1                     Allocated to stack - _bp +8
                                   1463 ;sloc2                     Allocated to stack - _bp +11
                                   1464 ;sloc3                     Allocated to stack - _bp +14
                                   1465 ;sloc4                     Allocated to stack - _bp +17
                                   1466 ;------------------------------------------------------------
                                   1467 ;	main.c:397: void rotate(DATA *Key,uint8 round,DATA *sub_key){ // arrr[]={ab,12,cd,45} temp |=ab >>temp =000000 ab >>> 00 00 ab 00
                                   1468 ;	-----------------------------------------
                                   1469 ;	 function rotate
                                   1470 ;	-----------------------------------------
      000662                       1471 _rotate:
      000662 C0*00            [24] 1472 	push	_bp
      000664 85 81*00         [24] 1473 	mov	_bp,sp
      000667 C0 82            [24] 1474 	push	dpl
      000669 C0 83            [24] 1475 	push	dph
      00066B C0 F0            [24] 1476 	push	b
      00066D E5 81            [12] 1477 	mov	a,sp
      00066F 24 11            [12] 1478 	add	a,#0x11
      000671 F5 81            [12] 1479 	mov	sp,a
                                   1480 ;	main.c:398: Temp = 0;
      000673 E4               [12] 1481 	clr	a
      000674 F5*12            [12] 1482 	mov	_Temp,a
      000676 F5*13            [12] 1483 	mov	(_Temp + 1),a
      000678 F5*14            [12] 1484 	mov	(_Temp + 2),a
      00067A F5*15            [12] 1485 	mov	(_Temp + 3),a
                                   1486 ;	main.c:399: for (i = 0 ; i<4 ; i++){
      00067C F5*10            [12] 1487 	mov	_i,a
      00067E                       1488 00113$:
                                   1489 ;	main.c:400: Temp <<=8;
      00067E 85*14*15         [24] 1490 	mov	(_Temp + 3),(_Temp + 2)
      000681 85*13*14         [24] 1491 	mov	(_Temp + 2),(_Temp + 1)
      000684 85*12*13         [24] 1492 	mov	(_Temp + 1),_Temp
      000687 75*12 00         [24] 1493 	mov	_Temp,#0x00
                                   1494 ;	main.c:401: Temp |= Key->Array[i];
      00068A A8*00            [24] 1495 	mov	r0,_bp
      00068C 08               [12] 1496 	inc	r0
      00068D E5*10            [12] 1497 	mov	a,_i
      00068F 26               [12] 1498 	add	a,@r0
      000690 FA               [12] 1499 	mov	r2,a
      000691 E4               [12] 1500 	clr	a
      000692 08               [12] 1501 	inc	r0
      000693 36               [12] 1502 	addc	a,@r0
      000694 FB               [12] 1503 	mov	r3,a
      000695 08               [12] 1504 	inc	r0
      000696 86 04            [24] 1505 	mov	ar4,@r0
      000698 8A 82            [24] 1506 	mov	dpl,r2
      00069A 8B 83            [24] 1507 	mov	dph,r3
      00069C 8C F0            [24] 1508 	mov	b,r4
      00069E 12r00r00         [24] 1509 	lcall	__gptrget
      0006A1 FA               [12] 1510 	mov	r2,a
      0006A2 E4               [12] 1511 	clr	a
      0006A3 FB               [12] 1512 	mov	r3,a
      0006A4 FC               [12] 1513 	mov	r4,a
      0006A5 FF               [12] 1514 	mov	r7,a
      0006A6 EA               [12] 1515 	mov	a,r2
      0006A7 42*12            [12] 1516 	orl	_Temp,a
      0006A9 EB               [12] 1517 	mov	a,r3
      0006AA 42*13            [12] 1518 	orl	(_Temp + 1),a
      0006AC EC               [12] 1519 	mov	a,r4
      0006AD 42*14            [12] 1520 	orl	(_Temp + 2),a
      0006AF EF               [12] 1521 	mov	a,r7
      0006B0 42*15            [12] 1522 	orl	(_Temp + 3),a
                                   1523 ;	main.c:399: for (i = 0 ; i<4 ; i++){
      0006B2 05*10            [12] 1524 	inc	_i
      0006B4 74 FC            [12] 1525 	mov	a,#0x100 - 0x04
      0006B6 25*10            [12] 1526 	add	a,_i
      0006B8 50 C4            [24] 1527 	jnc	00113$
                                   1528 ;	main.c:405: Temp &=0xfffffff0; // Temp = ab 12 cd 4 >>> (1)010 1011 0001 0010 1100 1101 0100 0000
      0006BA 53*12 F0         [24] 1529 	anl	_Temp,#0xf0
                                   1530 ;	main.c:406: temp = GET_BIT(Temp,31);
      0006BD E5*15            [12] 1531 	mov	a,(_Temp + 3)
      0006BF 23               [12] 1532 	rl	a
      0006C0 54 01            [12] 1533 	anl	a,#0x01
      0006C2 F5*11            [12] 1534 	mov	_temp,a
                                   1535 ;	main.c:407: Temp <<=1;
      0006C4 E5*12            [12] 1536 	mov	a,_Temp
      0006C6 25*12            [12] 1537 	add	a,_Temp
      0006C8 F5*12            [12] 1538 	mov	_Temp,a
      0006CA E5*13            [12] 1539 	mov	a,(_Temp + 1)
      0006CC 33               [12] 1540 	rlc	a
      0006CD F5*13            [12] 1541 	mov	(_Temp + 1),a
      0006CF E5*14            [12] 1542 	mov	a,(_Temp + 2)
      0006D1 33               [12] 1543 	rlc	a
      0006D2 F5*14            [12] 1544 	mov	(_Temp + 2),a
      0006D4 E5*15            [12] 1545 	mov	a,(_Temp + 3)
      0006D6 33               [12] 1546 	rlc	a
      0006D7 F5*15            [12] 1547 	mov	(_Temp + 3),a
                                   1548 ;	main.c:408: WRITE_BIT(Temp,4,temp);//Temp = 0101 0110 0010 0101 1001 1010 10(1)0 0000 >> 56 25 9a 90 >> 90 >>09
      0006D9 E5*00            [12] 1549 	mov	a,_bp
      0006DB 24 04            [12] 1550 	add	a,#0x04
      0006DD F8               [12] 1551 	mov	r0,a
      0006DE 74 EF            [12] 1552 	mov	a,#0xef
      0006E0 55*12            [12] 1553 	anl	a,_Temp
      0006E2 F6               [12] 1554 	mov	@r0,a
      0006E3 08               [12] 1555 	inc	r0
      0006E4 A6*13            [24] 1556 	mov	@r0,(_Temp + 1)
      0006E6 08               [12] 1557 	inc	r0
      0006E7 A6*14            [24] 1558 	mov	@r0,(_Temp + 2)
      0006E9 08               [12] 1559 	inc	r0
      0006EA A6*15            [24] 1560 	mov	@r0,(_Temp + 3)
      0006EC AD*11            [24] 1561 	mov	r5,_temp
      0006EE E4               [12] 1562 	clr	a
      0006EF CD               [12] 1563 	xch	a,r5
      0006F0 C4               [12] 1564 	swap	a
      0006F1 CD               [12] 1565 	xch	a,r5
      0006F2 6D               [12] 1566 	xrl	a,r5
      0006F3 CD               [12] 1567 	xch	a,r5
      0006F4 54 F0            [12] 1568 	anl	a,#0xf0
      0006F6 CD               [12] 1569 	xch	a,r5
      0006F7 6D               [12] 1570 	xrl	a,r5
      0006F8 FC               [12] 1571 	mov	r4,a
      0006F9 33               [12] 1572 	rlc	a
      0006FA 95 E0            [12] 1573 	subb	a,acc
      0006FC FE               [12] 1574 	mov	r6,a
      0006FD FF               [12] 1575 	mov	r7,a
      0006FE E5*00            [12] 1576 	mov	a,_bp
      000700 24 04            [12] 1577 	add	a,#0x04
      000702 F8               [12] 1578 	mov	r0,a
      000703 ED               [12] 1579 	mov	a,r5
      000704 46               [12] 1580 	orl	a,@r0
      000705 F5*12            [12] 1581 	mov	_Temp,a
      000707 EC               [12] 1582 	mov	a,r4
      000708 08               [12] 1583 	inc	r0
      000709 46               [12] 1584 	orl	a,@r0
      00070A F5*13            [12] 1585 	mov	(_Temp + 1),a
      00070C EE               [12] 1586 	mov	a,r6
      00070D 08               [12] 1587 	inc	r0
      00070E 46               [12] 1588 	orl	a,@r0
      00070F F5*14            [12] 1589 	mov	(_Temp + 2),a
      000711 EF               [12] 1590 	mov	a,r7
      000712 08               [12] 1591 	inc	r0
      000713 46               [12] 1592 	orl	a,@r0
      000714 F5*15            [12] 1593 	mov	(_Temp + 3),a
                                   1594 ;	main.c:410: for (i = 0 ; i<3 ; i++){
      000716 75*10 00         [24] 1595 	mov	_i,#0x00
                                   1596 ;	main.c:493: sub_key->Half[0] = Key->Half[0];
                                   1597 ;	main.c:410: for (i = 0 ; i<3 ; i++){
      000719                       1598 00115$:
                                   1599 ;	main.c:411: Key->Array[i]= (uint8)((Temp >> ((3-i)*8)) & 0x000000ff); //array={56,25,9a,90}
      000719 A8*00            [24] 1600 	mov	r0,_bp
      00071B 08               [12] 1601 	inc	r0
      00071C E5*00            [12] 1602 	mov	a,_bp
      00071E 24 04            [12] 1603 	add	a,#0x04
      000720 F9               [12] 1604 	mov	r1,a
      000721 E5*10            [12] 1605 	mov	a,_i
      000723 26               [12] 1606 	add	a,@r0
      000724 F7               [12] 1607 	mov	@r1,a
      000725 E4               [12] 1608 	clr	a
      000726 08               [12] 1609 	inc	r0
      000727 36               [12] 1610 	addc	a,@r0
      000728 09               [12] 1611 	inc	r1
      000729 F7               [12] 1612 	mov	@r1,a
      00072A 08               [12] 1613 	inc	r0
      00072B E6               [12] 1614 	mov	a,@r0
      00072C 09               [12] 1615 	inc	r1
      00072D F7               [12] 1616 	mov	@r1,a
      00072E 74 03            [12] 1617 	mov	a,#0x03
      000730 C3               [12] 1618 	clr	c
      000731 95*10            [12] 1619 	subb	a,_i
      000733 C4               [12] 1620 	swap	a
      000734 03               [12] 1621 	rr	a
      000735 54 F8            [12] 1622 	anl	a,#0xf8
      000737 FF               [12] 1623 	mov	r7,a
      000738 8F F0            [24] 1624 	mov	b,r7
      00073A 05 F0            [12] 1625 	inc	b
      00073C AC*12            [24] 1626 	mov	r4,_Temp
      00073E AD*13            [24] 1627 	mov	r5,(_Temp + 1)
      000740 AE*14            [24] 1628 	mov	r6,(_Temp + 2)
      000742 AF*15            [24] 1629 	mov	r7,(_Temp + 3)
      000744 80 0D            [24] 1630 	sjmp	00189$
      000746                       1631 00188$:
      000746 C3               [12] 1632 	clr	c
      000747 EF               [12] 1633 	mov	a,r7
      000748 13               [12] 1634 	rrc	a
      000749 FF               [12] 1635 	mov	r7,a
      00074A EE               [12] 1636 	mov	a,r6
      00074B 13               [12] 1637 	rrc	a
      00074C FE               [12] 1638 	mov	r6,a
      00074D ED               [12] 1639 	mov	a,r5
      00074E 13               [12] 1640 	rrc	a
      00074F FD               [12] 1641 	mov	r5,a
      000750 EC               [12] 1642 	mov	a,r4
      000751 13               [12] 1643 	rrc	a
      000752 FC               [12] 1644 	mov	r4,a
      000753                       1645 00189$:
      000753 D5 F0 F0         [24] 1646 	djnz	b,00188$
      000756 E5*00            [12] 1647 	mov	a,_bp
      000758 24 04            [12] 1648 	add	a,#0x04
      00075A F8               [12] 1649 	mov	r0,a
      00075B 86 82            [24] 1650 	mov	dpl,@r0
      00075D 08               [12] 1651 	inc	r0
      00075E 86 83            [24] 1652 	mov	dph,@r0
      000760 08               [12] 1653 	inc	r0
      000761 86 F0            [24] 1654 	mov	b,@r0
      000763 EC               [12] 1655 	mov	a,r4
      000764 12r00r00         [24] 1656 	lcall	__gptrput
                                   1657 ;	main.c:410: for (i = 0 ; i<3 ; i++){
      000767 05*10            [12] 1658 	inc	_i
      000769 74 FD            [12] 1659 	mov	a,#0x100 - 0x03
      00076B 25*10            [12] 1660 	add	a,_i
      00076D 50 AA            [24] 1661 	jnc	00115$
                                   1662 ;	main.c:413: Key->Array[3] &=0x0f;
      00076F A8*00            [24] 1663 	mov	r0,_bp
      000771 08               [12] 1664 	inc	r0
      000772 E5*00            [12] 1665 	mov	a,_bp
      000774 24 08            [12] 1666 	add	a,#0x08
      000776 F9               [12] 1667 	mov	r1,a
      000777 74 03            [12] 1668 	mov	a,#0x03
      000779 26               [12] 1669 	add	a,@r0
      00077A F7               [12] 1670 	mov	@r1,a
      00077B E4               [12] 1671 	clr	a
      00077C 08               [12] 1672 	inc	r0
      00077D 36               [12] 1673 	addc	a,@r0
      00077E 09               [12] 1674 	inc	r1
      00077F F7               [12] 1675 	mov	@r1,a
      000780 08               [12] 1676 	inc	r0
      000781 E6               [12] 1677 	mov	a,@r0
      000782 09               [12] 1678 	inc	r1
      000783 F7               [12] 1679 	mov	@r1,a
      000784 E5*00            [12] 1680 	mov	a,_bp
      000786 24 08            [12] 1681 	add	a,#0x08
      000788 F8               [12] 1682 	mov	r0,a
      000789 86 82            [24] 1683 	mov	dpl,@r0
      00078B 08               [12] 1684 	inc	r0
      00078C 86 83            [24] 1685 	mov	dph,@r0
      00078E 08               [12] 1686 	inc	r0
      00078F 86 F0            [24] 1687 	mov	b,@r0
      000791 12r00r00         [24] 1688 	lcall	__gptrget
      000794 FF               [12] 1689 	mov	r7,a
      000795 53 07 0F         [24] 1690 	anl	ar7,#0x0f
      000798 E5*00            [12] 1691 	mov	a,_bp
      00079A 24 08            [12] 1692 	add	a,#0x08
      00079C F8               [12] 1693 	mov	r0,a
      00079D 86 82            [24] 1694 	mov	dpl,@r0
      00079F 08               [12] 1695 	inc	r0
      0007A0 86 83            [24] 1696 	mov	dph,@r0
      0007A2 08               [12] 1697 	inc	r0
      0007A3 86 F0            [24] 1698 	mov	b,@r0
      0007A5 EF               [12] 1699 	mov	a,r7
      0007A6 12r00r00         [24] 1700 	lcall	__gptrput
                                   1701 ;	main.c:414: Key->Array[3] |= (uint8)(Temp  & 0x000000f0);
      0007A9 AF*12            [24] 1702 	mov	r7,_Temp
      0007AB 53 07 F0         [24] 1703 	anl	ar7,#0xf0
      0007AE E5*00            [12] 1704 	mov	a,_bp
      0007B0 24 08            [12] 1705 	add	a,#0x08
      0007B2 F8               [12] 1706 	mov	r0,a
      0007B3 86 82            [24] 1707 	mov	dpl,@r0
      0007B5 08               [12] 1708 	inc	r0
      0007B6 86 83            [24] 1709 	mov	dph,@r0
      0007B8 08               [12] 1710 	inc	r0
      0007B9 86 F0            [24] 1711 	mov	b,@r0
      0007BB 12r00r00         [24] 1712 	lcall	__gptrget
      0007BE 42 07            [12] 1713 	orl	ar7,a
      0007C0 E5*00            [12] 1714 	mov	a,_bp
      0007C2 24 08            [12] 1715 	add	a,#0x08
      0007C4 F8               [12] 1716 	mov	r0,a
      0007C5 86 82            [24] 1717 	mov	dpl,@r0
      0007C7 08               [12] 1718 	inc	r0
      0007C8 86 83            [24] 1719 	mov	dph,@r0
      0007CA 08               [12] 1720 	inc	r0
      0007CB 86 F0            [24] 1721 	mov	b,@r0
      0007CD EF               [12] 1722 	mov	a,r7
      0007CE 12r00r00         [24] 1723 	lcall	__gptrput
                                   1724 ;	main.c:418: Temp |= Key->Array[3];   //76543210
      0007D1 8F*12            [24] 1725 	mov	_Temp,r7
      0007D3 75*13 00         [24] 1726 	mov	(_Temp + 1),#0x00
      0007D6 75*14 00         [24] 1727 	mov	(_Temp + 2),#0x00
                                   1728 ;	main.c:419: Temp = Temp <<8;
      0007D9 85*14*15         [24] 1729 	mov	(_Temp + 3),(_Temp + 2)
      0007DC 85*13*14         [24] 1730 	mov	(_Temp + 2),(_Temp + 1)
      0007DF 85*12*13         [24] 1731 	mov	(_Temp + 1),_Temp
      0007E2 75*12 00         [24] 1732 	mov	_Temp,#0x00
                                   1733 ;	main.c:421: Temp |= Key->Array[4];   //20
      0007E5 A8*00            [24] 1734 	mov	r0,_bp
      0007E7 08               [12] 1735 	inc	r0
      0007E8 E5*00            [12] 1736 	mov	a,_bp
      0007EA 24 04            [12] 1737 	add	a,#0x04
      0007EC F9               [12] 1738 	mov	r1,a
      0007ED 74 04            [12] 1739 	mov	a,#0x04
      0007EF 26               [12] 1740 	add	a,@r0
      0007F0 F7               [12] 1741 	mov	@r1,a
      0007F1 E4               [12] 1742 	clr	a
      0007F2 08               [12] 1743 	inc	r0
      0007F3 36               [12] 1744 	addc	a,@r0
      0007F4 09               [12] 1745 	inc	r1
      0007F5 F7               [12] 1746 	mov	@r1,a
      0007F6 08               [12] 1747 	inc	r0
      0007F7 E6               [12] 1748 	mov	a,@r0
      0007F8 09               [12] 1749 	inc	r1
      0007F9 F7               [12] 1750 	mov	@r1,a
      0007FA E5*00            [12] 1751 	mov	a,_bp
      0007FC 24 04            [12] 1752 	add	a,#0x04
      0007FE F8               [12] 1753 	mov	r0,a
      0007FF 86 82            [24] 1754 	mov	dpl,@r0
      000801 08               [12] 1755 	inc	r0
      000802 86 83            [24] 1756 	mov	dph,@r0
      000804 08               [12] 1757 	inc	r0
      000805 86 F0            [24] 1758 	mov	b,@r0
      000807 12r00r00         [24] 1759 	lcall	__gptrget
      00080A FC               [12] 1760 	mov	r4,a
      00080B E4               [12] 1761 	clr	a
      00080C FD               [12] 1762 	mov	r5,a
      00080D FE               [12] 1763 	mov	r6,a
      00080E FF               [12] 1764 	mov	r7,a
      00080F EC               [12] 1765 	mov	a,r4
      000810 42*12            [12] 1766 	orl	_Temp,a
      000812 ED               [12] 1767 	mov	a,r5
      000813 42*13            [12] 1768 	orl	(_Temp + 1),a
      000815 EE               [12] 1769 	mov	a,r6
      000816 42*14            [12] 1770 	orl	(_Temp + 2),a
      000818 EF               [12] 1771 	mov	a,r7
      000819 42*15            [12] 1772 	orl	(_Temp + 3),a
                                   1773 ;	main.c:423: Temp = Temp <<8;
      00081B 85*14*15         [24] 1774 	mov	(_Temp + 3),(_Temp + 2)
      00081E 85*13*14         [24] 1775 	mov	(_Temp + 2),(_Temp + 1)
      000821 85*12*13         [24] 1776 	mov	(_Temp + 1),_Temp
      000824 75*12 00         [24] 1777 	mov	_Temp,#0x00
                                   1778 ;	main.c:424: Temp |= Key->Array[5];   //20
      000827 A8*00            [24] 1779 	mov	r0,_bp
      000829 08               [12] 1780 	inc	r0
      00082A E5*00            [12] 1781 	mov	a,_bp
      00082C 24 0B            [12] 1782 	add	a,#0x0b
      00082E F9               [12] 1783 	mov	r1,a
      00082F 74 05            [12] 1784 	mov	a,#0x05
      000831 26               [12] 1785 	add	a,@r0
      000832 F7               [12] 1786 	mov	@r1,a
      000833 E4               [12] 1787 	clr	a
      000834 08               [12] 1788 	inc	r0
      000835 36               [12] 1789 	addc	a,@r0
      000836 09               [12] 1790 	inc	r1
      000837 F7               [12] 1791 	mov	@r1,a
      000838 08               [12] 1792 	inc	r0
      000839 E6               [12] 1793 	mov	a,@r0
      00083A 09               [12] 1794 	inc	r1
      00083B F7               [12] 1795 	mov	@r1,a
      00083C E5*00            [12] 1796 	mov	a,_bp
      00083E 24 0B            [12] 1797 	add	a,#0x0b
      000840 F8               [12] 1798 	mov	r0,a
      000841 86 82            [24] 1799 	mov	dpl,@r0
      000843 08               [12] 1800 	inc	r0
      000844 86 83            [24] 1801 	mov	dph,@r0
      000846 08               [12] 1802 	inc	r0
      000847 86 F0            [24] 1803 	mov	b,@r0
      000849 12r00r00         [24] 1804 	lcall	__gptrget
      00084C FA               [12] 1805 	mov	r2,a
      00084D E4               [12] 1806 	clr	a
      00084E FB               [12] 1807 	mov	r3,a
      00084F FC               [12] 1808 	mov	r4,a
      000850 FF               [12] 1809 	mov	r7,a
      000851 EA               [12] 1810 	mov	a,r2
      000852 42*12            [12] 1811 	orl	_Temp,a
      000854 EB               [12] 1812 	mov	a,r3
      000855 42*13            [12] 1813 	orl	(_Temp + 1),a
      000857 EC               [12] 1814 	mov	a,r4
      000858 42*14            [12] 1815 	orl	(_Temp + 2),a
      00085A EF               [12] 1816 	mov	a,r7
      00085B 42*15            [12] 1817 	orl	(_Temp + 3),a
                                   1818 ;	main.c:425: Temp = Temp <<8;
      00085D 85*14*15         [24] 1819 	mov	(_Temp + 3),(_Temp + 2)
      000860 85*13*14         [24] 1820 	mov	(_Temp + 2),(_Temp + 1)
      000863 85*12*13         [24] 1821 	mov	(_Temp + 1),_Temp
      000866 75*12 00         [24] 1822 	mov	_Temp,#0x00
                                   1823 ;	main.c:426: Temp |= Key->Array[6];	//28
      000869 A8*00            [24] 1824 	mov	r0,_bp
      00086B 08               [12] 1825 	inc	r0
      00086C E5*00            [12] 1826 	mov	a,_bp
      00086E 24 0E            [12] 1827 	add	a,#0x0e
      000870 F9               [12] 1828 	mov	r1,a
      000871 74 06            [12] 1829 	mov	a,#0x06
      000873 26               [12] 1830 	add	a,@r0
      000874 F7               [12] 1831 	mov	@r1,a
      000875 E4               [12] 1832 	clr	a
      000876 08               [12] 1833 	inc	r0
      000877 36               [12] 1834 	addc	a,@r0
      000878 09               [12] 1835 	inc	r1
      000879 F7               [12] 1836 	mov	@r1,a
      00087A 08               [12] 1837 	inc	r0
      00087B E6               [12] 1838 	mov	a,@r0
      00087C 09               [12] 1839 	inc	r1
      00087D F7               [12] 1840 	mov	@r1,a
      00087E E5*00            [12] 1841 	mov	a,_bp
      000880 24 0E            [12] 1842 	add	a,#0x0e
      000882 F8               [12] 1843 	mov	r0,a
      000883 86 82            [24] 1844 	mov	dpl,@r0
      000885 08               [12] 1845 	inc	r0
      000886 86 83            [24] 1846 	mov	dph,@r0
      000888 08               [12] 1847 	inc	r0
      000889 86 F0            [24] 1848 	mov	b,@r0
      00088B 12r00r00         [24] 1849 	lcall	__gptrget
      00088E FA               [12] 1850 	mov	r2,a
      00088F E4               [12] 1851 	clr	a
      000890 FB               [12] 1852 	mov	r3,a
      000891 FC               [12] 1853 	mov	r4,a
      000892 FF               [12] 1854 	mov	r7,a
      000893 EA               [12] 1855 	mov	a,r2
      000894 42*12            [12] 1856 	orl	_Temp,a
      000896 EB               [12] 1857 	mov	a,r3
      000897 42*13            [12] 1858 	orl	(_Temp + 1),a
      000899 EC               [12] 1859 	mov	a,r4
      00089A 42*14            [12] 1860 	orl	(_Temp + 2),a
      00089C EF               [12] 1861 	mov	a,r7
      00089D 42*15            [12] 1862 	orl	(_Temp + 3),a
                                   1863 ;	main.c:427: Temp= Temp <<4;
      00089F E5*15            [12] 1864 	mov	a,(_Temp + 3)
      0008A1 C4               [12] 1865 	swap	a
      0008A2 54 F0            [12] 1866 	anl	a,#0xf0
      0008A4 C5*14            [12] 1867 	xch	a,(_Temp + 2)
      0008A6 C4               [12] 1868 	swap	a
      0008A7 C5*14            [12] 1869 	xch	a,(_Temp + 2)
      0008A9 65*14            [12] 1870 	xrl	a,(_Temp + 2)
      0008AB C5*14            [12] 1871 	xch	a,(_Temp + 2)
      0008AD 54 F0            [12] 1872 	anl	a,#0xf0
      0008AF C5*14            [12] 1873 	xch	a,(_Temp + 2)
      0008B1 65*14            [12] 1874 	xrl	a,(_Temp + 2)
      0008B3 F5*15            [12] 1875 	mov	(_Temp + 3),a
      0008B5 E5*13            [12] 1876 	mov	a,(_Temp + 1)
      0008B7 C4               [12] 1877 	swap	a
      0008B8 54 0F            [12] 1878 	anl	a,#0x0f
      0008BA 45*14            [12] 1879 	orl	a,(_Temp + 2)
      0008BC F5*14            [12] 1880 	mov	(_Temp + 2),a
      0008BE E5*13            [12] 1881 	mov	a,(_Temp + 1)
      0008C0 C4               [12] 1882 	swap	a
      0008C1 54 F0            [12] 1883 	anl	a,#0xf0
      0008C3 C5*12            [12] 1884 	xch	a,_Temp
      0008C5 C4               [12] 1885 	swap	a
      0008C6 C5*12            [12] 1886 	xch	a,_Temp
      0008C8 65*12            [12] 1887 	xrl	a,_Temp
      0008CA C5*12            [12] 1888 	xch	a,_Temp
      0008CC 54 F0            [12] 1889 	anl	a,#0xf0
      0008CE C5*12            [12] 1890 	xch	a,_Temp
      0008D0 65*12            [12] 1891 	xrl	a,_Temp
      0008D2 F5*13            [12] 1892 	mov	(_Temp + 1),a
                                   1893 ;	main.c:431: temp = GET_BIT(Temp,31);//
      0008D4 E5*15            [12] 1894 	mov	a,(_Temp + 3)
      0008D6 23               [12] 1895 	rl	a
      0008D7 54 01            [12] 1896 	anl	a,#0x01
      0008D9 F5*11            [12] 1897 	mov	_temp,a
                                   1898 ;	main.c:432: Temp <<=1;//011 0001 0010 1100 1101 0100 0101 0000 0
      0008DB E5*12            [12] 1899 	mov	a,_Temp
      0008DD 25*12            [12] 1900 	add	a,_Temp
      0008DF F5*12            [12] 1901 	mov	_Temp,a
      0008E1 E5*13            [12] 1902 	mov	a,(_Temp + 1)
      0008E3 33               [12] 1903 	rlc	a
      0008E4 F5*13            [12] 1904 	mov	(_Temp + 1),a
      0008E6 E5*14            [12] 1905 	mov	a,(_Temp + 2)
      0008E8 33               [12] 1906 	rlc	a
      0008E9 F5*14            [12] 1907 	mov	(_Temp + 2),a
      0008EB E5*15            [12] 1908 	mov	a,(_Temp + 3)
      0008ED 33               [12] 1909 	rlc	a
      0008EE F5*15            [12] 1910 	mov	(_Temp + 3),a
                                   1911 ;	main.c:433: WRITE_BIT(Temp,4,temp);// 0110 0010 0101 1001 1010 1000 101(1) 0000 >> 62 59 a9 b0
      0008F0 E5*00            [12] 1912 	mov	a,_bp
      0008F2 24 11            [12] 1913 	add	a,#0x11
      0008F4 F8               [12] 1914 	mov	r0,a
      0008F5 74 EF            [12] 1915 	mov	a,#0xef
      0008F7 55*12            [12] 1916 	anl	a,_Temp
      0008F9 F6               [12] 1917 	mov	@r0,a
      0008FA 08               [12] 1918 	inc	r0
      0008FB A6*13            [24] 1919 	mov	@r0,(_Temp + 1)
      0008FD 08               [12] 1920 	inc	r0
      0008FE A6*14            [24] 1921 	mov	@r0,(_Temp + 2)
      000900 08               [12] 1922 	inc	r0
      000901 A6*15            [24] 1923 	mov	@r0,(_Temp + 3)
      000903 AA*11            [24] 1924 	mov	r2,_temp
      000905 E4               [12] 1925 	clr	a
      000906 CA               [12] 1926 	xch	a,r2
      000907 C4               [12] 1927 	swap	a
      000908 CA               [12] 1928 	xch	a,r2
      000909 6A               [12] 1929 	xrl	a,r2
      00090A CA               [12] 1930 	xch	a,r2
      00090B 54 F0            [12] 1931 	anl	a,#0xf0
      00090D CA               [12] 1932 	xch	a,r2
      00090E 6A               [12] 1933 	xrl	a,r2
      00090F FB               [12] 1934 	mov	r3,a
      000910 33               [12] 1935 	rlc	a
      000911 95 E0            [12] 1936 	subb	a,acc
      000913 FE               [12] 1937 	mov	r6,a
      000914 FF               [12] 1938 	mov	r7,a
      000915 E5*00            [12] 1939 	mov	a,_bp
      000917 24 11            [12] 1940 	add	a,#0x11
      000919 F8               [12] 1941 	mov	r0,a
      00091A EA               [12] 1942 	mov	a,r2
      00091B 46               [12] 1943 	orl	a,@r0
      00091C F5*12            [12] 1944 	mov	_Temp,a
      00091E EB               [12] 1945 	mov	a,r3
      00091F 08               [12] 1946 	inc	r0
      000920 46               [12] 1947 	orl	a,@r0
      000921 F5*13            [12] 1948 	mov	(_Temp + 1),a
      000923 EE               [12] 1949 	mov	a,r6
      000924 08               [12] 1950 	inc	r0
      000925 46               [12] 1951 	orl	a,@r0
      000926 F5*14            [12] 1952 	mov	(_Temp + 2),a
      000928 EF               [12] 1953 	mov	a,r7
      000929 08               [12] 1954 	inc	r0
      00092A 46               [12] 1955 	orl	a,@r0
      00092B F5*15            [12] 1956 	mov	(_Temp + 3),a
                                   1957 ;	main.c:435: Key->Array[3] &=0xf0;
      00092D E5*00            [12] 1958 	mov	a,_bp
      00092F 24 08            [12] 1959 	add	a,#0x08
      000931 F8               [12] 1960 	mov	r0,a
      000932 86 82            [24] 1961 	mov	dpl,@r0
      000934 08               [12] 1962 	inc	r0
      000935 86 83            [24] 1963 	mov	dph,@r0
      000937 08               [12] 1964 	inc	r0
      000938 86 F0            [24] 1965 	mov	b,@r0
      00093A 12r00r00         [24] 1966 	lcall	__gptrget
      00093D FF               [12] 1967 	mov	r7,a
      00093E 53 07 F0         [24] 1968 	anl	ar7,#0xf0
      000941 E5*00            [12] 1969 	mov	a,_bp
      000943 24 08            [12] 1970 	add	a,#0x08
      000945 F8               [12] 1971 	mov	r0,a
      000946 86 82            [24] 1972 	mov	dpl,@r0
      000948 08               [12] 1973 	inc	r0
      000949 86 83            [24] 1974 	mov	dph,@r0
      00094B 08               [12] 1975 	inc	r0
      00094C 86 F0            [24] 1976 	mov	b,@r0
      00094E EF               [12] 1977 	mov	a,r7
      00094F 12r00r00         [24] 1978 	lcall	__gptrput
                                   1979 ;	main.c:436: Key->Array[3] |= (uint8)((Temp)>>28); //62 59 a9 b0 >> 60 00 00 00 >>28 >>>> 00 00 00 06 >> 06
      000952 E5*15            [12] 1980 	mov	a,(_Temp + 3)
      000954 C4               [12] 1981 	swap	a
      000955 54 0F            [12] 1982 	anl	a,#0x0f
      000957 FC               [12] 1983 	mov	r4,a
      000958 E4               [12] 1984 	clr	a
      000959 FD               [12] 1985 	mov	r5,a
      00095A FE               [12] 1986 	mov	r6,a
      00095B E5*00            [12] 1987 	mov	a,_bp
      00095D 24 08            [12] 1988 	add	a,#0x08
      00095F F8               [12] 1989 	mov	r0,a
      000960 86 82            [24] 1990 	mov	dpl,@r0
      000962 08               [12] 1991 	inc	r0
      000963 86 83            [24] 1992 	mov	dph,@r0
      000965 08               [12] 1993 	inc	r0
      000966 86 F0            [24] 1994 	mov	b,@r0
      000968 12r00r00         [24] 1995 	lcall	__gptrget
      00096B FF               [12] 1996 	mov	r7,a
      00096C 42 04            [12] 1997 	orl	ar4,a
      00096E E5*00            [12] 1998 	mov	a,_bp
      000970 24 08            [12] 1999 	add	a,#0x08
      000972 F8               [12] 2000 	mov	r0,a
      000973 86 82            [24] 2001 	mov	dpl,@r0
      000975 08               [12] 2002 	inc	r0
      000976 86 83            [24] 2003 	mov	dph,@r0
      000978 08               [12] 2004 	inc	r0
      000979 86 F0            [24] 2005 	mov	b,@r0
      00097B EC               [12] 2006 	mov	a,r4
      00097C 12r00r00         [24] 2007 	lcall	__gptrput
                                   2008 ;	main.c:437: Temp <<=4; // Temp= 25 9a 9b 00 >> 00 00 00 25
      00097F E5*15            [12] 2009 	mov	a,(_Temp + 3)
      000981 C4               [12] 2010 	swap	a
      000982 54 F0            [12] 2011 	anl	a,#0xf0
      000984 C5*14            [12] 2012 	xch	a,(_Temp + 2)
      000986 C4               [12] 2013 	swap	a
      000987 C5*14            [12] 2014 	xch	a,(_Temp + 2)
      000989 65*14            [12] 2015 	xrl	a,(_Temp + 2)
      00098B C5*14            [12] 2016 	xch	a,(_Temp + 2)
      00098D 54 F0            [12] 2017 	anl	a,#0xf0
      00098F C5*14            [12] 2018 	xch	a,(_Temp + 2)
      000991 65*14            [12] 2019 	xrl	a,(_Temp + 2)
      000993 F5*15            [12] 2020 	mov	(_Temp + 3),a
      000995 E5*13            [12] 2021 	mov	a,(_Temp + 1)
      000997 C4               [12] 2022 	swap	a
      000998 54 0F            [12] 2023 	anl	a,#0x0f
      00099A 45*14            [12] 2024 	orl	a,(_Temp + 2)
      00099C F5*14            [12] 2025 	mov	(_Temp + 2),a
      00099E E5*13            [12] 2026 	mov	a,(_Temp + 1)
      0009A0 C4               [12] 2027 	swap	a
      0009A1 54 F0            [12] 2028 	anl	a,#0xf0
      0009A3 C5*12            [12] 2029 	xch	a,_Temp
      0009A5 C4               [12] 2030 	swap	a
      0009A6 C5*12            [12] 2031 	xch	a,_Temp
      0009A8 65*12            [12] 2032 	xrl	a,_Temp
      0009AA C5*12            [12] 2033 	xch	a,_Temp
      0009AC 54 F0            [12] 2034 	anl	a,#0xf0
      0009AE C5*12            [12] 2035 	xch	a,_Temp
      0009B0 65*12            [12] 2036 	xrl	a,_Temp
      0009B2 F5*13            [12] 2037 	mov	(_Temp + 1),a
                                   2038 ;	main.c:441: for (i = 4 ; i<8 ; i++){
      0009B4 75*10 04         [24] 2039 	mov	_i,#0x04
      0009B7                       2040 00117$:
                                   2041 ;	main.c:442: Key->Array[i]= (uint8)((Temp >> ((7-i)*8)) & 0x000000ff); //array={25,9a,9b,00}
      0009B7 A8*00            [24] 2042 	mov	r0,_bp
      0009B9 08               [12] 2043 	inc	r0
      0009BA E5*00            [12] 2044 	mov	a,_bp
      0009BC 24 11            [12] 2045 	add	a,#0x11
      0009BE F9               [12] 2046 	mov	r1,a
      0009BF E5*10            [12] 2047 	mov	a,_i
      0009C1 26               [12] 2048 	add	a,@r0
      0009C2 F7               [12] 2049 	mov	@r1,a
      0009C3 E4               [12] 2050 	clr	a
      0009C4 08               [12] 2051 	inc	r0
      0009C5 36               [12] 2052 	addc	a,@r0
      0009C6 09               [12] 2053 	inc	r1
      0009C7 F7               [12] 2054 	mov	@r1,a
      0009C8 08               [12] 2055 	inc	r0
      0009C9 E6               [12] 2056 	mov	a,@r0
      0009CA 09               [12] 2057 	inc	r1
      0009CB F7               [12] 2058 	mov	@r1,a
      0009CC 74 07            [12] 2059 	mov	a,#0x07
      0009CE C3               [12] 2060 	clr	c
      0009CF 95*10            [12] 2061 	subb	a,_i
      0009D1 C4               [12] 2062 	swap	a
      0009D2 03               [12] 2063 	rr	a
      0009D3 54 F8            [12] 2064 	anl	a,#0xf8
      0009D5 FC               [12] 2065 	mov	r4,a
      0009D6 8C F0            [24] 2066 	mov	b,r4
      0009D8 05 F0            [12] 2067 	inc	b
      0009DA AA*12            [24] 2068 	mov	r2,_Temp
      0009DC AB*13            [24] 2069 	mov	r3,(_Temp + 1)
      0009DE AC*14            [24] 2070 	mov	r4,(_Temp + 2)
      0009E0 AF*15            [24] 2071 	mov	r7,(_Temp + 3)
      0009E2 80 0D            [24] 2072 	sjmp	00192$
      0009E4                       2073 00191$:
      0009E4 C3               [12] 2074 	clr	c
      0009E5 EF               [12] 2075 	mov	a,r7
      0009E6 13               [12] 2076 	rrc	a
      0009E7 FF               [12] 2077 	mov	r7,a
      0009E8 EC               [12] 2078 	mov	a,r4
      0009E9 13               [12] 2079 	rrc	a
      0009EA FC               [12] 2080 	mov	r4,a
      0009EB EB               [12] 2081 	mov	a,r3
      0009EC 13               [12] 2082 	rrc	a
      0009ED FB               [12] 2083 	mov	r3,a
      0009EE EA               [12] 2084 	mov	a,r2
      0009EF 13               [12] 2085 	rrc	a
      0009F0 FA               [12] 2086 	mov	r2,a
      0009F1                       2087 00192$:
      0009F1 D5 F0 F0         [24] 2088 	djnz	b,00191$
      0009F4 E5*00            [12] 2089 	mov	a,_bp
      0009F6 24 11            [12] 2090 	add	a,#0x11
      0009F8 F8               [12] 2091 	mov	r0,a
      0009F9 86 82            [24] 2092 	mov	dpl,@r0
      0009FB 08               [12] 2093 	inc	r0
      0009FC 86 83            [24] 2094 	mov	dph,@r0
      0009FE 08               [12] 2095 	inc	r0
      0009FF 86 F0            [24] 2096 	mov	b,@r0
      000A01 EA               [12] 2097 	mov	a,r2
      000A02 12r00r00         [24] 2098 	lcall	__gptrput
                                   2099 ;	main.c:441: for (i = 4 ; i<8 ; i++){
      000A05 05*10            [12] 2100 	inc	_i
      000A07 74 F8            [12] 2101 	mov	a,#0x100 - 0x08
      000A09 25*10            [12] 2102 	add	a,_i
      000A0B 50 AA            [24] 2103 	jnc	00117$
                                   2104 ;	main.c:445: if ((round == 1) || (round == 2) || (round == 9) ||(round == 16)){
      000A0D E5*00            [12] 2105 	mov	a,_bp
      000A0F 24 FD            [12] 2106 	add	a,#0xfd
      000A11 F8               [12] 2107 	mov	r0,a
      000A12 B6 01 03         [24] 2108 	cjne	@r0,#0x01,00194$
      000A15 02r0Dr77         [24] 2109 	ljmp	00109$
      000A18                       2110 00194$:
      000A18 E5*00            [12] 2111 	mov	a,_bp
      000A1A 24 FD            [12] 2112 	add	a,#0xfd
      000A1C F8               [12] 2113 	mov	r0,a
      000A1D B6 02 03         [24] 2114 	cjne	@r0,#0x02,00195$
      000A20 02r0Dr77         [24] 2115 	ljmp	00109$
      000A23                       2116 00195$:
      000A23 E5*00            [12] 2117 	mov	a,_bp
      000A25 24 FD            [12] 2118 	add	a,#0xfd
      000A27 F8               [12] 2119 	mov	r0,a
      000A28 B6 09 03         [24] 2120 	cjne	@r0,#0x09,00196$
      000A2B 02r0Dr77         [24] 2121 	ljmp	00109$
      000A2E                       2122 00196$:
      000A2E E5*00            [12] 2123 	mov	a,_bp
      000A30 24 FD            [12] 2124 	add	a,#0xfd
      000A32 F8               [12] 2125 	mov	r0,a
      000A33 B6 10 03         [24] 2126 	cjne	@r0,#0x10,00197$
      000A36 02r0Dr77         [24] 2127 	ljmp	00109$
      000A39                       2128 00197$:
                                   2129 ;	main.c:450: for (i = 0 ; i<4 ; i++){
      000A39 75*10 00         [24] 2130 	mov	_i,#0x00
      000A3C                       2131 00119$:
                                   2132 ;	main.c:451: Temp <<=8;
      000A3C 85*14*15         [24] 2133 	mov	(_Temp + 3),(_Temp + 2)
      000A3F 85*13*14         [24] 2134 	mov	(_Temp + 2),(_Temp + 1)
      000A42 85*12*13         [24] 2135 	mov	(_Temp + 1),_Temp
      000A45 75*12 00         [24] 2136 	mov	_Temp,#0x00
                                   2137 ;	main.c:452: Temp |= Key->Array[i];
      000A48 A8*00            [24] 2138 	mov	r0,_bp
      000A4A 08               [12] 2139 	inc	r0
      000A4B E5*10            [12] 2140 	mov	a,_i
      000A4D 26               [12] 2141 	add	a,@r0
      000A4E FD               [12] 2142 	mov	r5,a
      000A4F E4               [12] 2143 	clr	a
      000A50 08               [12] 2144 	inc	r0
      000A51 36               [12] 2145 	addc	a,@r0
      000A52 FE               [12] 2146 	mov	r6,a
      000A53 08               [12] 2147 	inc	r0
      000A54 86 07            [24] 2148 	mov	ar7,@r0
      000A56 8D 82            [24] 2149 	mov	dpl,r5
      000A58 8E 83            [24] 2150 	mov	dph,r6
      000A5A 8F F0            [24] 2151 	mov	b,r7
      000A5C 12r00r00         [24] 2152 	lcall	__gptrget
      000A5F FD               [12] 2153 	mov	r5,a
      000A60 E4               [12] 2154 	clr	a
      000A61 FF               [12] 2155 	mov	r7,a
      000A62 FE               [12] 2156 	mov	r6,a
      000A63 FC               [12] 2157 	mov	r4,a
      000A64 ED               [12] 2158 	mov	a,r5
      000A65 42*12            [12] 2159 	orl	_Temp,a
      000A67 EF               [12] 2160 	mov	a,r7
      000A68 42*13            [12] 2161 	orl	(_Temp + 1),a
      000A6A EE               [12] 2162 	mov	a,r6
      000A6B 42*14            [12] 2163 	orl	(_Temp + 2),a
      000A6D EC               [12] 2164 	mov	a,r4
      000A6E 42*15            [12] 2165 	orl	(_Temp + 3),a
                                   2166 ;	main.c:450: for (i = 0 ; i<4 ; i++){
      000A70 05*10            [12] 2167 	inc	_i
      000A72 74 FC            [12] 2168 	mov	a,#0x100 - 0x04
      000A74 25*10            [12] 2169 	add	a,_i
      000A76 50 C4            [24] 2170 	jnc	00119$
                                   2171 ;	main.c:455: Temp &=0xfffffff0; // Temp = ab 12 cd 4 >>> (1)010 1011 0001 0010 1100 1101 0100 0000
      000A78 53*12 F0         [24] 2172 	anl	_Temp,#0xf0
                                   2173 ;	main.c:456: temp = GET_BIT(Temp,31);
      000A7B E5*15            [12] 2174 	mov	a,(_Temp + 3)
      000A7D 23               [12] 2175 	rl	a
      000A7E 54 01            [12] 2176 	anl	a,#0x01
      000A80 F5*11            [12] 2177 	mov	_temp,a
                                   2178 ;	main.c:457: Temp <<=1;
      000A82 E5*12            [12] 2179 	mov	a,_Temp
      000A84 25*12            [12] 2180 	add	a,_Temp
      000A86 F5*12            [12] 2181 	mov	_Temp,a
      000A88 E5*13            [12] 2182 	mov	a,(_Temp + 1)
      000A8A 33               [12] 2183 	rlc	a
      000A8B F5*13            [12] 2184 	mov	(_Temp + 1),a
      000A8D E5*14            [12] 2185 	mov	a,(_Temp + 2)
      000A8F 33               [12] 2186 	rlc	a
      000A90 F5*14            [12] 2187 	mov	(_Temp + 2),a
      000A92 E5*15            [12] 2188 	mov	a,(_Temp + 3)
      000A94 33               [12] 2189 	rlc	a
      000A95 F5*15            [12] 2190 	mov	(_Temp + 3),a
                                   2191 ;	main.c:458: WRITE_BIT(Temp,4,temp);//Temp = 0101 0110 0010 0101 1001 1010 10(1)0 0000 >> 56 25 9a 90 >> 90 >>09
      000A97 E5*00            [12] 2192 	mov	a,_bp
      000A99 24 11            [12] 2193 	add	a,#0x11
      000A9B F8               [12] 2194 	mov	r0,a
      000A9C 74 EF            [12] 2195 	mov	a,#0xef
      000A9E 55*12            [12] 2196 	anl	a,_Temp
      000AA0 F6               [12] 2197 	mov	@r0,a
      000AA1 08               [12] 2198 	inc	r0
      000AA2 A6*13            [24] 2199 	mov	@r0,(_Temp + 1)
      000AA4 08               [12] 2200 	inc	r0
      000AA5 A6*14            [24] 2201 	mov	@r0,(_Temp + 2)
      000AA7 08               [12] 2202 	inc	r0
      000AA8 A6*15            [24] 2203 	mov	@r0,(_Temp + 3)
      000AAA AA*11            [24] 2204 	mov	r2,_temp
      000AAC E4               [12] 2205 	clr	a
      000AAD CA               [12] 2206 	xch	a,r2
      000AAE C4               [12] 2207 	swap	a
      000AAF CA               [12] 2208 	xch	a,r2
      000AB0 6A               [12] 2209 	xrl	a,r2
      000AB1 CA               [12] 2210 	xch	a,r2
      000AB2 54 F0            [12] 2211 	anl	a,#0xf0
      000AB4 CA               [12] 2212 	xch	a,r2
      000AB5 6A               [12] 2213 	xrl	a,r2
      000AB6 FB               [12] 2214 	mov	r3,a
      000AB7 33               [12] 2215 	rlc	a
      000AB8 95 E0            [12] 2216 	subb	a,acc
      000ABA FE               [12] 2217 	mov	r6,a
      000ABB FF               [12] 2218 	mov	r7,a
      000ABC E5*00            [12] 2219 	mov	a,_bp
      000ABE 24 11            [12] 2220 	add	a,#0x11
      000AC0 F8               [12] 2221 	mov	r0,a
      000AC1 EA               [12] 2222 	mov	a,r2
      000AC2 46               [12] 2223 	orl	a,@r0
      000AC3 F5*12            [12] 2224 	mov	_Temp,a
      000AC5 EB               [12] 2225 	mov	a,r3
      000AC6 08               [12] 2226 	inc	r0
      000AC7 46               [12] 2227 	orl	a,@r0
      000AC8 F5*13            [12] 2228 	mov	(_Temp + 1),a
      000ACA EE               [12] 2229 	mov	a,r6
      000ACB 08               [12] 2230 	inc	r0
      000ACC 46               [12] 2231 	orl	a,@r0
      000ACD F5*14            [12] 2232 	mov	(_Temp + 2),a
      000ACF EF               [12] 2233 	mov	a,r7
      000AD0 08               [12] 2234 	inc	r0
      000AD1 46               [12] 2235 	orl	a,@r0
      000AD2 F5*15            [12] 2236 	mov	(_Temp + 3),a
                                   2237 ;	main.c:460: for (i = 0 ; i<3 ; i++){
      000AD4 75*10 00         [24] 2238 	mov	_i,#0x00
      000AD7                       2239 00121$:
                                   2240 ;	main.c:461: Key->Array[i]= (uint8)((Temp >> ((3-i)*8)) & 0x000000ff); //array={56,25,9a,90}
      000AD7 A8*00            [24] 2241 	mov	r0,_bp
      000AD9 08               [12] 2242 	inc	r0
      000ADA E5*00            [12] 2243 	mov	a,_bp
      000ADC 24 11            [12] 2244 	add	a,#0x11
      000ADE F9               [12] 2245 	mov	r1,a
      000ADF E5*10            [12] 2246 	mov	a,_i
      000AE1 26               [12] 2247 	add	a,@r0
      000AE2 F7               [12] 2248 	mov	@r1,a
      000AE3 E4               [12] 2249 	clr	a
      000AE4 08               [12] 2250 	inc	r0
      000AE5 36               [12] 2251 	addc	a,@r0
      000AE6 09               [12] 2252 	inc	r1
      000AE7 F7               [12] 2253 	mov	@r1,a
      000AE8 08               [12] 2254 	inc	r0
      000AE9 E6               [12] 2255 	mov	a,@r0
      000AEA 09               [12] 2256 	inc	r1
      000AEB F7               [12] 2257 	mov	@r1,a
      000AEC 74 03            [12] 2258 	mov	a,#0x03
      000AEE C3               [12] 2259 	clr	c
      000AEF 95*10            [12] 2260 	subb	a,_i
      000AF1 C4               [12] 2261 	swap	a
      000AF2 03               [12] 2262 	rr	a
      000AF3 54 F8            [12] 2263 	anl	a,#0xf8
      000AF5 FC               [12] 2264 	mov	r4,a
      000AF6 8C F0            [24] 2265 	mov	b,r4
      000AF8 05 F0            [12] 2266 	inc	b
      000AFA AA*12            [24] 2267 	mov	r2,_Temp
      000AFC AB*13            [24] 2268 	mov	r3,(_Temp + 1)
      000AFE AC*14            [24] 2269 	mov	r4,(_Temp + 2)
      000B00 AF*15            [24] 2270 	mov	r7,(_Temp + 3)
      000B02 80 0D            [24] 2271 	sjmp	00200$
      000B04                       2272 00199$:
      000B04 C3               [12] 2273 	clr	c
      000B05 EF               [12] 2274 	mov	a,r7
      000B06 13               [12] 2275 	rrc	a
      000B07 FF               [12] 2276 	mov	r7,a
      000B08 EC               [12] 2277 	mov	a,r4
      000B09 13               [12] 2278 	rrc	a
      000B0A FC               [12] 2279 	mov	r4,a
      000B0B EB               [12] 2280 	mov	a,r3
      000B0C 13               [12] 2281 	rrc	a
      000B0D FB               [12] 2282 	mov	r3,a
      000B0E EA               [12] 2283 	mov	a,r2
      000B0F 13               [12] 2284 	rrc	a
      000B10 FA               [12] 2285 	mov	r2,a
      000B11                       2286 00200$:
      000B11 D5 F0 F0         [24] 2287 	djnz	b,00199$
      000B14 E5*00            [12] 2288 	mov	a,_bp
      000B16 24 11            [12] 2289 	add	a,#0x11
      000B18 F8               [12] 2290 	mov	r0,a
      000B19 86 82            [24] 2291 	mov	dpl,@r0
      000B1B 08               [12] 2292 	inc	r0
      000B1C 86 83            [24] 2293 	mov	dph,@r0
      000B1E 08               [12] 2294 	inc	r0
      000B1F 86 F0            [24] 2295 	mov	b,@r0
      000B21 EA               [12] 2296 	mov	a,r2
      000B22 12r00r00         [24] 2297 	lcall	__gptrput
                                   2298 ;	main.c:460: for (i = 0 ; i<3 ; i++){
      000B25 05*10            [12] 2299 	inc	_i
      000B27 74 FD            [12] 2300 	mov	a,#0x100 - 0x03
      000B29 25*10            [12] 2301 	add	a,_i
      000B2B 50 AA            [24] 2302 	jnc	00121$
                                   2303 ;	main.c:463: Key->Array[3] &=0x0f;
      000B2D E5*00            [12] 2304 	mov	a,_bp
      000B2F 24 08            [12] 2305 	add	a,#0x08
      000B31 F8               [12] 2306 	mov	r0,a
      000B32 86 82            [24] 2307 	mov	dpl,@r0
      000B34 08               [12] 2308 	inc	r0
      000B35 86 83            [24] 2309 	mov	dph,@r0
      000B37 08               [12] 2310 	inc	r0
      000B38 86 F0            [24] 2311 	mov	b,@r0
      000B3A 12r00r00         [24] 2312 	lcall	__gptrget
      000B3D FF               [12] 2313 	mov	r7,a
      000B3E 53 07 0F         [24] 2314 	anl	ar7,#0x0f
      000B41 E5*00            [12] 2315 	mov	a,_bp
      000B43 24 08            [12] 2316 	add	a,#0x08
      000B45 F8               [12] 2317 	mov	r0,a
      000B46 86 82            [24] 2318 	mov	dpl,@r0
      000B48 08               [12] 2319 	inc	r0
      000B49 86 83            [24] 2320 	mov	dph,@r0
      000B4B 08               [12] 2321 	inc	r0
      000B4C 86 F0            [24] 2322 	mov	b,@r0
      000B4E EF               [12] 2323 	mov	a,r7
      000B4F 12r00r00         [24] 2324 	lcall	__gptrput
                                   2325 ;	main.c:464: Key->Array[3] |= (uint8)(Temp  & 0x000000f0);
      000B52 AF*12            [24] 2326 	mov	r7,_Temp
      000B54 53 07 F0         [24] 2327 	anl	ar7,#0xf0
      000B57 E5*00            [12] 2328 	mov	a,_bp
      000B59 24 08            [12] 2329 	add	a,#0x08
      000B5B F8               [12] 2330 	mov	r0,a
      000B5C 86 82            [24] 2331 	mov	dpl,@r0
      000B5E 08               [12] 2332 	inc	r0
      000B5F 86 83            [24] 2333 	mov	dph,@r0
      000B61 08               [12] 2334 	inc	r0
      000B62 86 F0            [24] 2335 	mov	b,@r0
      000B64 12r00r00         [24] 2336 	lcall	__gptrget
      000B67 42 07            [12] 2337 	orl	ar7,a
      000B69 E5*00            [12] 2338 	mov	a,_bp
      000B6B 24 08            [12] 2339 	add	a,#0x08
      000B6D F8               [12] 2340 	mov	r0,a
      000B6E 86 82            [24] 2341 	mov	dpl,@r0
      000B70 08               [12] 2342 	inc	r0
      000B71 86 83            [24] 2343 	mov	dph,@r0
      000B73 08               [12] 2344 	inc	r0
      000B74 86 F0            [24] 2345 	mov	b,@r0
      000B76 EF               [12] 2346 	mov	a,r7
      000B77 12r00r00         [24] 2347 	lcall	__gptrput
                                   2348 ;	main.c:468: Temp |= Key->Array[3];   //76543210
      000B7A 8F*12            [24] 2349 	mov	_Temp,r7
      000B7C 75*13 00         [24] 2350 	mov	(_Temp + 1),#0x00
      000B7F 75*14 00         [24] 2351 	mov	(_Temp + 2),#0x00
                                   2352 ;	main.c:469: Temp = Temp <<8;
      000B82 85*14*15         [24] 2353 	mov	(_Temp + 3),(_Temp + 2)
      000B85 85*13*14         [24] 2354 	mov	(_Temp + 2),(_Temp + 1)
      000B88 85*12*13         [24] 2355 	mov	(_Temp + 1),_Temp
      000B8B 75*12 00         [24] 2356 	mov	_Temp,#0x00
                                   2357 ;	main.c:471: Temp |= Key->Array[4];   //20
      000B8E E5*00            [12] 2358 	mov	a,_bp
      000B90 24 04            [12] 2359 	add	a,#0x04
      000B92 F8               [12] 2360 	mov	r0,a
      000B93 86 82            [24] 2361 	mov	dpl,@r0
      000B95 08               [12] 2362 	inc	r0
      000B96 86 83            [24] 2363 	mov	dph,@r0
      000B98 08               [12] 2364 	inc	r0
      000B99 86 F0            [24] 2365 	mov	b,@r0
      000B9B 12r00r00         [24] 2366 	lcall	__gptrget
      000B9E FF               [12] 2367 	mov	r7,a
      000B9F E4               [12] 2368 	clr	a
      000BA0 FE               [12] 2369 	mov	r6,a
      000BA1 FD               [12] 2370 	mov	r5,a
      000BA2 FC               [12] 2371 	mov	r4,a
      000BA3 EF               [12] 2372 	mov	a,r7
      000BA4 42*12            [12] 2373 	orl	_Temp,a
      000BA6 EE               [12] 2374 	mov	a,r6
      000BA7 42*13            [12] 2375 	orl	(_Temp + 1),a
      000BA9 ED               [12] 2376 	mov	a,r5
      000BAA 42*14            [12] 2377 	orl	(_Temp + 2),a
      000BAC EC               [12] 2378 	mov	a,r4
      000BAD 42*15            [12] 2379 	orl	(_Temp + 3),a
                                   2380 ;	main.c:473: Temp = Temp <<8;
      000BAF 85*14*15         [24] 2381 	mov	(_Temp + 3),(_Temp + 2)
      000BB2 85*13*14         [24] 2382 	mov	(_Temp + 2),(_Temp + 1)
      000BB5 85*12*13         [24] 2383 	mov	(_Temp + 1),_Temp
      000BB8 75*12 00         [24] 2384 	mov	_Temp,#0x00
                                   2385 ;	main.c:474: Temp |= Key->Array[5];   //20
      000BBB E5*00            [12] 2386 	mov	a,_bp
      000BBD 24 0B            [12] 2387 	add	a,#0x0b
      000BBF F8               [12] 2388 	mov	r0,a
      000BC0 86 82            [24] 2389 	mov	dpl,@r0
      000BC2 08               [12] 2390 	inc	r0
      000BC3 86 83            [24] 2391 	mov	dph,@r0
      000BC5 08               [12] 2392 	inc	r0
      000BC6 86 F0            [24] 2393 	mov	b,@r0
      000BC8 12r00r00         [24] 2394 	lcall	__gptrget
      000BCB FF               [12] 2395 	mov	r7,a
      000BCC E4               [12] 2396 	clr	a
      000BCD FE               [12] 2397 	mov	r6,a
      000BCE FD               [12] 2398 	mov	r5,a
      000BCF FC               [12] 2399 	mov	r4,a
      000BD0 EF               [12] 2400 	mov	a,r7
      000BD1 42*12            [12] 2401 	orl	_Temp,a
      000BD3 EE               [12] 2402 	mov	a,r6
      000BD4 42*13            [12] 2403 	orl	(_Temp + 1),a
      000BD6 ED               [12] 2404 	mov	a,r5
      000BD7 42*14            [12] 2405 	orl	(_Temp + 2),a
      000BD9 EC               [12] 2406 	mov	a,r4
      000BDA 42*15            [12] 2407 	orl	(_Temp + 3),a
                                   2408 ;	main.c:475: Temp = Temp <<8;
      000BDC 85*14*15         [24] 2409 	mov	(_Temp + 3),(_Temp + 2)
      000BDF 85*13*14         [24] 2410 	mov	(_Temp + 2),(_Temp + 1)
      000BE2 85*12*13         [24] 2411 	mov	(_Temp + 1),_Temp
      000BE5 75*12 00         [24] 2412 	mov	_Temp,#0x00
                                   2413 ;	main.c:476: Temp |= Key->Array[6];	//28
      000BE8 E5*00            [12] 2414 	mov	a,_bp
      000BEA 24 0E            [12] 2415 	add	a,#0x0e
      000BEC F8               [12] 2416 	mov	r0,a
      000BED 86 82            [24] 2417 	mov	dpl,@r0
      000BEF 08               [12] 2418 	inc	r0
      000BF0 86 83            [24] 2419 	mov	dph,@r0
      000BF2 08               [12] 2420 	inc	r0
      000BF3 86 F0            [24] 2421 	mov	b,@r0
      000BF5 12r00r00         [24] 2422 	lcall	__gptrget
      000BF8 FF               [12] 2423 	mov	r7,a
      000BF9 E4               [12] 2424 	clr	a
      000BFA FE               [12] 2425 	mov	r6,a
      000BFB FD               [12] 2426 	mov	r5,a
      000BFC FC               [12] 2427 	mov	r4,a
      000BFD EF               [12] 2428 	mov	a,r7
      000BFE 42*12            [12] 2429 	orl	_Temp,a
      000C00 EE               [12] 2430 	mov	a,r6
      000C01 42*13            [12] 2431 	orl	(_Temp + 1),a
      000C03 ED               [12] 2432 	mov	a,r5
      000C04 42*14            [12] 2433 	orl	(_Temp + 2),a
      000C06 EC               [12] 2434 	mov	a,r4
      000C07 42*15            [12] 2435 	orl	(_Temp + 3),a
                                   2436 ;	main.c:477: Temp= Temp <<4;
      000C09 E5*15            [12] 2437 	mov	a,(_Temp + 3)
      000C0B C4               [12] 2438 	swap	a
      000C0C 54 F0            [12] 2439 	anl	a,#0xf0
      000C0E C5*14            [12] 2440 	xch	a,(_Temp + 2)
      000C10 C4               [12] 2441 	swap	a
      000C11 C5*14            [12] 2442 	xch	a,(_Temp + 2)
      000C13 65*14            [12] 2443 	xrl	a,(_Temp + 2)
      000C15 C5*14            [12] 2444 	xch	a,(_Temp + 2)
      000C17 54 F0            [12] 2445 	anl	a,#0xf0
      000C19 C5*14            [12] 2446 	xch	a,(_Temp + 2)
      000C1B 65*14            [12] 2447 	xrl	a,(_Temp + 2)
      000C1D F5*15            [12] 2448 	mov	(_Temp + 3),a
      000C1F E5*13            [12] 2449 	mov	a,(_Temp + 1)
      000C21 C4               [12] 2450 	swap	a
      000C22 54 0F            [12] 2451 	anl	a,#0x0f
      000C24 45*14            [12] 2452 	orl	a,(_Temp + 2)
      000C26 F5*14            [12] 2453 	mov	(_Temp + 2),a
      000C28 E5*13            [12] 2454 	mov	a,(_Temp + 1)
      000C2A C4               [12] 2455 	swap	a
      000C2B 54 F0            [12] 2456 	anl	a,#0xf0
      000C2D C5*12            [12] 2457 	xch	a,_Temp
      000C2F C4               [12] 2458 	swap	a
      000C30 C5*12            [12] 2459 	xch	a,_Temp
      000C32 65*12            [12] 2460 	xrl	a,_Temp
      000C34 C5*12            [12] 2461 	xch	a,_Temp
      000C36 54 F0            [12] 2462 	anl	a,#0xf0
      000C38 C5*12            [12] 2463 	xch	a,_Temp
      000C3A 65*12            [12] 2464 	xrl	a,_Temp
      000C3C F5*13            [12] 2465 	mov	(_Temp + 1),a
                                   2466 ;	main.c:480: temp = GET_BIT(Temp,31);//
      000C3E E5*15            [12] 2467 	mov	a,(_Temp + 3)
      000C40 23               [12] 2468 	rl	a
      000C41 54 01            [12] 2469 	anl	a,#0x01
      000C43 F5*11            [12] 2470 	mov	_temp,a
                                   2471 ;	main.c:481: Temp <<=1;//011 0001 0010 1100 1101 0100 0101 0000 0
      000C45 E5*12            [12] 2472 	mov	a,_Temp
      000C47 25*12            [12] 2473 	add	a,_Temp
      000C49 F5*12            [12] 2474 	mov	_Temp,a
      000C4B E5*13            [12] 2475 	mov	a,(_Temp + 1)
      000C4D 33               [12] 2476 	rlc	a
      000C4E F5*13            [12] 2477 	mov	(_Temp + 1),a
      000C50 E5*14            [12] 2478 	mov	a,(_Temp + 2)
      000C52 33               [12] 2479 	rlc	a
      000C53 F5*14            [12] 2480 	mov	(_Temp + 2),a
      000C55 E5*15            [12] 2481 	mov	a,(_Temp + 3)
      000C57 33               [12] 2482 	rlc	a
      000C58 F5*15            [12] 2483 	mov	(_Temp + 3),a
                                   2484 ;	main.c:482: WRITE_BIT(Temp,4,temp);// 0110 0010 0101 1001 1010 1000 101(1) 0000 >> 62 59 a9 b0
      000C5A E5*00            [12] 2485 	mov	a,_bp
      000C5C 24 11            [12] 2486 	add	a,#0x11
      000C5E F8               [12] 2487 	mov	r0,a
      000C5F 74 EF            [12] 2488 	mov	a,#0xef
      000C61 55*12            [12] 2489 	anl	a,_Temp
      000C63 F6               [12] 2490 	mov	@r0,a
      000C64 08               [12] 2491 	inc	r0
      000C65 A6*13            [24] 2492 	mov	@r0,(_Temp + 1)
      000C67 08               [12] 2493 	inc	r0
      000C68 A6*14            [24] 2494 	mov	@r0,(_Temp + 2)
      000C6A 08               [12] 2495 	inc	r0
      000C6B A6*15            [24] 2496 	mov	@r0,(_Temp + 3)
      000C6D AA*11            [24] 2497 	mov	r2,_temp
      000C6F E4               [12] 2498 	clr	a
      000C70 CA               [12] 2499 	xch	a,r2
      000C71 C4               [12] 2500 	swap	a
      000C72 CA               [12] 2501 	xch	a,r2
      000C73 6A               [12] 2502 	xrl	a,r2
      000C74 CA               [12] 2503 	xch	a,r2
      000C75 54 F0            [12] 2504 	anl	a,#0xf0
      000C77 CA               [12] 2505 	xch	a,r2
      000C78 6A               [12] 2506 	xrl	a,r2
      000C79 FB               [12] 2507 	mov	r3,a
      000C7A 33               [12] 2508 	rlc	a
      000C7B 95 E0            [12] 2509 	subb	a,acc
      000C7D FE               [12] 2510 	mov	r6,a
      000C7E FF               [12] 2511 	mov	r7,a
      000C7F E5*00            [12] 2512 	mov	a,_bp
      000C81 24 11            [12] 2513 	add	a,#0x11
      000C83 F8               [12] 2514 	mov	r0,a
      000C84 EA               [12] 2515 	mov	a,r2
      000C85 46               [12] 2516 	orl	a,@r0
      000C86 F5*12            [12] 2517 	mov	_Temp,a
      000C88 EB               [12] 2518 	mov	a,r3
      000C89 08               [12] 2519 	inc	r0
      000C8A 46               [12] 2520 	orl	a,@r0
      000C8B F5*13            [12] 2521 	mov	(_Temp + 1),a
      000C8D EE               [12] 2522 	mov	a,r6
      000C8E 08               [12] 2523 	inc	r0
      000C8F 46               [12] 2524 	orl	a,@r0
      000C90 F5*14            [12] 2525 	mov	(_Temp + 2),a
      000C92 EF               [12] 2526 	mov	a,r7
      000C93 08               [12] 2527 	inc	r0
      000C94 46               [12] 2528 	orl	a,@r0
      000C95 F5*15            [12] 2529 	mov	(_Temp + 3),a
                                   2530 ;	main.c:484: Key->Array[3] &=0xf0;
      000C97 E5*00            [12] 2531 	mov	a,_bp
      000C99 24 08            [12] 2532 	add	a,#0x08
      000C9B F8               [12] 2533 	mov	r0,a
      000C9C 86 82            [24] 2534 	mov	dpl,@r0
      000C9E 08               [12] 2535 	inc	r0
      000C9F 86 83            [24] 2536 	mov	dph,@r0
      000CA1 08               [12] 2537 	inc	r0
      000CA2 86 F0            [24] 2538 	mov	b,@r0
      000CA4 12r00r00         [24] 2539 	lcall	__gptrget
      000CA7 FF               [12] 2540 	mov	r7,a
      000CA8 53 07 F0         [24] 2541 	anl	ar7,#0xf0
      000CAB E5*00            [12] 2542 	mov	a,_bp
      000CAD 24 08            [12] 2543 	add	a,#0x08
      000CAF F8               [12] 2544 	mov	r0,a
      000CB0 86 82            [24] 2545 	mov	dpl,@r0
      000CB2 08               [12] 2546 	inc	r0
      000CB3 86 83            [24] 2547 	mov	dph,@r0
      000CB5 08               [12] 2548 	inc	r0
      000CB6 86 F0            [24] 2549 	mov	b,@r0
      000CB8 EF               [12] 2550 	mov	a,r7
      000CB9 12r00r00         [24] 2551 	lcall	__gptrput
                                   2552 ;	main.c:485: Key->Array[3] |= (uint8)((Temp)>>28); //62 59 a9 b0 >> 60 00 00 00 >>28 >>>> 00 00 00 06 >> 06
      000CBC E5*15            [12] 2553 	mov	a,(_Temp + 3)
      000CBE C4               [12] 2554 	swap	a
      000CBF 54 0F            [12] 2555 	anl	a,#0x0f
      000CC1 FC               [12] 2556 	mov	r4,a
      000CC2 E4               [12] 2557 	clr	a
      000CC3 FD               [12] 2558 	mov	r5,a
      000CC4 FE               [12] 2559 	mov	r6,a
      000CC5 E5*00            [12] 2560 	mov	a,_bp
      000CC7 24 08            [12] 2561 	add	a,#0x08
      000CC9 F8               [12] 2562 	mov	r0,a
      000CCA 86 82            [24] 2563 	mov	dpl,@r0
      000CCC 08               [12] 2564 	inc	r0
      000CCD 86 83            [24] 2565 	mov	dph,@r0
      000CCF 08               [12] 2566 	inc	r0
      000CD0 86 F0            [24] 2567 	mov	b,@r0
      000CD2 12r00r00         [24] 2568 	lcall	__gptrget
      000CD5 FF               [12] 2569 	mov	r7,a
      000CD6 42 04            [12] 2570 	orl	ar4,a
      000CD8 E5*00            [12] 2571 	mov	a,_bp
      000CDA 24 08            [12] 2572 	add	a,#0x08
      000CDC F8               [12] 2573 	mov	r0,a
      000CDD 86 82            [24] 2574 	mov	dpl,@r0
      000CDF 08               [12] 2575 	inc	r0
      000CE0 86 83            [24] 2576 	mov	dph,@r0
      000CE2 08               [12] 2577 	inc	r0
      000CE3 86 F0            [24] 2578 	mov	b,@r0
      000CE5 EC               [12] 2579 	mov	a,r4
      000CE6 12r00r00         [24] 2580 	lcall	__gptrput
                                   2581 ;	main.c:486: Temp <<=4; // Temp= 25 9a 9b 00 >> 00 00 00 25
      000CE9 E5*15            [12] 2582 	mov	a,(_Temp + 3)
      000CEB C4               [12] 2583 	swap	a
      000CEC 54 F0            [12] 2584 	anl	a,#0xf0
      000CEE C5*14            [12] 2585 	xch	a,(_Temp + 2)
      000CF0 C4               [12] 2586 	swap	a
      000CF1 C5*14            [12] 2587 	xch	a,(_Temp + 2)
      000CF3 65*14            [12] 2588 	xrl	a,(_Temp + 2)
      000CF5 C5*14            [12] 2589 	xch	a,(_Temp + 2)
      000CF7 54 F0            [12] 2590 	anl	a,#0xf0
      000CF9 C5*14            [12] 2591 	xch	a,(_Temp + 2)
      000CFB 65*14            [12] 2592 	xrl	a,(_Temp + 2)
      000CFD F5*15            [12] 2593 	mov	(_Temp + 3),a
      000CFF E5*13            [12] 2594 	mov	a,(_Temp + 1)
      000D01 C4               [12] 2595 	swap	a
      000D02 54 0F            [12] 2596 	anl	a,#0x0f
      000D04 45*14            [12] 2597 	orl	a,(_Temp + 2)
      000D06 F5*14            [12] 2598 	mov	(_Temp + 2),a
      000D08 E5*13            [12] 2599 	mov	a,(_Temp + 1)
      000D0A C4               [12] 2600 	swap	a
      000D0B 54 F0            [12] 2601 	anl	a,#0xf0
      000D0D C5*12            [12] 2602 	xch	a,_Temp
      000D0F C4               [12] 2603 	swap	a
      000D10 C5*12            [12] 2604 	xch	a,_Temp
      000D12 65*12            [12] 2605 	xrl	a,_Temp
      000D14 C5*12            [12] 2606 	xch	a,_Temp
      000D16 54 F0            [12] 2607 	anl	a,#0xf0
      000D18 C5*12            [12] 2608 	xch	a,_Temp
      000D1A 65*12            [12] 2609 	xrl	a,_Temp
      000D1C F5*13            [12] 2610 	mov	(_Temp + 1),a
                                   2611 ;	main.c:487: for (i = 4 ; i<8 ; i++){
      000D1E 75*10 04         [24] 2612 	mov	_i,#0x04
      000D21                       2613 00123$:
                                   2614 ;	main.c:488: Key->Array[i]= (uint8)((Temp >> ((7-i)*8)) & 0x000000ff); //array={25,9a,9b,00}
      000D21 A8*00            [24] 2615 	mov	r0,_bp
      000D23 08               [12] 2616 	inc	r0
      000D24 E5*00            [12] 2617 	mov	a,_bp
      000D26 24 11            [12] 2618 	add	a,#0x11
      000D28 F9               [12] 2619 	mov	r1,a
      000D29 E5*10            [12] 2620 	mov	a,_i
      000D2B 26               [12] 2621 	add	a,@r0
      000D2C F7               [12] 2622 	mov	@r1,a
      000D2D E4               [12] 2623 	clr	a
      000D2E 08               [12] 2624 	inc	r0
      000D2F 36               [12] 2625 	addc	a,@r0
      000D30 09               [12] 2626 	inc	r1
      000D31 F7               [12] 2627 	mov	@r1,a
      000D32 08               [12] 2628 	inc	r0
      000D33 E6               [12] 2629 	mov	a,@r0
      000D34 09               [12] 2630 	inc	r1
      000D35 F7               [12] 2631 	mov	@r1,a
      000D36 74 07            [12] 2632 	mov	a,#0x07
      000D38 C3               [12] 2633 	clr	c
      000D39 95*10            [12] 2634 	subb	a,_i
      000D3B C4               [12] 2635 	swap	a
      000D3C 03               [12] 2636 	rr	a
      000D3D 54 F8            [12] 2637 	anl	a,#0xf8
      000D3F FC               [12] 2638 	mov	r4,a
      000D40 8C F0            [24] 2639 	mov	b,r4
      000D42 05 F0            [12] 2640 	inc	b
      000D44 AA*12            [24] 2641 	mov	r2,_Temp
      000D46 AB*13            [24] 2642 	mov	r3,(_Temp + 1)
      000D48 AC*14            [24] 2643 	mov	r4,(_Temp + 2)
      000D4A AF*15            [24] 2644 	mov	r7,(_Temp + 3)
      000D4C 80 0D            [24] 2645 	sjmp	00203$
      000D4E                       2646 00202$:
      000D4E C3               [12] 2647 	clr	c
      000D4F EF               [12] 2648 	mov	a,r7
      000D50 13               [12] 2649 	rrc	a
      000D51 FF               [12] 2650 	mov	r7,a
      000D52 EC               [12] 2651 	mov	a,r4
      000D53 13               [12] 2652 	rrc	a
      000D54 FC               [12] 2653 	mov	r4,a
      000D55 EB               [12] 2654 	mov	a,r3
      000D56 13               [12] 2655 	rrc	a
      000D57 FB               [12] 2656 	mov	r3,a
      000D58 EA               [12] 2657 	mov	a,r2
      000D59 13               [12] 2658 	rrc	a
      000D5A FA               [12] 2659 	mov	r2,a
      000D5B                       2660 00203$:
      000D5B D5 F0 F0         [24] 2661 	djnz	b,00202$
      000D5E E5*00            [12] 2662 	mov	a,_bp
      000D60 24 11            [12] 2663 	add	a,#0x11
      000D62 F8               [12] 2664 	mov	r0,a
      000D63 86 82            [24] 2665 	mov	dpl,@r0
      000D65 08               [12] 2666 	inc	r0
      000D66 86 83            [24] 2667 	mov	dph,@r0
      000D68 08               [12] 2668 	inc	r0
      000D69 86 F0            [24] 2669 	mov	b,@r0
      000D6B EA               [12] 2670 	mov	a,r2
      000D6C 12r00r00         [24] 2671 	lcall	__gptrput
                                   2672 ;	main.c:487: for (i = 4 ; i<8 ; i++){
      000D6F 05*10            [12] 2673 	inc	_i
      000D71 74 F8            [12] 2674 	mov	a,#0x100 - 0x08
      000D73 25*10            [12] 2675 	add	a,_i
      000D75 50 AA            [24] 2676 	jnc	00123$
      000D77                       2677 00109$:
                                   2678 ;	main.c:492: sub_key->Half[1] = Key->Half[1];
      000D77 E5*00            [12] 2679 	mov	a,_bp
      000D79 24 FA            [12] 2680 	add	a,#0xfa
      000D7B F8               [12] 2681 	mov	r0,a
      000D7C E5*00            [12] 2682 	mov	a,_bp
      000D7E 24 0E            [12] 2683 	add	a,#0x0e
      000D80 F9               [12] 2684 	mov	r1,a
      000D81 E6               [12] 2685 	mov	a,@r0
      000D82 F7               [12] 2686 	mov	@r1,a
      000D83 08               [12] 2687 	inc	r0
      000D84 E6               [12] 2688 	mov	a,@r0
      000D85 09               [12] 2689 	inc	r1
      000D86 F7               [12] 2690 	mov	@r1,a
      000D87 08               [12] 2691 	inc	r0
      000D88 E6               [12] 2692 	mov	a,@r0
      000D89 09               [12] 2693 	inc	r1
      000D8A F7               [12] 2694 	mov	@r1,a
      000D8B E5*00            [12] 2695 	mov	a,_bp
      000D8D 24 0E            [12] 2696 	add	a,#0x0e
      000D8F F8               [12] 2697 	mov	r0,a
      000D90 E5*00            [12] 2698 	mov	a,_bp
      000D92 24 11            [12] 2699 	add	a,#0x11
      000D94 F9               [12] 2700 	mov	r1,a
      000D95 74 04            [12] 2701 	mov	a,#0x04
      000D97 26               [12] 2702 	add	a,@r0
      000D98 F7               [12] 2703 	mov	@r1,a
      000D99 E4               [12] 2704 	clr	a
      000D9A 08               [12] 2705 	inc	r0
      000D9B 36               [12] 2706 	addc	a,@r0
      000D9C 09               [12] 2707 	inc	r1
      000D9D F7               [12] 2708 	mov	@r1,a
      000D9E 08               [12] 2709 	inc	r0
      000D9F E6               [12] 2710 	mov	a,@r0
      000DA0 09               [12] 2711 	inc	r1
      000DA1 F7               [12] 2712 	mov	@r1,a
      000DA2 A8*00            [24] 2713 	mov	r0,_bp
      000DA4 08               [12] 2714 	inc	r0
      000DA5 74 04            [12] 2715 	mov	a,#0x04
      000DA7 26               [12] 2716 	add	a,@r0
      000DA8 FA               [12] 2717 	mov	r2,a
      000DA9 E4               [12] 2718 	clr	a
      000DAA 08               [12] 2719 	inc	r0
      000DAB 36               [12] 2720 	addc	a,@r0
      000DAC FB               [12] 2721 	mov	r3,a
      000DAD 08               [12] 2722 	inc	r0
      000DAE 86 04            [24] 2723 	mov	ar4,@r0
      000DB0 8A 82            [24] 2724 	mov	dpl,r2
      000DB2 8B 83            [24] 2725 	mov	dph,r3
      000DB4 8C F0            [24] 2726 	mov	b,r4
      000DB6 12r00r00         [24] 2727 	lcall	__gptrget
      000DB9 FA               [12] 2728 	mov	r2,a
      000DBA A3               [24] 2729 	inc	dptr
      000DBB 12r00r00         [24] 2730 	lcall	__gptrget
      000DBE FB               [12] 2731 	mov	r3,a
      000DBF A3               [24] 2732 	inc	dptr
      000DC0 12r00r00         [24] 2733 	lcall	__gptrget
      000DC3 FC               [12] 2734 	mov	r4,a
      000DC4 A3               [24] 2735 	inc	dptr
      000DC5 12r00r00         [24] 2736 	lcall	__gptrget
      000DC8 FF               [12] 2737 	mov	r7,a
      000DC9 E5*00            [12] 2738 	mov	a,_bp
      000DCB 24 11            [12] 2739 	add	a,#0x11
      000DCD F8               [12] 2740 	mov	r0,a
      000DCE 86 82            [24] 2741 	mov	dpl,@r0
      000DD0 08               [12] 2742 	inc	r0
      000DD1 86 83            [24] 2743 	mov	dph,@r0
      000DD3 08               [12] 2744 	inc	r0
      000DD4 86 F0            [24] 2745 	mov	b,@r0
      000DD6 EA               [12] 2746 	mov	a,r2
      000DD7 12r00r00         [24] 2747 	lcall	__gptrput
      000DDA A3               [24] 2748 	inc	dptr
      000DDB EB               [12] 2749 	mov	a,r3
      000DDC 12r00r00         [24] 2750 	lcall	__gptrput
      000DDF A3               [24] 2751 	inc	dptr
      000DE0 EC               [12] 2752 	mov	a,r4
      000DE1 12r00r00         [24] 2753 	lcall	__gptrput
      000DE4 A3               [24] 2754 	inc	dptr
      000DE5 EF               [12] 2755 	mov	a,r7
      000DE6 12r00r00         [24] 2756 	lcall	__gptrput
                                   2757 ;	main.c:493: sub_key->Half[0] = Key->Half[0];
      000DE9 A8*00            [24] 2758 	mov	r0,_bp
      000DEB 08               [12] 2759 	inc	r0
      000DEC 86 82            [24] 2760 	mov	dpl,@r0
      000DEE 08               [12] 2761 	inc	r0
      000DEF 86 83            [24] 2762 	mov	dph,@r0
      000DF1 08               [12] 2763 	inc	r0
      000DF2 86 F0            [24] 2764 	mov	b,@r0
      000DF4 12r00r00         [24] 2765 	lcall	__gptrget
      000DF7 FD               [12] 2766 	mov	r5,a
      000DF8 A3               [24] 2767 	inc	dptr
      000DF9 12r00r00         [24] 2768 	lcall	__gptrget
      000DFC FE               [12] 2769 	mov	r6,a
      000DFD A3               [24] 2770 	inc	dptr
      000DFE 12r00r00         [24] 2771 	lcall	__gptrget
      000E01 FC               [12] 2772 	mov	r4,a
      000E02 A3               [24] 2773 	inc	dptr
      000E03 12r00r00         [24] 2774 	lcall	__gptrget
      000E06 FF               [12] 2775 	mov	r7,a
      000E07 E5*00            [12] 2776 	mov	a,_bp
      000E09 24 0E            [12] 2777 	add	a,#0x0e
      000E0B F8               [12] 2778 	mov	r0,a
      000E0C 86 82            [24] 2779 	mov	dpl,@r0
      000E0E 08               [12] 2780 	inc	r0
      000E0F 86 83            [24] 2781 	mov	dph,@r0
      000E11 08               [12] 2782 	inc	r0
      000E12 86 F0            [24] 2783 	mov	b,@r0
      000E14 ED               [12] 2784 	mov	a,r5
      000E15 12r00r00         [24] 2785 	lcall	__gptrput
      000E18 A3               [24] 2786 	inc	dptr
      000E19 EE               [12] 2787 	mov	a,r6
      000E1A 12r00r00         [24] 2788 	lcall	__gptrput
      000E1D A3               [24] 2789 	inc	dptr
      000E1E EC               [12] 2790 	mov	a,r4
      000E1F 12r00r00         [24] 2791 	lcall	__gptrput
      000E22 A3               [24] 2792 	inc	dptr
      000E23 EF               [12] 2793 	mov	a,r7
      000E24 12r00r00         [24] 2794 	lcall	__gptrput
                                   2795 ;	main.c:574: }
      000E27 85*00 81         [24] 2796 	mov	sp,_bp
      000E2A D0*00            [24] 2797 	pop	_bp
      000E2C 22               [24] 2798 	ret
                                   2799 ;------------------------------------------------------------
                                   2800 ;Allocation info for local variables in function 'main'
                                   2801 ;------------------------------------------------------------
                                   2802 ;cipher_text               Allocated to stack - _bp +17
                                   2803 ;round                     Allocated to stack - _bp +25
                                   2804 ;round_in                  Allocated to stack - _bp +26
                                   2805 ;subbkey                   Allocated to stack - _bp +34
                                   2806 ;key_56                    Allocated to stack - _bp +42
                                   2807 ;pc2_in                    Allocated to stack - _bp +50
                                   2808 ;temp2                     Allocated to registers 
                                   2809 ;sloc0                     Allocated to stack - _bp +1
                                   2810 ;sloc1                     Allocated to stack - _bp +2
                                   2811 ;sloc2                     Allocated to stack - _bp +3
                                   2812 ;sloc3                     Allocated to stack - _bp +4
                                   2813 ;sloc4                     Allocated to stack - _bp +5
                                   2814 ;sloc5                     Allocated to stack - _bp +6
                                   2815 ;sloc6                     Allocated to stack - _bp +7
                                   2816 ;sloc7                     Allocated to stack - _bp +10
                                   2817 ;sloc8                     Allocated to stack - _bp +13
                                   2818 ;------------------------------------------------------------
                                   2819 ;	main.c:585: int main(void){
                                   2820 ;	-----------------------------------------
                                   2821 ;	 function main
                                   2822 ;	-----------------------------------------
      000E2D                       2823 _main:
      000E2D C0*00            [24] 2824 	push	_bp
      000E2F E5 81            [12] 2825 	mov	a,sp
      000E31 F5*00            [12] 2826 	mov	_bp,a
      000E33 24 39            [12] 2827 	add	a,#0x39
      000E35 F5 81            [12] 2828 	mov	sp,a
                                   2829 ;	main.c:586: spi_init();
      000E37 12r00r0A         [24] 2830 	lcall	_spi_init
                                   2831 ;	main.c:587: SCON=0x50;
      000E3A 75 98 50         [24] 2832 	mov	_SCON,#0x50
                                   2833 ;	main.c:588: TMOD=0x20;
      000E3D 75 89 20         [24] 2834 	mov	_TMOD,#0x20
                                   2835 ;	main.c:589: TH1=-3;
      000E40 75 8D FD         [24] 2836 	mov	_TH1,#0xfd
                                   2837 ;	main.c:590: TL1=-3;
      000E43 75 8B FD         [24] 2838 	mov	_TL1,#0xfd
                                   2839 ;	main.c:591: TR1=1;
                                   2840 ;	assignBit
      000E46 D2 8E            [12] 2841 	setb	_TR1
                                   2842 ;	main.c:594: DATA cipher_text =  {.Array = {0,0,0,0,0,0,0,0}}; // cipher =  0x76 0x35 0x49 0xd3 0x8b 0x57 0xc 0xe
      000E48 E5*00            [12] 2843 	mov	a,_bp
      000E4A 24 11            [12] 2844 	add	a,#0x11
      000E4C F8               [12] 2845 	mov	r0,a
      000E4D 76 00            [12] 2846 	mov	@r0,#0x00
      000E4F A8*00            [24] 2847 	mov	r0,_bp
      000E51 08               [12] 2848 	inc	r0
      000E52 08               [12] 2849 	inc	r0
      000E53 E5*00            [12] 2850 	mov	a,_bp
      000E55 24 11            [12] 2851 	add	a,#0x11
      000E57 F6               [12] 2852 	mov	@r0,a
      000E58 A8*00            [24] 2853 	mov	r0,_bp
      000E5A 08               [12] 2854 	inc	r0
      000E5B 08               [12] 2855 	inc	r0
      000E5C E6               [12] 2856 	mov	a,@r0
      000E5D 04               [12] 2857 	inc	a
      000E5E F8               [12] 2858 	mov	r0,a
      000E5F 76 00            [12] 2859 	mov	@r0,#0x00
      000E61 A8*00            [24] 2860 	mov	r0,_bp
      000E63 08               [12] 2861 	inc	r0
      000E64 08               [12] 2862 	inc	r0
      000E65 74 02            [12] 2863 	mov	a,#0x02
      000E67 26               [12] 2864 	add	a,@r0
      000E68 F8               [12] 2865 	mov	r0,a
      000E69 76 00            [12] 2866 	mov	@r0,#0x00
      000E6B A8*00            [24] 2867 	mov	r0,_bp
      000E6D 08               [12] 2868 	inc	r0
      000E6E 08               [12] 2869 	inc	r0
      000E6F 74 03            [12] 2870 	mov	a,#0x03
      000E71 26               [12] 2871 	add	a,@r0
      000E72 F8               [12] 2872 	mov	r0,a
      000E73 76 00            [12] 2873 	mov	@r0,#0x00
      000E75 A8*00            [24] 2874 	mov	r0,_bp
      000E77 08               [12] 2875 	inc	r0
      000E78 08               [12] 2876 	inc	r0
      000E79 74 04            [12] 2877 	mov	a,#0x04
      000E7B 26               [12] 2878 	add	a,@r0
      000E7C F8               [12] 2879 	mov	r0,a
      000E7D 76 00            [12] 2880 	mov	@r0,#0x00
      000E7F A8*00            [24] 2881 	mov	r0,_bp
      000E81 08               [12] 2882 	inc	r0
      000E82 08               [12] 2883 	inc	r0
      000E83 74 05            [12] 2884 	mov	a,#0x05
      000E85 26               [12] 2885 	add	a,@r0
      000E86 F8               [12] 2886 	mov	r0,a
      000E87 76 00            [12] 2887 	mov	@r0,#0x00
      000E89 A8*00            [24] 2888 	mov	r0,_bp
      000E8B 08               [12] 2889 	inc	r0
      000E8C 08               [12] 2890 	inc	r0
      000E8D 74 06            [12] 2891 	mov	a,#0x06
      000E8F 26               [12] 2892 	add	a,@r0
      000E90 F8               [12] 2893 	mov	r0,a
      000E91 76 00            [12] 2894 	mov	@r0,#0x00
      000E93 A8*00            [24] 2895 	mov	r0,_bp
      000E95 08               [12] 2896 	inc	r0
      000E96 08               [12] 2897 	inc	r0
      000E97 74 07            [12] 2898 	mov	a,#0x07
      000E99 26               [12] 2899 	add	a,@r0
      000E9A F8               [12] 2900 	mov	r0,a
      000E9B 76 00            [12] 2901 	mov	@r0,#0x00
                                   2902 ;	main.c:597: SBUF = 'K';
      000E9D 75 99 4B         [24] 2903 	mov	_SBUF,#0x4b
                                   2904 ;	main.c:598: while (0 == TI);
      000EA0                       2905 00101$:
                                   2906 ;	main.c:599: TI = 0;
                                   2907 ;	assignBit
      000EA0 10 99 02         [24] 2908 	jbc	_TI,00368$
      000EA3 80 FB            [24] 2909 	sjmp	00101$
      000EA5                       2910 00368$:
                                   2911 ;	main.c:600: spi_delay();
      000EA5 12r00r00         [24] 2912 	lcall	_spi_delay
                                   2913 ;	main.c:601: SBUF = ':';
      000EA8 75 99 3A         [24] 2914 	mov	_SBUF,#0x3a
                                   2915 ;	main.c:602: while (0 == TI);
      000EAB                       2916 00104$:
                                   2917 ;	main.c:603: TI = 0;
                                   2918 ;	assignBit
      000EAB 10 99 02         [24] 2919 	jbc	_TI,00369$
      000EAE 80 FB            [24] 2920 	sjmp	00104$
      000EB0                       2921 00369$:
                                   2922 ;	main.c:604: spi_delay();
      000EB0 12r00r00         [24] 2923 	lcall	_spi_delay
                                   2924 ;	main.c:605: for (i=0 ; i<8;i++){
      000EB3 75*10 00         [24] 2925 	mov	_i,#0x00
                                   2926 ;	main.c:606: while(0==RI);
      000EB6                       2927 00107$:
      000EB6 30 98 FD         [24] 2928 	jnb	_RI,00107$
                                   2929 ;	main.c:607: temp = SBUF;
      000EB9 85 99*11         [24] 2930 	mov	_temp,_SBUF
                                   2931 ;	main.c:608: RI=0;
                                   2932 ;	assignBit
      000EBC C2 98            [12] 2933 	clr	_RI
                                   2934 ;	main.c:609: spi_delay();
      000EBE 12r00r00         [24] 2935 	lcall	_spi_delay
                                   2936 ;	main.c:610: SBUF = temp;
      000EC1 85*11 99         [24] 2937 	mov	_SBUF,_temp
                                   2938 ;	main.c:611: while(0==TI);
      000EC4                       2939 00110$:
                                   2940 ;	main.c:612: TI=0;
                                   2941 ;	assignBit
      000EC4 10 99 02         [24] 2942 	jbc	_TI,00371$
      000EC7 80 FB            [24] 2943 	sjmp	00110$
      000EC9                       2944 00371$:
                                   2945 ;	main.c:613: spi_delay();
      000EC9 12r00r00         [24] 2946 	lcall	_spi_delay
                                   2947 ;	main.c:614: temp -= 0x30;
      000ECC E5*11            [12] 2948 	mov	a,_temp
      000ECE 24 D0            [12] 2949 	add	a,#0xd0
                                   2950 ;	main.c:615: if(temp > 9 ){
      000ED0 F5*11            [12] 2951 	mov  _temp,a
      000ED2 24 F6            [12] 2952 	add	a,#0xff - 0x09
      000ED4 50 07            [24] 2953 	jnc	00114$
                                   2954 ;	main.c:616: temp -= 0x7;
      000ED6 E5*11            [12] 2955 	mov	a,_temp
      000ED8 FE               [12] 2956 	mov	r6,a
      000ED9 24 F9            [12] 2957 	add	a,#0xf9
      000EDB F5*11            [12] 2958 	mov	_temp,a
      000EDD                       2959 00114$:
                                   2960 ;	main.c:618: final_original_key.Array[i] = (temp<<4);
      000EDD E5*10            [12] 2961 	mov	a,_i
      000EDF 24r16            [12] 2962 	add	a,#_final_original_key
      000EE1 F9               [12] 2963 	mov	r1,a
      000EE2 E5*11            [12] 2964 	mov	a,_temp
      000EE4 C4               [12] 2965 	swap	a
      000EE5 54 F0            [12] 2966 	anl	a,#0xf0
      000EE7 F7               [12] 2967 	mov	@r1,a
                                   2968 ;	main.c:619: final_original_key.Array[i] &= 0xF0;
      000EE8 E5*10            [12] 2969 	mov	a,_i
      000EEA 24r16            [12] 2970 	add	a,#_final_original_key
      000EEC F9               [12] 2971 	mov	r1,a
      000EED E5*10            [12] 2972 	mov	a,_i
      000EEF 24r16            [12] 2973 	add	a,#_final_original_key
      000EF1 F8               [12] 2974 	mov	r0,a
      000EF2 86 06            [24] 2975 	mov	ar6,@r0
      000EF4 74 F0            [12] 2976 	mov	a,#0xf0
      000EF6 5E               [12] 2977 	anl	a,r6
      000EF7 F7               [12] 2978 	mov	@r1,a
                                   2979 ;	main.c:620: temp = 0;
      000EF8 75*11 00         [24] 2980 	mov	_temp,#0x00
                                   2981 ;	main.c:621: while(0==RI);
      000EFB                       2982 00115$:
      000EFB 30 98 FD         [24] 2983 	jnb	_RI,00115$
                                   2984 ;	main.c:622: temp = SBUF;
      000EFE 85 99*11         [24] 2985 	mov	_temp,_SBUF
                                   2986 ;	main.c:623: RI=0;
                                   2987 ;	assignBit
      000F01 C2 98            [12] 2988 	clr	_RI
                                   2989 ;	main.c:624: spi_delay();
      000F03 12r00r00         [24] 2990 	lcall	_spi_delay
                                   2991 ;	main.c:625: SBUF = temp;
      000F06 85*11 99         [24] 2992 	mov	_SBUF,_temp
                                   2993 ;	main.c:626: while(0==TI);
      000F09                       2994 00118$:
                                   2995 ;	main.c:627: TI=0;
                                   2996 ;	assignBit
      000F09 10 99 02         [24] 2997 	jbc	_TI,00374$
      000F0C 80 FB            [24] 2998 	sjmp	00118$
      000F0E                       2999 00374$:
                                   3000 ;	main.c:628: spi_delay();
      000F0E 12r00r00         [24] 3001 	lcall	_spi_delay
                                   3002 ;	main.c:629: temp -= 0x30;
      000F11 E5*11            [12] 3003 	mov	a,_temp
      000F13 24 D0            [12] 3004 	add	a,#0xd0
                                   3005 ;	main.c:630: if(temp > 9 ){
      000F15 F5*11            [12] 3006 	mov  _temp,a
      000F17 24 F6            [12] 3007 	add	a,#0xff - 0x09
      000F19 50 07            [24] 3008 	jnc	00122$
                                   3009 ;	main.c:631: temp -= 0x7;
      000F1B E5*11            [12] 3010 	mov	a,_temp
      000F1D FE               [12] 3011 	mov	r6,a
      000F1E 24 F9            [12] 3012 	add	a,#0xf9
      000F20 F5*11            [12] 3013 	mov	_temp,a
      000F22                       3014 00122$:
                                   3015 ;	main.c:633: final_original_key.Array[i] |= temp; 
      000F22 E5*10            [12] 3016 	mov	a,_i
      000F24 24r16            [12] 3017 	add	a,#_final_original_key
      000F26 F9               [12] 3018 	mov	r1,a
      000F27 E5*10            [12] 3019 	mov	a,_i
      000F29 24r16            [12] 3020 	add	a,#_final_original_key
      000F2B F8               [12] 3021 	mov	r0,a
      000F2C 86 06            [24] 3022 	mov	ar6,@r0
      000F2E E5*11            [12] 3023 	mov	a,_temp
      000F30 4E               [12] 3024 	orl	a,r6
      000F31 F7               [12] 3025 	mov	@r1,a
                                   3026 ;	main.c:605: for (i=0 ; i<8;i++){
      000F32 05*10            [12] 3027 	inc	_i
      000F34 74 F8            [12] 3028 	mov	a,#0x100 - 0x08
      000F36 25*10            [12] 3029 	add	a,_i
      000F38 40 03            [24] 3030 	jc	00376$
      000F3A 02r0ErB6         [24] 3031 	ljmp	00107$
      000F3D                       3032 00376$:
                                   3033 ;	main.c:636: spi_delay();
      000F3D 12r00r00         [24] 3034 	lcall	_spi_delay
                                   3035 ;	main.c:638: while(1){
      000F40                       3036 00163$:
                                   3037 ;	main.c:640: SBUF = '\n';
      000F40 75 99 0A         [24] 3038 	mov	_SBUF,#0x0a
                                   3039 ;	main.c:641: while (0 == TI);
      000F43                       3040 00124$:
                                   3041 ;	main.c:642: TI = 0;
                                   3042 ;	assignBit
      000F43 10 99 02         [24] 3043 	jbc	_TI,00377$
      000F46 80 FB            [24] 3044 	sjmp	00124$
      000F48                       3045 00377$:
                                   3046 ;	main.c:643: spi_delay();
      000F48 12r00r00         [24] 3047 	lcall	_spi_delay
                                   3048 ;	main.c:644: SBUF = 'P';
      000F4B 75 99 50         [24] 3049 	mov	_SBUF,#0x50
                                   3050 ;	main.c:645: while (0 == TI);
      000F4E                       3051 00127$:
                                   3052 ;	main.c:646: TI = 0;
                                   3053 ;	assignBit
      000F4E 10 99 02         [24] 3054 	jbc	_TI,00378$
      000F51 80 FB            [24] 3055 	sjmp	00127$
      000F53                       3056 00378$:
                                   3057 ;	main.c:647: spi_delay();
      000F53 12r00r00         [24] 3058 	lcall	_spi_delay
                                   3059 ;	main.c:648: SBUF = 'T';
      000F56 75 99 54         [24] 3060 	mov	_SBUF,#0x54
                                   3061 ;	main.c:649: while (0 == TI);
      000F59                       3062 00130$:
                                   3063 ;	main.c:650: TI = 0;
                                   3064 ;	assignBit
      000F59 10 99 02         [24] 3065 	jbc	_TI,00379$
      000F5C 80 FB            [24] 3066 	sjmp	00130$
      000F5E                       3067 00379$:
                                   3068 ;	main.c:651: spi_delay();
      000F5E 12r00r00         [24] 3069 	lcall	_spi_delay
                                   3070 ;	main.c:652: SBUF = ':';
      000F61 75 99 3A         [24] 3071 	mov	_SBUF,#0x3a
                                   3072 ;	main.c:653: while (0 == TI);
      000F64                       3073 00133$:
                                   3074 ;	main.c:654: TI = 0;
                                   3075 ;	assignBit
      000F64 10 99 02         [24] 3076 	jbc	_TI,00380$
      000F67 80 FB            [24] 3077 	sjmp	00133$
      000F69                       3078 00380$:
                                   3079 ;	main.c:655: spi_delay();
      000F69 12r00r00         [24] 3080 	lcall	_spi_delay
                                   3081 ;	main.c:658: for (i=0 ; i<8;i++){
      000F6C 75*10 00         [24] 3082 	mov	_i,#0x00
                                   3083 ;	main.c:659: while(0==RI);
      000F6F                       3084 00136$:
      000F6F 30 98 FD         [24] 3085 	jnb	_RI,00136$
                                   3086 ;	main.c:660: temp = SBUF;
      000F72 85 99*11         [24] 3087 	mov	_temp,_SBUF
                                   3088 ;	main.c:661: RI=0;
                                   3089 ;	assignBit
      000F75 C2 98            [12] 3090 	clr	_RI
                                   3091 ;	main.c:662: spi_delay();
      000F77 12r00r00         [24] 3092 	lcall	_spi_delay
                                   3093 ;	main.c:663: SBUF = temp;
      000F7A 85*11 99         [24] 3094 	mov	_SBUF,_temp
                                   3095 ;	main.c:664: while(0==TI);
      000F7D                       3096 00139$:
                                   3097 ;	main.c:665: TI=0;
                                   3098 ;	assignBit
      000F7D 10 99 02         [24] 3099 	jbc	_TI,00382$
      000F80 80 FB            [24] 3100 	sjmp	00139$
      000F82                       3101 00382$:
                                   3102 ;	main.c:666: spi_delay();
      000F82 12r00r00         [24] 3103 	lcall	_spi_delay
                                   3104 ;	main.c:667: cipher_text.Array[i] = temp;
      000F85 A8*00            [24] 3105 	mov	r0,_bp
      000F87 08               [12] 3106 	inc	r0
      000F88 08               [12] 3107 	inc	r0
      000F89 E5*10            [12] 3108 	mov	a,_i
      000F8B 26               [12] 3109 	add	a,@r0
      000F8C F8               [12] 3110 	mov	r0,a
      000F8D A6*11            [24] 3111 	mov	@r0,_temp
                                   3112 ;	main.c:668: temp = 0;
      000F8F 75*11 00         [24] 3113 	mov	_temp,#0x00
                                   3114 ;	main.c:658: for (i=0 ; i<8;i++){
      000F92 05*10            [12] 3115 	inc	_i
      000F94 74 F8            [12] 3116 	mov	a,#0x100 - 0x08
      000F96 25*10            [12] 3117 	add	a,_i
      000F98 50 D5            [24] 3118 	jnc	00136$
                                   3119 ;	main.c:670: spi_delay();
      000F9A 12r00r00         [24] 3120 	lcall	_spi_delay
                                   3121 ;	main.c:675: DATA round_in = {.Array = {0,0,0,0,0,0,0,0}};
      000F9D E5*00            [12] 3122 	mov	a,_bp
      000F9F 24 1A            [12] 3123 	add	a,#0x1a
      000FA1 F8               [12] 3124 	mov	r0,a
      000FA2 76 00            [12] 3125 	mov	@r0,#0x00
      000FA4 E5*00            [12] 3126 	mov	a,_bp
      000FA6 24 1A            [12] 3127 	add	a,#0x1a
      000FA8 FE               [12] 3128 	mov	r6,a
      000FA9 04               [12] 3129 	inc	a
      000FAA F8               [12] 3130 	mov	r0,a
      000FAB 76 00            [12] 3131 	mov	@r0,#0x00
      000FAD 74 02            [12] 3132 	mov	a,#0x02
      000FAF 2E               [12] 3133 	add	a,r6
      000FB0 F8               [12] 3134 	mov	r0,a
      000FB1 76 00            [12] 3135 	mov	@r0,#0x00
      000FB3 74 03            [12] 3136 	mov	a,#0x03
      000FB5 2E               [12] 3137 	add	a,r6
      000FB6 F8               [12] 3138 	mov	r0,a
      000FB7 76 00            [12] 3139 	mov	@r0,#0x00
      000FB9 74 04            [12] 3140 	mov	a,#0x04
      000FBB 2E               [12] 3141 	add	a,r6
      000FBC F8               [12] 3142 	mov	r0,a
      000FBD 76 00            [12] 3143 	mov	@r0,#0x00
      000FBF 74 05            [12] 3144 	mov	a,#0x05
      000FC1 2E               [12] 3145 	add	a,r6
      000FC2 F8               [12] 3146 	mov	r0,a
      000FC3 76 00            [12] 3147 	mov	@r0,#0x00
      000FC5 74 06            [12] 3148 	mov	a,#0x06
      000FC7 2E               [12] 3149 	add	a,r6
      000FC8 F8               [12] 3150 	mov	r0,a
      000FC9 76 00            [12] 3151 	mov	@r0,#0x00
      000FCB 74 07            [12] 3152 	mov	a,#0x07
      000FCD 2E               [12] 3153 	add	a,r6
      000FCE F8               [12] 3154 	mov	r0,a
      000FCF 76 00            [12] 3155 	mov	@r0,#0x00
                                   3156 ;	main.c:676: DATA subbkey = {.Array = {0,0,0,0,0,0,0,0}};
      000FD1 E5*00            [12] 3157 	mov	a,_bp
      000FD3 24 22            [12] 3158 	add	a,#0x22
      000FD5 F8               [12] 3159 	mov	r0,a
      000FD6 76 00            [12] 3160 	mov	@r0,#0x00
      000FD8 E5*00            [12] 3161 	mov	a,_bp
      000FDA 24 22            [12] 3162 	add	a,#0x22
      000FDC FE               [12] 3163 	mov	r6,a
      000FDD 04               [12] 3164 	inc	a
      000FDE F8               [12] 3165 	mov	r0,a
      000FDF 76 00            [12] 3166 	mov	@r0,#0x00
      000FE1 74 02            [12] 3167 	mov	a,#0x02
      000FE3 2E               [12] 3168 	add	a,r6
      000FE4 F8               [12] 3169 	mov	r0,a
      000FE5 76 00            [12] 3170 	mov	@r0,#0x00
      000FE7 74 03            [12] 3171 	mov	a,#0x03
      000FE9 2E               [12] 3172 	add	a,r6
      000FEA F8               [12] 3173 	mov	r0,a
      000FEB 76 00            [12] 3174 	mov	@r0,#0x00
      000FED 74 04            [12] 3175 	mov	a,#0x04
      000FEF 2E               [12] 3176 	add	a,r6
      000FF0 F8               [12] 3177 	mov	r0,a
      000FF1 76 00            [12] 3178 	mov	@r0,#0x00
      000FF3 74 05            [12] 3179 	mov	a,#0x05
      000FF5 2E               [12] 3180 	add	a,r6
      000FF6 F8               [12] 3181 	mov	r0,a
      000FF7 76 00            [12] 3182 	mov	@r0,#0x00
      000FF9 74 06            [12] 3183 	mov	a,#0x06
      000FFB 2E               [12] 3184 	add	a,r6
      000FFC F8               [12] 3185 	mov	r0,a
      000FFD 76 00            [12] 3186 	mov	@r0,#0x00
      000FFF 74 07            [12] 3187 	mov	a,#0x07
      001001 2E               [12] 3188 	add	a,r6
      001002 F8               [12] 3189 	mov	r0,a
      001003 76 00            [12] 3190 	mov	@r0,#0x00
                                   3191 ;	main.c:677: DATA key_56 = {.Array = {0,0,0,0,0,0,0,0}};
      001005 E5*00            [12] 3192 	mov	a,_bp
      001007 24 2A            [12] 3193 	add	a,#0x2a
      001009 F8               [12] 3194 	mov	r0,a
      00100A 76 00            [12] 3195 	mov	@r0,#0x00
      00100C E5*00            [12] 3196 	mov	a,_bp
      00100E 24 2A            [12] 3197 	add	a,#0x2a
      001010 FE               [12] 3198 	mov	r6,a
      001011 04               [12] 3199 	inc	a
      001012 F8               [12] 3200 	mov	r0,a
      001013 76 00            [12] 3201 	mov	@r0,#0x00
      001015 74 02            [12] 3202 	mov	a,#0x02
      001017 2E               [12] 3203 	add	a,r6
      001018 F8               [12] 3204 	mov	r0,a
      001019 76 00            [12] 3205 	mov	@r0,#0x00
      00101B 74 03            [12] 3206 	mov	a,#0x03
      00101D 2E               [12] 3207 	add	a,r6
      00101E F8               [12] 3208 	mov	r0,a
      00101F 76 00            [12] 3209 	mov	@r0,#0x00
      001021 74 04            [12] 3210 	mov	a,#0x04
      001023 2E               [12] 3211 	add	a,r6
      001024 F8               [12] 3212 	mov	r0,a
      001025 76 00            [12] 3213 	mov	@r0,#0x00
      001027 74 05            [12] 3214 	mov	a,#0x05
      001029 2E               [12] 3215 	add	a,r6
      00102A F8               [12] 3216 	mov	r0,a
      00102B 76 00            [12] 3217 	mov	@r0,#0x00
      00102D 74 06            [12] 3218 	mov	a,#0x06
      00102F 2E               [12] 3219 	add	a,r6
      001030 F8               [12] 3220 	mov	r0,a
      001031 76 00            [12] 3221 	mov	@r0,#0x00
      001033 74 07            [12] 3222 	mov	a,#0x07
      001035 2E               [12] 3223 	add	a,r6
      001036 F8               [12] 3224 	mov	r0,a
      001037 76 00            [12] 3225 	mov	@r0,#0x00
                                   3226 ;	main.c:678: DATA pc2_in = {.Array = {0,0,0,0,0,0,0,0}};
      001039 E5*00            [12] 3227 	mov	a,_bp
      00103B 24 32            [12] 3228 	add	a,#0x32
      00103D F8               [12] 3229 	mov	r0,a
      00103E 76 00            [12] 3230 	mov	@r0,#0x00
      001040 E5*00            [12] 3231 	mov	a,_bp
      001042 24 32            [12] 3232 	add	a,#0x32
      001044 FE               [12] 3233 	mov	r6,a
      001045 04               [12] 3234 	inc	a
      001046 F8               [12] 3235 	mov	r0,a
      001047 76 00            [12] 3236 	mov	@r0,#0x00
      001049 74 02            [12] 3237 	mov	a,#0x02
      00104B 2E               [12] 3238 	add	a,r6
      00104C F8               [12] 3239 	mov	r0,a
      00104D 76 00            [12] 3240 	mov	@r0,#0x00
      00104F 74 03            [12] 3241 	mov	a,#0x03
      001051 2E               [12] 3242 	add	a,r6
      001052 F8               [12] 3243 	mov	r0,a
      001053 76 00            [12] 3244 	mov	@r0,#0x00
      001055 74 04            [12] 3245 	mov	a,#0x04
      001057 2E               [12] 3246 	add	a,r6
      001058 F8               [12] 3247 	mov	r0,a
      001059 76 00            [12] 3248 	mov	@r0,#0x00
      00105B 74 05            [12] 3249 	mov	a,#0x05
      00105D 2E               [12] 3250 	add	a,r6
      00105E F8               [12] 3251 	mov	r0,a
      00105F 76 00            [12] 3252 	mov	@r0,#0x00
      001061 74 06            [12] 3253 	mov	a,#0x06
      001063 2E               [12] 3254 	add	a,r6
      001064 F8               [12] 3255 	mov	r0,a
      001065 76 00            [12] 3256 	mov	@r0,#0x00
      001067 74 07            [12] 3257 	mov	a,#0x07
      001069 2E               [12] 3258 	add	a,r6
      00106A F8               [12] 3259 	mov	r0,a
      00106B 76 00            [12] 3260 	mov	@r0,#0x00
                                   3261 ;	main.c:681: Permutation ( &cipher_text, &round_in, Basic_Permutation, ip);
      00106D E5*00            [12] 3262 	mov	a,_bp
      00106F 24 1A            [12] 3263 	add	a,#0x1a
      001071 F9               [12] 3264 	mov	r1,a
      001072 FC               [12] 3265 	mov	r4,a
      001073 7D 00            [12] 3266 	mov	r5,#0x00
      001075 7E 40            [12] 3267 	mov	r6,#0x40
      001077 E5*00            [12] 3268 	mov	a,_bp
      001079 24 11            [12] 3269 	add	a,#0x11
      00107B F8               [12] 3270 	mov	r0,a
      00107C FA               [12] 3271 	mov	r2,a
      00107D 7B 00            [12] 3272 	mov	r3,#0x00
      00107F 7F 40            [12] 3273 	mov	r7,#0x40
      001081 C0 01            [24] 3274 	push	ar1
      001083 C0 00            [24] 3275 	push	ar0
      001085 74r68            [12] 3276 	mov	a,#_ip
      001087 C0 E0            [24] 3277 	push	acc
      001089 74s00            [12] 3278 	mov	a,#(_ip >> 8)
      00108B C0 E0            [24] 3279 	push	acc
      00108D 74 80            [12] 3280 	mov	a,#0x80
      00108F C0 E0            [24] 3281 	push	acc
      001091 03               [12] 3282 	rr	a
      001092 C0 E0            [24] 3283 	push	acc
      001094 C0 04            [24] 3284 	push	ar4
      001096 C0 05            [24] 3285 	push	ar5
      001098 C0 06            [24] 3286 	push	ar6
      00109A 8A 82            [24] 3287 	mov	dpl,r2
      00109C 8B 83            [24] 3288 	mov	dph,r3
      00109E 8F F0            [24] 3289 	mov	b,r7
      0010A0 12r00r53         [24] 3290 	lcall	_Permutation
      0010A3 E5 81            [12] 3291 	mov	a,sp
      0010A5 24 F9            [12] 3292 	add	a,#0xf9
      0010A7 F5 81            [12] 3293 	mov	sp,a
      0010A9 D0 00            [24] 3294 	pop	ar0
      0010AB D0 01            [24] 3295 	pop	ar1
                                   3296 ;	main.c:682: for (i=0; i<8; i++){
      0010AD 75*10 00         [24] 3297 	mov	_i,#0x00
                                   3298 ;	main.c:746: for (i=0 ; i<8;i++){
                                   3299 ;	main.c:682: for (i=0; i<8; i++){
      0010B0                       3300 00169$:
                                   3301 ;	main.c:683: cipher_text.Array[i] = '0';
      0010B0 E5*10            [12] 3302 	mov	a,_i
      0010B2 28               [12] 3303 	add	a,r0
      0010B3 C0 00            [24] 3304 	push	ar0
      0010B5 F8               [12] 3305 	mov	r0,a
      0010B6 76 30            [12] 3306 	mov	@r0,#0x30
      0010B8 D0 00            [24] 3307 	pop	ar0
                                   3308 ;	main.c:682: for (i=0; i<8; i++){
      0010BA 05*10            [12] 3309 	inc	_i
      0010BC 74 F8            [12] 3310 	mov	a,#0x100 - 0x08
      0010BE 25*10            [12] 3311 	add	a,_i
      0010C0 50 EE            [24] 3312 	jnc	00169$
                                   3313 ;	main.c:687: Permutation ( &final_original_key, &key_56,Pc1,pc1);
      0010C2 E5*00            [12] 3314 	mov	a,_bp
      0010C4 24 2A            [12] 3315 	add	a,#0x2a
      0010C6 FE               [12] 3316 	mov	r6,a
      0010C7 FB               [12] 3317 	mov	r3,a
      0010C8 7C 00            [12] 3318 	mov	r4,#0x00
      0010CA 7D 40            [12] 3319 	mov	r5,#0x40
      0010CC C0 06            [24] 3320 	push	ar6
      0010CE C0 01            [24] 3321 	push	ar1
      0010D0 C0 00            [24] 3322 	push	ar0
      0010D2 74r00            [12] 3323 	mov	a,#_pc1
      0010D4 C0 E0            [24] 3324 	push	acc
      0010D6 74s00            [12] 3325 	mov	a,#(_pc1 >> 8)
      0010D8 C0 E0            [24] 3326 	push	acc
      0010DA 74 80            [12] 3327 	mov	a,#0x80
      0010DC C0 E0            [24] 3328 	push	acc
      0010DE 74 38            [12] 3329 	mov	a,#0x38
      0010E0 C0 E0            [24] 3330 	push	acc
      0010E2 C0 03            [24] 3331 	push	ar3
      0010E4 C0 04            [24] 3332 	push	ar4
      0010E6 C0 05            [24] 3333 	push	ar5
      0010E8 90r00r16         [24] 3334 	mov	dptr,#_final_original_key
      0010EB 75 F0 40         [24] 3335 	mov	b,#0x40
      0010EE 12r00r53         [24] 3336 	lcall	_Permutation
      0010F1 E5 81            [12] 3337 	mov	a,sp
      0010F3 24 F9            [12] 3338 	add	a,#0xf9
      0010F5 F5 81            [12] 3339 	mov	sp,a
      0010F7 D0 00            [24] 3340 	pop	ar0
      0010F9 D0 01            [24] 3341 	pop	ar1
      0010FB D0 06            [24] 3342 	pop	ar6
                                   3343 ;	main.c:690: for (round = 1 ; round < 17 ; round++){
      0010FD C0 00            [24] 3344 	push	ar0
      0010FF E5*00            [12] 3345 	mov	a,_bp
      001101 24 06            [12] 3346 	add	a,#0x06
      001103 F8               [12] 3347 	mov	r0,a
      001104 A6 06            [24] 3348 	mov	@r0,ar6
      001106 D0 00            [24] 3349 	pop	ar0
      001108 E5*00            [12] 3350 	mov	a,_bp
      00110A 24 22            [12] 3351 	add	a,#0x22
      00110C FC               [12] 3352 	mov	r4,a
      00110D C0 01            [24] 3353 	push	ar1
      00110F E5*00            [12] 3354 	mov	a,_bp
      001111 24 05            [12] 3355 	add	a,#0x05
      001113 F9               [12] 3356 	mov	r1,a
      001114 A7 00            [24] 3357 	mov	@r1,ar0
      001116 D0 01            [24] 3358 	pop	ar1
      001118 C0 00            [24] 3359 	push	ar0
      00111A E5*00            [12] 3360 	mov	a,_bp
      00111C 24 04            [12] 3361 	add	a,#0x04
      00111E F8               [12] 3362 	mov	r0,a
      00111F A6 04            [24] 3363 	mov	@r0,ar4
      001121 A8*00            [24] 3364 	mov	r0,_bp
      001123 08               [12] 3365 	inc	r0
      001124 A6 01            [24] 3366 	mov	@r0,ar1
      001126 E5*00            [12] 3367 	mov	a,_bp
      001128 24 19            [12] 3368 	add	a,#0x19
      00112A F8               [12] 3369 	mov	r0,a
      00112B 76 01            [12] 3370 	mov	@r0,#0x01
      00112D D0 00            [24] 3371 	pop	ar0
      00112F                       3372 00171$:
                                   3373 ;	main.c:692: rotate(&key_56,round,&pc2_in);
      00112F C0 00            [24] 3374 	push	ar0
      001131 E5*00            [12] 3375 	mov	a,_bp
      001133 24 03            [12] 3376 	add	a,#0x03
      001135 F8               [12] 3377 	mov	r0,a
      001136 E5*00            [12] 3378 	mov	a,_bp
      001138 24 32            [12] 3379 	add	a,#0x32
      00113A F6               [12] 3380 	mov	@r0,a
      00113B E5*00            [12] 3381 	mov	a,_bp
      00113D 24 03            [12] 3382 	add	a,#0x03
      00113F F8               [12] 3383 	mov	r0,a
      001140 C0 01            [24] 3384 	push	ar1
      001142 E5*00            [12] 3385 	mov	a,_bp
      001144 24 07            [12] 3386 	add	a,#0x07
      001146 F9               [12] 3387 	mov	r1,a
      001147 E6               [12] 3388 	mov	a,@r0
      001148 F7               [12] 3389 	mov	@r1,a
      001149 09               [12] 3390 	inc	r1
      00114A 77 00            [12] 3391 	mov	@r1,#0x00
      00114C 09               [12] 3392 	inc	r1
      00114D 77 40            [12] 3393 	mov	@r1,#0x40
      00114F D0 01            [24] 3394 	pop	ar1
      001151 E5*00            [12] 3395 	mov	a,_bp
      001153 24 06            [12] 3396 	add	a,#0x06
      001155 F8               [12] 3397 	mov	r0,a
      001156 86 03            [24] 3398 	mov	ar3,@r0
      001158 7D 00            [12] 3399 	mov	r5,#0x00
      00115A 7F 40            [12] 3400 	mov	r7,#0x40
      00115C D0 00            [24] 3401 	pop	ar0
      00115E C0 06            [24] 3402 	push	ar6
      001160 C0 04            [24] 3403 	push	ar4
      001162 C0 01            [24] 3404 	push	ar1
      001164 C0 00            [24] 3405 	push	ar0
      001166 85 00 F0         [24] 3406 	mov	b,ar0
      001169 E5*00            [12] 3407 	mov	a,_bp
      00116B 24 07            [12] 3408 	add	a,#0x07
      00116D F8               [12] 3409 	mov	r0,a
      00116E E6               [12] 3410 	mov	a,@r0
      00116F C0 E0            [24] 3411 	push	acc
      001171 08               [12] 3412 	inc	r0
      001172 E6               [12] 3413 	mov	a,@r0
      001173 C0 E0            [24] 3414 	push	acc
      001175 08               [12] 3415 	inc	r0
      001176 E6               [12] 3416 	mov	a,@r0
      001177 C0 E0            [24] 3417 	push	acc
      001179 A8 F0            [24] 3418 	mov	r0,b
      00117B 85 00 F0         [24] 3419 	mov	b,ar0
      00117E E5*00            [12] 3420 	mov	a,_bp
      001180 24 19            [12] 3421 	add	a,#0x19
      001182 F8               [12] 3422 	mov	r0,a
      001183 E6               [12] 3423 	mov	a,@r0
      001184 C0 E0            [24] 3424 	push	acc
      001186 8B 82            [24] 3425 	mov	dpl,r3
      001188 8D 83            [24] 3426 	mov	dph,r5
      00118A 8F F0            [24] 3427 	mov	b,r7
      00118C 12r06r62         [24] 3428 	lcall	_rotate
      00118F E5 81            [12] 3429 	mov	a,sp
      001191 24 FC            [12] 3430 	add	a,#0xfc
      001193 F5 81            [12] 3431 	mov	sp,a
      001195 D0 00            [24] 3432 	pop	ar0
      001197 D0 01            [24] 3433 	pop	ar1
      001199 D0 04            [24] 3434 	pop	ar4
      00119B D0 06            [24] 3435 	pop	ar6
                                   3436 ;	main.c:695: Permutation (&pc2_in,&subbkey,Pc2,pc2);
      00119D C0 00            [24] 3437 	push	ar0
      00119F E5*00            [12] 3438 	mov	a,_bp
      0011A1 24 07            [12] 3439 	add	a,#0x07
      0011A3 F8               [12] 3440 	mov	r0,a
      0011A4 A6 04            [24] 3441 	mov	@r0,ar4
      0011A6 08               [12] 3442 	inc	r0
      0011A7 76 00            [12] 3443 	mov	@r0,#0x00
      0011A9 08               [12] 3444 	inc	r0
      0011AA 76 40            [12] 3445 	mov	@r0,#0x40
      0011AC E5*00            [12] 3446 	mov	a,_bp
      0011AE 24 03            [12] 3447 	add	a,#0x03
      0011B0 F8               [12] 3448 	mov	r0,a
      0011B1 86 02            [24] 3449 	mov	ar2,@r0
      0011B3 D0 00            [24] 3450 	pop	ar0
      0011B5 C0 04            [24] 3451 	push	ar4
      0011B7 7C 00            [12] 3452 	mov	r4,#0x00
      0011B9 7F 40            [12] 3453 	mov	r7,#0x40
      0011BB C0 06            [24] 3454 	push	ar6
      0011BD C0 04            [24] 3455 	push	ar4
      0011BF C0 01            [24] 3456 	push	ar1
      0011C1 C0 00            [24] 3457 	push	ar0
      0011C3 74r38            [12] 3458 	mov	a,#_pc2
      0011C5 C0 E0            [24] 3459 	push	acc
      0011C7 74s00            [12] 3460 	mov	a,#(_pc2 >> 8)
      0011C9 C0 E0            [24] 3461 	push	acc
      0011CB 74 80            [12] 3462 	mov	a,#0x80
      0011CD C0 E0            [24] 3463 	push	acc
      0011CF 74 30            [12] 3464 	mov	a,#0x30
      0011D1 C0 E0            [24] 3465 	push	acc
      0011D3 85 00 F0         [24] 3466 	mov	b,ar0
      0011D6 E5*00            [12] 3467 	mov	a,_bp
      0011D8 24 07            [12] 3468 	add	a,#0x07
      0011DA F8               [12] 3469 	mov	r0,a
      0011DB E6               [12] 3470 	mov	a,@r0
      0011DC C0 E0            [24] 3471 	push	acc
      0011DE 08               [12] 3472 	inc	r0
      0011DF E6               [12] 3473 	mov	a,@r0
      0011E0 C0 E0            [24] 3474 	push	acc
      0011E2 08               [12] 3475 	inc	r0
      0011E3 E6               [12] 3476 	mov	a,@r0
      0011E4 C0 E0            [24] 3477 	push	acc
      0011E6 8A 82            [24] 3478 	mov	dpl,r2
      0011E8 8C 83            [24] 3479 	mov	dph,r4
      0011EA 8F F0            [24] 3480 	mov	b,r7
      0011EC 12r00r53         [24] 3481 	lcall	_Permutation
      0011EF E5 81            [12] 3482 	mov	a,sp
      0011F1 24 F9            [12] 3483 	add	a,#0xf9
      0011F3 F5 81            [12] 3484 	mov	sp,a
      0011F5 D0 00            [24] 3485 	pop	ar0
      0011F7 D0 01            [24] 3486 	pop	ar1
      0011F9 D0 04            [24] 3487 	pop	ar4
      0011FB D0 06            [24] 3488 	pop	ar6
                                   3489 ;	main.c:700: G_Function(&round_in,&subbkey,&cipher_text);
      0011FD C0 00            [24] 3490 	push	ar0
      0011FF E5*00            [12] 3491 	mov	a,_bp
      001201 24 05            [12] 3492 	add	a,#0x05
      001203 F8               [12] 3493 	mov	r0,a
      001204 C0 01            [24] 3494 	push	ar1
      001206 E5*00            [12] 3495 	mov	a,_bp
      001208 24 07            [12] 3496 	add	a,#0x07
      00120A F9               [12] 3497 	mov	r1,a
      00120B E6               [12] 3498 	mov	a,@r0
      00120C F7               [12] 3499 	mov	@r1,a
      00120D 09               [12] 3500 	inc	r1
      00120E 77 00            [12] 3501 	mov	@r1,#0x00
      001210 09               [12] 3502 	inc	r1
      001211 77 40            [12] 3503 	mov	@r1,#0x40
      001213 E5*00            [12] 3504 	mov	a,_bp
      001215 24 04            [12] 3505 	add	a,#0x04
      001217 F8               [12] 3506 	mov	r0,a
      001218 E5*00            [12] 3507 	mov	a,_bp
      00121A 24 0A            [12] 3508 	add	a,#0x0a
      00121C F9               [12] 3509 	mov	r1,a
      00121D E6               [12] 3510 	mov	a,@r0
      00121E F7               [12] 3511 	mov	@r1,a
      00121F 09               [12] 3512 	inc	r1
      001220 77 00            [12] 3513 	mov	@r1,#0x00
      001222 09               [12] 3514 	inc	r1
      001223 77 40            [12] 3515 	mov	@r1,#0x40
      001225 D0 01            [24] 3516 	pop	ar1
      001227 A8*00            [24] 3517 	mov	r0,_bp
      001229 08               [12] 3518 	inc	r0
      00122A 86 03            [24] 3519 	mov	ar3,@r0
      00122C 7D 00            [12] 3520 	mov	r5,#0x00
      00122E 7F 40            [12] 3521 	mov	r7,#0x40
      001230 D0 00            [24] 3522 	pop	ar0
      001232 C0 06            [24] 3523 	push	ar6
      001234 C0 04            [24] 3524 	push	ar4
      001236 C0 01            [24] 3525 	push	ar1
      001238 C0 00            [24] 3526 	push	ar0
      00123A 85 00 F0         [24] 3527 	mov	b,ar0
      00123D E5*00            [12] 3528 	mov	a,_bp
      00123F 24 07            [12] 3529 	add	a,#0x07
      001241 F8               [12] 3530 	mov	r0,a
      001242 E6               [12] 3531 	mov	a,@r0
      001243 C0 E0            [24] 3532 	push	acc
      001245 08               [12] 3533 	inc	r0
      001246 E6               [12] 3534 	mov	a,@r0
      001247 C0 E0            [24] 3535 	push	acc
      001249 08               [12] 3536 	inc	r0
      00124A E6               [12] 3537 	mov	a,@r0
      00124B C0 E0            [24] 3538 	push	acc
      00124D A8 F0            [24] 3539 	mov	r0,b
      00124F 85 00 F0         [24] 3540 	mov	b,ar0
      001252 E5*00            [12] 3541 	mov	a,_bp
      001254 24 0A            [12] 3542 	add	a,#0x0a
      001256 F8               [12] 3543 	mov	r0,a
      001257 E6               [12] 3544 	mov	a,@r0
      001258 C0 E0            [24] 3545 	push	acc
      00125A 08               [12] 3546 	inc	r0
      00125B E6               [12] 3547 	mov	a,@r0
      00125C C0 E0            [24] 3548 	push	acc
      00125E 08               [12] 3549 	inc	r0
      00125F E6               [12] 3550 	mov	a,@r0
      001260 C0 E0            [24] 3551 	push	acc
      001262 8B 82            [24] 3552 	mov	dpl,r3
      001264 8D 83            [24] 3553 	mov	dph,r5
      001266 8F F0            [24] 3554 	mov	b,r7
      001268 12r01rC7         [24] 3555 	lcall	_G_Function
      00126B E5 81            [12] 3556 	mov	a,sp
      00126D 24 FA            [12] 3557 	add	a,#0xfa
      00126F F5 81            [12] 3558 	mov	sp,a
      001271 D0 00            [24] 3559 	pop	ar0
      001273 D0 01            [24] 3560 	pop	ar1
      001275 D0 04            [24] 3561 	pop	ar4
      001277 D0 06            [24] 3562 	pop	ar6
                                   3563 ;	main.c:701: cipher_text.Half[1] = cipher_text.Half[1] ^ round_in.Half[0];
      001279 74 04            [12] 3564 	mov	a,#0x04
      00127B 28               [12] 3565 	add	a,r0
      00127C FF               [12] 3566 	mov	r7,a
      00127D C0 00            [24] 3567 	push	ar0
      00127F E5*00            [12] 3568 	mov	a,_bp
      001281 24 0D            [12] 3569 	add	a,#0x0d
      001283 F8               [12] 3570 	mov	r0,a
      001284 E7               [12] 3571 	mov	a,@r1
      001285 F6               [12] 3572 	mov	@r0,a
      001286 09               [12] 3573 	inc	r1
      001287 E7               [12] 3574 	mov	a,@r1
      001288 08               [12] 3575 	inc	r0
      001289 F6               [12] 3576 	mov	@r0,a
      00128A 09               [12] 3577 	inc	r1
      00128B E7               [12] 3578 	mov	a,@r1
      00128C 08               [12] 3579 	inc	r0
      00128D F6               [12] 3580 	mov	@r0,a
      00128E 09               [12] 3581 	inc	r1
      00128F E7               [12] 3582 	mov	a,@r1
      001290 08               [12] 3583 	inc	r0
      001291 F6               [12] 3584 	mov	@r0,a
      001292 19               [12] 3585 	dec	r1
      001293 19               [12] 3586 	dec	r1
      001294 19               [12] 3587 	dec	r1
      001295 A8 07            [24] 3588 	mov	r0,ar7
      001297 86 02            [24] 3589 	mov	ar2,@r0
      001299 08               [12] 3590 	inc	r0
      00129A 86 03            [24] 3591 	mov	ar3,@r0
      00129C 08               [12] 3592 	inc	r0
      00129D 86 04            [24] 3593 	mov	ar4,@r0
      00129F 08               [12] 3594 	inc	r0
      0012A0 86 05            [24] 3595 	mov	ar5,@r0
      0012A2 E5*00            [12] 3596 	mov	a,_bp
      0012A4 24 0D            [12] 3597 	add	a,#0x0d
      0012A6 F8               [12] 3598 	mov	r0,a
      0012A7 E6               [12] 3599 	mov	a,@r0
      0012A8 62 02            [12] 3600 	xrl	ar2,a
      0012AA 08               [12] 3601 	inc	r0
      0012AB E6               [12] 3602 	mov	a,@r0
      0012AC 62 03            [12] 3603 	xrl	ar3,a
      0012AE 08               [12] 3604 	inc	r0
      0012AF E6               [12] 3605 	mov	a,@r0
      0012B0 62 04            [12] 3606 	xrl	ar4,a
      0012B2 08               [12] 3607 	inc	r0
      0012B3 E6               [12] 3608 	mov	a,@r0
      0012B4 62 05            [12] 3609 	xrl	ar5,a
      0012B6 A8 07            [24] 3610 	mov	r0,ar7
      0012B8 A6 02            [24] 3611 	mov	@r0,ar2
      0012BA 08               [12] 3612 	inc	r0
      0012BB A6 03            [24] 3613 	mov	@r0,ar3
      0012BD 08               [12] 3614 	inc	r0
      0012BE A6 04            [24] 3615 	mov	@r0,ar4
      0012C0 08               [12] 3616 	inc	r0
      0012C1 A6 05            [24] 3617 	mov	@r0,ar5
                                   3618 ;	main.c:702: cipher_text.Half[0]  = round_in.Half[1];
      0012C3 E5*00            [12] 3619 	mov	a,_bp
      0012C5 24 0D            [12] 3620 	add	a,#0x0d
      0012C7 F8               [12] 3621 	mov	r0,a
      0012C8 74 04            [12] 3622 	mov	a,#0x04
      0012CA 29               [12] 3623 	add	a,r1
      0012CB F6               [12] 3624 	mov	@r0,a
      0012CC E5*00            [12] 3625 	mov	a,_bp
      0012CE 24 0D            [12] 3626 	add	a,#0x0d
      0012D0 F8               [12] 3627 	mov	r0,a
      0012D1 86 00            [24] 3628 	mov	ar0,@r0
      0012D3 86 02            [24] 3629 	mov	ar2,@r0
      0012D5 08               [12] 3630 	inc	r0
      0012D6 86 03            [24] 3631 	mov	ar3,@r0
      0012D8 08               [12] 3632 	inc	r0
      0012D9 86 04            [24] 3633 	mov	ar4,@r0
      0012DB 08               [12] 3634 	inc	r0
      0012DC 86 05            [24] 3635 	mov	ar5,@r0
      0012DE 18               [12] 3636 	dec	r0
      0012DF 18               [12] 3637 	dec	r0
      0012E0 18               [12] 3638 	dec	r0
      0012E1 D0 00            [24] 3639 	pop	ar0
      0012E3 A6 02            [24] 3640 	mov	@r0,ar2
      0012E5 08               [12] 3641 	inc	r0
      0012E6 A6 03            [24] 3642 	mov	@r0,ar3
      0012E8 08               [12] 3643 	inc	r0
      0012E9 A6 04            [24] 3644 	mov	@r0,ar4
      0012EB 08               [12] 3645 	inc	r0
      0012EC A6 05            [24] 3646 	mov	@r0,ar5
      0012EE 18               [12] 3647 	dec	r0
      0012EF 18               [12] 3648 	dec	r0
      0012F0 18               [12] 3649 	dec	r0
                                   3650 ;	main.c:704: key_56.Half[0] = pc2_in.Half[0];
      0012F1 C0 00            [24] 3651 	push	ar0
      0012F3 E5*00            [12] 3652 	mov	a,_bp
      0012F5 24 03            [12] 3653 	add	a,#0x03
      0012F7 F8               [12] 3654 	mov	r0,a
      0012F8 86 00            [24] 3655 	mov	ar0,@r0
      0012FA 86 02            [24] 3656 	mov	ar2,@r0
      0012FC 08               [12] 3657 	inc	r0
      0012FD 86 03            [24] 3658 	mov	ar3,@r0
      0012FF 08               [12] 3659 	inc	r0
      001300 86 04            [24] 3660 	mov	ar4,@r0
      001302 08               [12] 3661 	inc	r0
      001303 86 05            [24] 3662 	mov	ar5,@r0
      001305 18               [12] 3663 	dec	r0
      001306 18               [12] 3664 	dec	r0
      001307 18               [12] 3665 	dec	r0
      001308 A8 06            [24] 3666 	mov	r0,ar6
      00130A A6 02            [24] 3667 	mov	@r0,ar2
      00130C 08               [12] 3668 	inc	r0
      00130D A6 03            [24] 3669 	mov	@r0,ar3
      00130F 08               [12] 3670 	inc	r0
      001310 A6 04            [24] 3671 	mov	@r0,ar4
      001312 08               [12] 3672 	inc	r0
      001313 A6 05            [24] 3673 	mov	@r0,ar5
                                   3674 ;	main.c:705: key_56.Half[1] = pc2_in.Half[1];
      001315 E5*00            [12] 3675 	mov	a,_bp
      001317 24 07            [12] 3676 	add	a,#0x07
      001319 F8               [12] 3677 	mov	r0,a
      00131A 74 04            [12] 3678 	mov	a,#0x04
      00131C 2E               [12] 3679 	add	a,r6
      00131D F6               [12] 3680 	mov	@r0,a
      00131E E5*00            [12] 3681 	mov	a,_bp
      001320 24 03            [12] 3682 	add	a,#0x03
      001322 F8               [12] 3683 	mov	r0,a
      001323 C0 01            [24] 3684 	push	ar1
      001325 E5*00            [12] 3685 	mov	a,_bp
      001327 24 0A            [12] 3686 	add	a,#0x0a
      001329 F9               [12] 3687 	mov	r1,a
      00132A 74 04            [12] 3688 	mov	a,#0x04
      00132C 26               [12] 3689 	add	a,@r0
      00132D F7               [12] 3690 	mov	@r1,a
      00132E D0 01            [24] 3691 	pop	ar1
      001330 E5*00            [12] 3692 	mov	a,_bp
      001332 24 0A            [12] 3693 	add	a,#0x0a
      001334 F8               [12] 3694 	mov	r0,a
      001335 86 00            [24] 3695 	mov	ar0,@r0
      001337 86 02            [24] 3696 	mov	ar2,@r0
      001339 08               [12] 3697 	inc	r0
      00133A 86 03            [24] 3698 	mov	ar3,@r0
      00133C 08               [12] 3699 	inc	r0
      00133D 86 04            [24] 3700 	mov	ar4,@r0
      00133F 08               [12] 3701 	inc	r0
      001340 86 05            [24] 3702 	mov	ar5,@r0
      001342 18               [12] 3703 	dec	r0
      001343 18               [12] 3704 	dec	r0
      001344 18               [12] 3705 	dec	r0
      001345 E5*00            [12] 3706 	mov	a,_bp
      001347 24 07            [12] 3707 	add	a,#0x07
      001349 F8               [12] 3708 	mov	r0,a
      00134A 86 00            [24] 3709 	mov	ar0,@r0
      00134C A6 02            [24] 3710 	mov	@r0,ar2
      00134E 08               [12] 3711 	inc	r0
      00134F A6 03            [24] 3712 	mov	@r0,ar3
      001351 08               [12] 3713 	inc	r0
      001352 A6 04            [24] 3714 	mov	@r0,ar4
      001354 08               [12] 3715 	inc	r0
      001355 A6 05            [24] 3716 	mov	@r0,ar5
      001357 18               [12] 3717 	dec	r0
      001358 18               [12] 3718 	dec	r0
      001359 18               [12] 3719 	dec	r0
                                   3720 ;	main.c:707: pc2_in.Half[0] = 0;
      00135A E5*00            [12] 3721 	mov	a,_bp
      00135C 24 03            [12] 3722 	add	a,#0x03
      00135E F8               [12] 3723 	mov	r0,a
      00135F 86 00            [24] 3724 	mov	ar0,@r0
      001361 76 00            [12] 3725 	mov	@r0,#0x00
      001363 08               [12] 3726 	inc	r0
      001364 76 00            [12] 3727 	mov	@r0,#0x00
      001366 08               [12] 3728 	inc	r0
      001367 76 00            [12] 3729 	mov	@r0,#0x00
      001369 08               [12] 3730 	inc	r0
      00136A 76 00            [12] 3731 	mov	@r0,#0x00
      00136C 18               [12] 3732 	dec	r0
      00136D 18               [12] 3733 	dec	r0
      00136E 18               [12] 3734 	dec	r0
                                   3735 ;	main.c:708: pc2_in.Half[1] = 0;
      00136F E5*00            [12] 3736 	mov	a,_bp
      001371 24 0A            [12] 3737 	add	a,#0x0a
      001373 F8               [12] 3738 	mov	r0,a
      001374 86 00            [24] 3739 	mov	ar0,@r0
      001376 76 00            [12] 3740 	mov	@r0,#0x00
      001378 08               [12] 3741 	inc	r0
      001379 76 00            [12] 3742 	mov	@r0,#0x00
      00137B 08               [12] 3743 	inc	r0
      00137C 76 00            [12] 3744 	mov	@r0,#0x00
      00137E 08               [12] 3745 	inc	r0
      00137F 76 00            [12] 3746 	mov	@r0,#0x00
      001381 18               [12] 3747 	dec	r0
      001382 18               [12] 3748 	dec	r0
      001383 18               [12] 3749 	dec	r0
      001384 D0 00            [24] 3750 	pop	ar0
                                   3751 ;	main.c:710: round_in.Half[0] = cipher_text.Half[0];
      001386 86 02            [24] 3752 	mov	ar2,@r0
      001388 08               [12] 3753 	inc	r0
      001389 86 03            [24] 3754 	mov	ar3,@r0
      00138B 08               [12] 3755 	inc	r0
      00138C 86 04            [24] 3756 	mov	ar4,@r0
      00138E 08               [12] 3757 	inc	r0
      00138F 86 05            [24] 3758 	mov	ar5,@r0
      001391 18               [12] 3759 	dec	r0
      001392 18               [12] 3760 	dec	r0
      001393 18               [12] 3761 	dec	r0
      001394 A7 02            [24] 3762 	mov	@r1,ar2
      001396 09               [12] 3763 	inc	r1
      001397 A7 03            [24] 3764 	mov	@r1,ar3
      001399 09               [12] 3765 	inc	r1
      00139A A7 04            [24] 3766 	mov	@r1,ar4
      00139C 09               [12] 3767 	inc	r1
      00139D A7 05            [24] 3768 	mov	@r1,ar5
      00139F 19               [12] 3769 	dec	r1
      0013A0 19               [12] 3770 	dec	r1
      0013A1 19               [12] 3771 	dec	r1
                                   3772 ;	main.c:711: round_in.Half[1] = cipher_text.Half[1];
      0013A2 C0 00            [24] 3773 	push	ar0
      0013A4 A8 07            [24] 3774 	mov	r0,ar7
      0013A6 86 02            [24] 3775 	mov	ar2,@r0
      0013A8 08               [12] 3776 	inc	r0
      0013A9 86 03            [24] 3777 	mov	ar3,@r0
      0013AB 08               [12] 3778 	inc	r0
      0013AC 86 04            [24] 3779 	mov	ar4,@r0
      0013AE 08               [12] 3780 	inc	r0
      0013AF 86 05            [24] 3781 	mov	ar5,@r0
      0013B1 E5*00            [12] 3782 	mov	a,_bp
      0013B3 24 0D            [12] 3783 	add	a,#0x0d
      0013B5 F8               [12] 3784 	mov	r0,a
      0013B6 86 00            [24] 3785 	mov	ar0,@r0
      0013B8 A6 02            [24] 3786 	mov	@r0,ar2
      0013BA 08               [12] 3787 	inc	r0
      0013BB A6 03            [24] 3788 	mov	@r0,ar3
      0013BD 08               [12] 3789 	inc	r0
      0013BE A6 04            [24] 3790 	mov	@r0,ar4
      0013C0 08               [12] 3791 	inc	r0
      0013C1 A6 05            [24] 3792 	mov	@r0,ar5
      0013C3 18               [12] 3793 	dec	r0
      0013C4 18               [12] 3794 	dec	r0
      0013C5 18               [12] 3795 	dec	r0
      0013C6 D0 00            [24] 3796 	pop	ar0
                                   3797 ;	main.c:714: cipher_text.Half[0] = 0;
      0013C8 76 00            [12] 3798 	mov	@r0,#0x00
      0013CA 08               [12] 3799 	inc	r0
      0013CB 76 00            [12] 3800 	mov	@r0,#0x00
      0013CD 08               [12] 3801 	inc	r0
      0013CE 76 00            [12] 3802 	mov	@r0,#0x00
      0013D0 08               [12] 3803 	inc	r0
      0013D1 76 00            [12] 3804 	mov	@r0,#0x00
      0013D3 18               [12] 3805 	dec	r0
      0013D4 18               [12] 3806 	dec	r0
      0013D5 18               [12] 3807 	dec	r0
                                   3808 ;	main.c:715: cipher_text.Half[1] = 0;
      0013D6 C0 00            [24] 3809 	push	ar0
      0013D8 A8 07            [24] 3810 	mov	r0,ar7
      0013DA 76 00            [12] 3811 	mov	@r0,#0x00
      0013DC 08               [12] 3812 	inc	r0
      0013DD 76 00            [12] 3813 	mov	@r0,#0x00
      0013DF 08               [12] 3814 	inc	r0
      0013E0 76 00            [12] 3815 	mov	@r0,#0x00
      0013E2 08               [12] 3816 	inc	r0
      0013E3 76 00            [12] 3817 	mov	@r0,#0x00
                                   3818 ;	main.c:690: for (round = 1 ; round < 17 ; round++){
      0013E5 E5*00            [12] 3819 	mov	a,_bp
      0013E7 24 19            [12] 3820 	add	a,#0x19
      0013E9 F8               [12] 3821 	mov	r0,a
      0013EA 06               [12] 3822 	inc	@r0
      0013EB E5*00            [12] 3823 	mov	a,_bp
      0013ED 24 19            [12] 3824 	add	a,#0x19
      0013EF F8               [12] 3825 	mov	r0,a
      0013F0 B6 11 00         [24] 3826 	cjne	@r0,#0x11,00385$
      0013F3                       3827 00385$:
      0013F3 D0 00            [24] 3828 	pop	ar0
      0013F5 D0 04            [24] 3829 	pop	ar4
      0013F7 50 03            [24] 3830 	jnc	00386$
      0013F9 02r11r2F         [24] 3831 	ljmp	00171$
      0013FC                       3832 00386$:
                                   3833 ;	main.c:717: pc2_in.Half[0] = round_in.Half[1];
      0013FC C0 00            [24] 3834 	push	ar0
      0013FE E5*00            [12] 3835 	mov	a,_bp
      001400 24 0D            [12] 3836 	add	a,#0x0d
      001402 F8               [12] 3837 	mov	r0,a
      001403 86 00            [24] 3838 	mov	ar0,@r0
      001405 86 03            [24] 3839 	mov	ar3,@r0
      001407 08               [12] 3840 	inc	r0
      001408 86 05            [24] 3841 	mov	ar5,@r0
      00140A 08               [12] 3842 	inc	r0
      00140B 86 06            [24] 3843 	mov	ar6,@r0
      00140D 08               [12] 3844 	inc	r0
      00140E 86 07            [24] 3845 	mov	ar7,@r0
      001410 18               [12] 3846 	dec	r0
      001411 18               [12] 3847 	dec	r0
      001412 18               [12] 3848 	dec	r0
      001413 E5*00            [12] 3849 	mov	a,_bp
      001415 24 03            [12] 3850 	add	a,#0x03
      001417 F8               [12] 3851 	mov	r0,a
      001418 86 00            [24] 3852 	mov	ar0,@r0
      00141A A6 03            [24] 3853 	mov	@r0,ar3
      00141C 08               [12] 3854 	inc	r0
      00141D A6 05            [24] 3855 	mov	@r0,ar5
      00141F 08               [12] 3856 	inc	r0
      001420 A6 06            [24] 3857 	mov	@r0,ar6
      001422 08               [12] 3858 	inc	r0
      001423 A6 07            [24] 3859 	mov	@r0,ar7
      001425 18               [12] 3860 	dec	r0
      001426 18               [12] 3861 	dec	r0
      001427 18               [12] 3862 	dec	r0
      001428 D0 00            [24] 3863 	pop	ar0
                                   3864 ;	main.c:718: pc2_in.Half[1] = round_in.Half[0];
      00142A 87 03            [24] 3865 	mov	ar3,@r1
      00142C 09               [12] 3866 	inc	r1
      00142D 87 05            [24] 3867 	mov	ar5,@r1
      00142F 09               [12] 3868 	inc	r1
      001430 87 06            [24] 3869 	mov	ar6,@r1
      001432 09               [12] 3870 	inc	r1
      001433 87 07            [24] 3871 	mov	ar7,@r1
      001435 19               [12] 3872 	dec	r1
      001436 19               [12] 3873 	dec	r1
      001437 19               [12] 3874 	dec	r1
      001438 E5*00            [12] 3875 	mov	a,_bp
      00143A 24 0A            [12] 3876 	add	a,#0x0a
      00143C F9               [12] 3877 	mov	r1,a
      00143D 87 01            [24] 3878 	mov	ar1,@r1
      00143F A7 03            [24] 3879 	mov	@r1,ar3
      001441 09               [12] 3880 	inc	r1
      001442 A7 05            [24] 3881 	mov	@r1,ar5
      001444 09               [12] 3882 	inc	r1
      001445 A7 06            [24] 3883 	mov	@r1,ar6
      001447 09               [12] 3884 	inc	r1
      001448 A7 07            [24] 3885 	mov	@r1,ar7
      00144A 19               [12] 3886 	dec	r1
      00144B 19               [12] 3887 	dec	r1
      00144C 19               [12] 3888 	dec	r1
                                   3889 ;	main.c:720: Permutation (&pc2_in,&cipher_text,Basic_Permutation,fp);
      00144D 88 07            [24] 3890 	mov	ar7,r0
      00144F 8F 06            [24] 3891 	mov	ar6,r7
      001451 7D 00            [12] 3892 	mov	r5,#0x00
      001453 7C 40            [12] 3893 	mov	r4,#0x40
      001455 E5*00            [12] 3894 	mov	a,_bp
      001457 24 03            [12] 3895 	add	a,#0x03
      001459 F9               [12] 3896 	mov	r1,a
      00145A 87 03            [24] 3897 	mov	ar3,@r1
      00145C C0 00            [24] 3898 	push	ar0
      00145E 8B 02            [24] 3899 	mov	ar2,r3
      001460 7B 00            [12] 3900 	mov	r3,#0x00
      001462 7F 40            [12] 3901 	mov	r7,#0x40
      001464 C0 00            [24] 3902 	push	ar0
      001466 74rA8            [12] 3903 	mov	a,#_fp
      001468 C0 E0            [24] 3904 	push	acc
      00146A 74s00            [12] 3905 	mov	a,#(_fp >> 8)
      00146C C0 E0            [24] 3906 	push	acc
      00146E 74 80            [12] 3907 	mov	a,#0x80
      001470 C0 E0            [24] 3908 	push	acc
      001472 03               [12] 3909 	rr	a
      001473 C0 E0            [24] 3910 	push	acc
      001475 C0 06            [24] 3911 	push	ar6
      001477 C0 05            [24] 3912 	push	ar5
      001479 C0 04            [24] 3913 	push	ar4
      00147B 8A 82            [24] 3914 	mov	dpl,r2
      00147D 8B 83            [24] 3915 	mov	dph,r3
      00147F 8F F0            [24] 3916 	mov	b,r7
      001481 12r00r53         [24] 3917 	lcall	_Permutation
      001484 E5 81            [12] 3918 	mov	a,sp
      001486 24 F9            [12] 3919 	add	a,#0xf9
      001488 F5 81            [12] 3920 	mov	sp,a
      00148A D0 00            [24] 3921 	pop	ar0
                                   3922 ;	main.c:724: for (i=0 ; i<8;i++){
      00148C 75*10 00         [24] 3923 	mov	_i,#0x00
                                   3924 ;	main.c:746: for (i=0 ; i<8;i++){
      00148F D0 00            [24] 3925 	pop	ar0
                                   3926 ;	main.c:724: for (i=0 ; i<8;i++){
      001491                       3927 00173$:
                                   3928 ;	main.c:725: spi_transmit (cipher_text.Array[i]);
      001491 E5*10            [12] 3929 	mov	a,_i
      001493 28               [12] 3930 	add	a,r0
      001494 F9               [12] 3931 	mov	r1,a
      001495 87 82            [24] 3932 	mov	dpl,@r1
      001497 C0 00            [24] 3933 	push	ar0
      001499 12r00r1B         [24] 3934 	lcall	_spi_transmit
      00149C D0 00            [24] 3935 	pop	ar0
                                   3936 ;	main.c:724: for (i=0 ; i<8;i++){
      00149E 05*10            [12] 3937 	inc	_i
      0014A0 74 F8            [12] 3938 	mov	a,#0x100 - 0x08
      0014A2 25*10            [12] 3939 	add	a,_i
      0014A4 50 EB            [24] 3940 	jnc	00173$
                                   3941 ;	main.c:729: SBUF = '\n';
      0014A6 75 99 0A         [24] 3942 	mov	_SBUF,#0x0a
                                   3943 ;	main.c:730: while (0 == TI);
      0014A9                       3944 00146$:
                                   3945 ;	main.c:731: TI = 0;
                                   3946 ;	assignBit
      0014A9 10 99 02         [24] 3947 	jbc	_TI,00388$
      0014AC 80 FB            [24] 3948 	sjmp	00146$
      0014AE                       3949 00388$:
                                   3950 ;	main.c:732: spi_delay();
      0014AE C0 00            [24] 3951 	push	ar0
      0014B0 12r00r00         [24] 3952 	lcall	_spi_delay
      0014B3 D0 00            [24] 3953 	pop	ar0
                                   3954 ;	main.c:733: SBUF = 'C';
      0014B5 75 99 43         [24] 3955 	mov	_SBUF,#0x43
                                   3956 ;	main.c:734: while (0 == TI);
      0014B8                       3957 00149$:
                                   3958 ;	main.c:735: TI = 0;
                                   3959 ;	assignBit
      0014B8 10 99 02         [24] 3960 	jbc	_TI,00389$
      0014BB 80 FB            [24] 3961 	sjmp	00149$
      0014BD                       3962 00389$:
                                   3963 ;	main.c:736: SBUF = 'T';
      0014BD 75 99 54         [24] 3964 	mov	_SBUF,#0x54
                                   3965 ;	main.c:737: while (0 == TI);
      0014C0                       3966 00152$:
                                   3967 ;	main.c:738: TI = 0;
                                   3968 ;	assignBit
      0014C0 10 99 02         [24] 3969 	jbc	_TI,00390$
      0014C3 80 FB            [24] 3970 	sjmp	00152$
      0014C5                       3971 00390$:
                                   3972 ;	main.c:739: spi_delay();
      0014C5 C0 00            [24] 3973 	push	ar0
      0014C7 12r00r00         [24] 3974 	lcall	_spi_delay
      0014CA D0 00            [24] 3975 	pop	ar0
                                   3976 ;	main.c:740: SBUF = ':';
      0014CC 75 99 3A         [24] 3977 	mov	_SBUF,#0x3a
                                   3978 ;	main.c:741: while (0 == TI);
      0014CF                       3979 00155$:
                                   3980 ;	main.c:742: TI = 0;
                                   3981 ;	assignBit
      0014CF 10 99 02         [24] 3982 	jbc	_TI,00391$
      0014D2 80 FB            [24] 3983 	sjmp	00155$
      0014D4                       3984 00391$:
                                   3985 ;	main.c:743: spi_delay();
      0014D4 C0 00            [24] 3986 	push	ar0
      0014D6 12r00r00         [24] 3987 	lcall	_spi_delay
                                   3988 ;	main.c:744: spi_delay();
      0014D9 12r00r00         [24] 3989 	lcall	_spi_delay
      0014DC D0 00            [24] 3990 	pop	ar0
                                   3991 ;	main.c:746: for (i=0 ; i<8;i++){
      0014DE 75*10 00         [24] 3992 	mov	_i,#0x00
      0014E1                       3993 00175$:
                                   3994 ;	main.c:747: temp2 = cipher_text.Array[i] ;
      0014E1 E5*10            [12] 3995 	mov	a,_i
      0014E3 28               [12] 3996 	add	a,r0
      0014E4 F9               [12] 3997 	mov	r1,a
      0014E5 87 99            [24] 3998 	mov	_SBUF,@r1
                                   3999 ;	main.c:749: while(0==TI);
      0014E7                       4000 00158$:
                                   4001 ;	main.c:750: TI=0;
                                   4002 ;	assignBit
      0014E7 10 99 02         [24] 4003 	jbc	_TI,00392$
      0014EA 80 FB            [24] 4004 	sjmp	00158$
      0014EC                       4005 00392$:
                                   4006 ;	main.c:746: for (i=0 ; i<8;i++){
      0014EC 05*10            [12] 4007 	inc	_i
      0014EE 74 F8            [12] 4008 	mov	a,#0x100 - 0x08
      0014F0 25*10            [12] 4009 	add	a,_i
      0014F2 50 ED            [24] 4010 	jnc	00175$
                                   4011 ;	main.c:752: spi_delay();
      0014F4 12r00r00         [24] 4012 	lcall	_spi_delay
      0014F7 02r0Fr40         [24] 4013 	ljmp	00163$
                                   4014 ;	main.c:756: return 0;
                                   4015 ;	main.c:757: }
      0014FA 85*00 81         [24] 4016 	mov	sp,_bp
      0014FD D0*00            [24] 4017 	pop	_bp
      0014FF 22               [24] 4018 	ret
                                   4019 	.area CSEG    (CODE)
                                   4020 	.area CONST   (CODE)
      000000                       4021 _pc1:
      000000 39                    4022 	.db #0x39	; 57	'9'
      000001 31                    4023 	.db #0x31	; 49	'1'
      000002 29                    4024 	.db #0x29	; 41
      000003 21                    4025 	.db #0x21	; 33
      000004 19                    4026 	.db #0x19	; 25
      000005 11                    4027 	.db #0x11	; 17
      000006 09                    4028 	.db #0x09	; 9
      000007 01                    4029 	.db #0x01	; 1
      000008 3A                    4030 	.db #0x3a	; 58
      000009 32                    4031 	.db #0x32	; 50	'2'
      00000A 2A                    4032 	.db #0x2a	; 42
      00000B 22                    4033 	.db #0x22	; 34
      00000C 1A                    4034 	.db #0x1a	; 26
      00000D 12                    4035 	.db #0x12	; 18
      00000E 0A                    4036 	.db #0x0a	; 10
      00000F 02                    4037 	.db #0x02	; 2
      000010 3B                    4038 	.db #0x3b	; 59
      000011 33                    4039 	.db #0x33	; 51	'3'
      000012 2B                    4040 	.db #0x2b	; 43
      000013 23                    4041 	.db #0x23	; 35
      000014 1B                    4042 	.db #0x1b	; 27
      000015 13                    4043 	.db #0x13	; 19
      000016 0B                    4044 	.db #0x0b	; 11
      000017 03                    4045 	.db #0x03	; 3
      000018 3C                    4046 	.db #0x3c	; 60
      000019 34                    4047 	.db #0x34	; 52	'4'
      00001A 2C                    4048 	.db #0x2c	; 44
      00001B 24                    4049 	.db #0x24	; 36
      00001C 3F                    4050 	.db #0x3f	; 63
      00001D 37                    4051 	.db #0x37	; 55	'7'
      00001E 2F                    4052 	.db #0x2f	; 47
      00001F 27                    4053 	.db #0x27	; 39
      000020 1F                    4054 	.db #0x1f	; 31
      000021 17                    4055 	.db #0x17	; 23
      000022 0F                    4056 	.db #0x0f	; 15
      000023 07                    4057 	.db #0x07	; 7
      000024 3E                    4058 	.db #0x3e	; 62
      000025 36                    4059 	.db #0x36	; 54	'6'
      000026 2E                    4060 	.db #0x2e	; 46
      000027 26                    4061 	.db #0x26	; 38
      000028 1E                    4062 	.db #0x1e	; 30
      000029 16                    4063 	.db #0x16	; 22
      00002A 0E                    4064 	.db #0x0e	; 14
      00002B 06                    4065 	.db #0x06	; 6
      00002C 3D                    4066 	.db #0x3d	; 61
      00002D 35                    4067 	.db #0x35	; 53	'5'
      00002E 2D                    4068 	.db #0x2d	; 45
      00002F 25                    4069 	.db #0x25	; 37
      000030 1D                    4070 	.db #0x1d	; 29
      000031 15                    4071 	.db #0x15	; 21
      000032 0D                    4072 	.db #0x0d	; 13
      000033 05                    4073 	.db #0x05	; 5
      000034 1C                    4074 	.db #0x1c	; 28
      000035 14                    4075 	.db #0x14	; 20
      000036 0C                    4076 	.db #0x0c	; 12
      000037 04                    4077 	.db #0x04	; 4
      000038                       4078 _pc2:
      000038 0E                    4079 	.db #0x0e	; 14
      000039 11                    4080 	.db #0x11	; 17
      00003A 0B                    4081 	.db #0x0b	; 11
      00003B 18                    4082 	.db #0x18	; 24
      00003C 01                    4083 	.db #0x01	; 1
      00003D 05                    4084 	.db #0x05	; 5
      00003E 03                    4085 	.db #0x03	; 3
      00003F 1C                    4086 	.db #0x1c	; 28
      000040 0F                    4087 	.db #0x0f	; 15
      000041 06                    4088 	.db #0x06	; 6
      000042 15                    4089 	.db #0x15	; 21
      000043 0A                    4090 	.db #0x0a	; 10
      000044 17                    4091 	.db #0x17	; 23
      000045 13                    4092 	.db #0x13	; 19
      000046 0C                    4093 	.db #0x0c	; 12
      000047 04                    4094 	.db #0x04	; 4
      000048 1A                    4095 	.db #0x1a	; 26
      000049 08                    4096 	.db #0x08	; 8
      00004A 10                    4097 	.db #0x10	; 16
      00004B 07                    4098 	.db #0x07	; 7
      00004C 1B                    4099 	.db #0x1b	; 27
      00004D 14                    4100 	.db #0x14	; 20
      00004E 0D                    4101 	.db #0x0d	; 13
      00004F 02                    4102 	.db #0x02	; 2
      000050 29                    4103 	.db #0x29	; 41
      000051 34                    4104 	.db #0x34	; 52	'4'
      000052 1F                    4105 	.db #0x1f	; 31
      000053 25                    4106 	.db #0x25	; 37
      000054 2F                    4107 	.db #0x2f	; 47
      000055 37                    4108 	.db #0x37	; 55	'7'
      000056 1E                    4109 	.db #0x1e	; 30
      000057 28                    4110 	.db #0x28	; 40
      000058 33                    4111 	.db #0x33	; 51	'3'
      000059 2D                    4112 	.db #0x2d	; 45
      00005A 21                    4113 	.db #0x21	; 33
      00005B 30                    4114 	.db #0x30	; 48	'0'
      00005C 2C                    4115 	.db #0x2c	; 44
      00005D 31                    4116 	.db #0x31	; 49	'1'
      00005E 27                    4117 	.db #0x27	; 39
      00005F 38                    4118 	.db #0x38	; 56	'8'
      000060 22                    4119 	.db #0x22	; 34
      000061 35                    4120 	.db #0x35	; 53	'5'
      000062 2E                    4121 	.db #0x2e	; 46
      000063 2A                    4122 	.db #0x2a	; 42
      000064 32                    4123 	.db #0x32	; 50	'2'
      000065 24                    4124 	.db #0x24	; 36
      000066 1D                    4125 	.db #0x1d	; 29
      000067 20                    4126 	.db #0x20	; 32
      000068                       4127 _ip:
      000068 3A                    4128 	.db #0x3a	; 58
      000069 32                    4129 	.db #0x32	; 50	'2'
      00006A 2A                    4130 	.db #0x2a	; 42
      00006B 22                    4131 	.db #0x22	; 34
      00006C 1A                    4132 	.db #0x1a	; 26
      00006D 12                    4133 	.db #0x12	; 18
      00006E 0A                    4134 	.db #0x0a	; 10
      00006F 02                    4135 	.db #0x02	; 2
      000070 3C                    4136 	.db #0x3c	; 60
      000071 34                    4137 	.db #0x34	; 52	'4'
      000072 2C                    4138 	.db #0x2c	; 44
      000073 24                    4139 	.db #0x24	; 36
      000074 1C                    4140 	.db #0x1c	; 28
      000075 14                    4141 	.db #0x14	; 20
      000076 0C                    4142 	.db #0x0c	; 12
      000077 04                    4143 	.db #0x04	; 4
      000078 3E                    4144 	.db #0x3e	; 62
      000079 36                    4145 	.db #0x36	; 54	'6'
      00007A 2E                    4146 	.db #0x2e	; 46
      00007B 26                    4147 	.db #0x26	; 38
      00007C 1E                    4148 	.db #0x1e	; 30
      00007D 16                    4149 	.db #0x16	; 22
      00007E 0E                    4150 	.db #0x0e	; 14
      00007F 06                    4151 	.db #0x06	; 6
      000080 40                    4152 	.db #0x40	; 64
      000081 38                    4153 	.db #0x38	; 56	'8'
      000082 30                    4154 	.db #0x30	; 48	'0'
      000083 28                    4155 	.db #0x28	; 40
      000084 20                    4156 	.db #0x20	; 32
      000085 18                    4157 	.db #0x18	; 24
      000086 10                    4158 	.db #0x10	; 16
      000087 08                    4159 	.db #0x08	; 8
      000088 39                    4160 	.db #0x39	; 57	'9'
      000089 31                    4161 	.db #0x31	; 49	'1'
      00008A 29                    4162 	.db #0x29	; 41
      00008B 21                    4163 	.db #0x21	; 33
      00008C 19                    4164 	.db #0x19	; 25
      00008D 11                    4165 	.db #0x11	; 17
      00008E 09                    4166 	.db #0x09	; 9
      00008F 01                    4167 	.db #0x01	; 1
      000090 3B                    4168 	.db #0x3b	; 59
      000091 33                    4169 	.db #0x33	; 51	'3'
      000092 2B                    4170 	.db #0x2b	; 43
      000093 23                    4171 	.db #0x23	; 35
      000094 1B                    4172 	.db #0x1b	; 27
      000095 13                    4173 	.db #0x13	; 19
      000096 0B                    4174 	.db #0x0b	; 11
      000097 03                    4175 	.db #0x03	; 3
      000098 3D                    4176 	.db #0x3d	; 61
      000099 35                    4177 	.db #0x35	; 53	'5'
      00009A 2D                    4178 	.db #0x2d	; 45
      00009B 25                    4179 	.db #0x25	; 37
      00009C 1D                    4180 	.db #0x1d	; 29
      00009D 15                    4181 	.db #0x15	; 21
      00009E 0D                    4182 	.db #0x0d	; 13
      00009F 05                    4183 	.db #0x05	; 5
      0000A0 3F                    4184 	.db #0x3f	; 63
      0000A1 37                    4185 	.db #0x37	; 55	'7'
      0000A2 2F                    4186 	.db #0x2f	; 47
      0000A3 27                    4187 	.db #0x27	; 39
      0000A4 1F                    4188 	.db #0x1f	; 31
      0000A5 17                    4189 	.db #0x17	; 23
      0000A6 0F                    4190 	.db #0x0f	; 15
      0000A7 07                    4191 	.db #0x07	; 7
      0000A8                       4192 _fp:
      0000A8 28                    4193 	.db #0x28	; 40
      0000A9 08                    4194 	.db #0x08	; 8
      0000AA 30                    4195 	.db #0x30	; 48	'0'
      0000AB 10                    4196 	.db #0x10	; 16
      0000AC 38                    4197 	.db #0x38	; 56	'8'
      0000AD 18                    4198 	.db #0x18	; 24
      0000AE 40                    4199 	.db #0x40	; 64
      0000AF 20                    4200 	.db #0x20	; 32
      0000B0 27                    4201 	.db #0x27	; 39
      0000B1 07                    4202 	.db #0x07	; 7
      0000B2 2F                    4203 	.db #0x2f	; 47
      0000B3 0F                    4204 	.db #0x0f	; 15
      0000B4 37                    4205 	.db #0x37	; 55	'7'
      0000B5 17                    4206 	.db #0x17	; 23
      0000B6 3F                    4207 	.db #0x3f	; 63
      0000B7 1F                    4208 	.db #0x1f	; 31
      0000B8 26                    4209 	.db #0x26	; 38
      0000B9 06                    4210 	.db #0x06	; 6
      0000BA 2E                    4211 	.db #0x2e	; 46
      0000BB 0E                    4212 	.db #0x0e	; 14
      0000BC 36                    4213 	.db #0x36	; 54	'6'
      0000BD 16                    4214 	.db #0x16	; 22
      0000BE 3E                    4215 	.db #0x3e	; 62
      0000BF 1E                    4216 	.db #0x1e	; 30
      0000C0 25                    4217 	.db #0x25	; 37
      0000C1 05                    4218 	.db #0x05	; 5
      0000C2 2D                    4219 	.db #0x2d	; 45
      0000C3 0D                    4220 	.db #0x0d	; 13
      0000C4 35                    4221 	.db #0x35	; 53	'5'
      0000C5 15                    4222 	.db #0x15	; 21
      0000C6 3D                    4223 	.db #0x3d	; 61
      0000C7 1D                    4224 	.db #0x1d	; 29
      0000C8 24                    4225 	.db #0x24	; 36
      0000C9 04                    4226 	.db #0x04	; 4
      0000CA 2C                    4227 	.db #0x2c	; 44
      0000CB 0C                    4228 	.db #0x0c	; 12
      0000CC 34                    4229 	.db #0x34	; 52	'4'
      0000CD 14                    4230 	.db #0x14	; 20
      0000CE 3C                    4231 	.db #0x3c	; 60
      0000CF 1C                    4232 	.db #0x1c	; 28
      0000D0 23                    4233 	.db #0x23	; 35
      0000D1 03                    4234 	.db #0x03	; 3
      0000D2 2B                    4235 	.db #0x2b	; 43
      0000D3 0B                    4236 	.db #0x0b	; 11
      0000D4 33                    4237 	.db #0x33	; 51	'3'
      0000D5 13                    4238 	.db #0x13	; 19
      0000D6 3B                    4239 	.db #0x3b	; 59
      0000D7 1B                    4240 	.db #0x1b	; 27
      0000D8 22                    4241 	.db #0x22	; 34
      0000D9 02                    4242 	.db #0x02	; 2
      0000DA 2A                    4243 	.db #0x2a	; 42
      0000DB 0A                    4244 	.db #0x0a	; 10
      0000DC 32                    4245 	.db #0x32	; 50	'2'
      0000DD 12                    4246 	.db #0x12	; 18
      0000DE 3A                    4247 	.db #0x3a	; 58
      0000DF 1A                    4248 	.db #0x1a	; 26
      0000E0 21                    4249 	.db #0x21	; 33
      0000E1 01                    4250 	.db #0x01	; 1
      0000E2 29                    4251 	.db #0x29	; 41
      0000E3 09                    4252 	.db #0x09	; 9
      0000E4 31                    4253 	.db #0x31	; 49	'1'
      0000E5 11                    4254 	.db #0x11	; 17
      0000E6 39                    4255 	.db #0x39	; 57	'9'
      0000E7 19                    4256 	.db #0x19	; 25
      0000E8                       4257 _s1:
      0000E8 0E                    4258 	.db #0x0e	; 14
      0000E9 04                    4259 	.db #0x04	; 4
      0000EA 0D                    4260 	.db #0x0d	; 13
      0000EB 01                    4261 	.db #0x01	; 1
      0000EC 02                    4262 	.db #0x02	; 2
      0000ED 0F                    4263 	.db #0x0f	; 15
      0000EE 0B                    4264 	.db #0x0b	; 11
      0000EF 08                    4265 	.db #0x08	; 8
      0000F0 03                    4266 	.db #0x03	; 3
      0000F1 0A                    4267 	.db #0x0a	; 10
      0000F2 06                    4268 	.db #0x06	; 6
      0000F3 0C                    4269 	.db #0x0c	; 12
      0000F4 05                    4270 	.db #0x05	; 5
      0000F5 09                    4271 	.db #0x09	; 9
      0000F6 00                    4272 	.db #0x00	; 0
      0000F7 07                    4273 	.db #0x07	; 7
      0000F8 00                    4274 	.db #0x00	; 0
      0000F9 0F                    4275 	.db #0x0f	; 15
      0000FA 07                    4276 	.db #0x07	; 7
      0000FB 04                    4277 	.db #0x04	; 4
      0000FC 0E                    4278 	.db #0x0e	; 14
      0000FD 02                    4279 	.db #0x02	; 2
      0000FE 0D                    4280 	.db #0x0d	; 13
      0000FF 01                    4281 	.db #0x01	; 1
      000100 0A                    4282 	.db #0x0a	; 10
      000101 06                    4283 	.db #0x06	; 6
      000102 0C                    4284 	.db #0x0c	; 12
      000103 0B                    4285 	.db #0x0b	; 11
      000104 09                    4286 	.db #0x09	; 9
      000105 05                    4287 	.db #0x05	; 5
      000106 03                    4288 	.db #0x03	; 3
      000107 08                    4289 	.db #0x08	; 8
      000108 04                    4290 	.db #0x04	; 4
      000109 01                    4291 	.db #0x01	; 1
      00010A 0E                    4292 	.db #0x0e	; 14
      00010B 08                    4293 	.db #0x08	; 8
      00010C 0D                    4294 	.db #0x0d	; 13
      00010D 06                    4295 	.db #0x06	; 6
      00010E 02                    4296 	.db #0x02	; 2
      00010F 0B                    4297 	.db #0x0b	; 11
      000110 0F                    4298 	.db #0x0f	; 15
      000111 0C                    4299 	.db #0x0c	; 12
      000112 09                    4300 	.db #0x09	; 9
      000113 07                    4301 	.db #0x07	; 7
      000114 03                    4302 	.db #0x03	; 3
      000115 0A                    4303 	.db #0x0a	; 10
      000116 05                    4304 	.db #0x05	; 5
      000117 00                    4305 	.db #0x00	; 0
      000118 0F                    4306 	.db #0x0f	; 15
      000119 0C                    4307 	.db #0x0c	; 12
      00011A 08                    4308 	.db #0x08	; 8
      00011B 02                    4309 	.db #0x02	; 2
      00011C 04                    4310 	.db #0x04	; 4
      00011D 09                    4311 	.db #0x09	; 9
      00011E 01                    4312 	.db #0x01	; 1
      00011F 07                    4313 	.db #0x07	; 7
      000120 05                    4314 	.db #0x05	; 5
      000121 0B                    4315 	.db #0x0b	; 11
      000122 03                    4316 	.db #0x03	; 3
      000123 0E                    4317 	.db #0x0e	; 14
      000124 0A                    4318 	.db #0x0a	; 10
      000125 00                    4319 	.db #0x00	; 0
      000126 06                    4320 	.db #0x06	; 6
      000127 0D                    4321 	.db #0x0d	; 13
      000128                       4322 _s2:
      000128 0F                    4323 	.db #0x0f	; 15
      000129 01                    4324 	.db #0x01	; 1
      00012A 08                    4325 	.db #0x08	; 8
      00012B 0E                    4326 	.db #0x0e	; 14
      00012C 06                    4327 	.db #0x06	; 6
      00012D 0B                    4328 	.db #0x0b	; 11
      00012E 03                    4329 	.db #0x03	; 3
      00012F 04                    4330 	.db #0x04	; 4
      000130 09                    4331 	.db #0x09	; 9
      000131 07                    4332 	.db #0x07	; 7
      000132 02                    4333 	.db #0x02	; 2
      000133 0D                    4334 	.db #0x0d	; 13
      000134 0C                    4335 	.db #0x0c	; 12
      000135 00                    4336 	.db #0x00	; 0
      000136 05                    4337 	.db #0x05	; 5
      000137 0A                    4338 	.db #0x0a	; 10
      000138 03                    4339 	.db #0x03	; 3
      000139 0D                    4340 	.db #0x0d	; 13
      00013A 04                    4341 	.db #0x04	; 4
      00013B 07                    4342 	.db #0x07	; 7
      00013C 0F                    4343 	.db #0x0f	; 15
      00013D 02                    4344 	.db #0x02	; 2
      00013E 08                    4345 	.db #0x08	; 8
      00013F 0E                    4346 	.db #0x0e	; 14
      000140 0C                    4347 	.db #0x0c	; 12
      000141 00                    4348 	.db #0x00	; 0
      000142 01                    4349 	.db #0x01	; 1
      000143 0A                    4350 	.db #0x0a	; 10
      000144 06                    4351 	.db #0x06	; 6
      000145 09                    4352 	.db #0x09	; 9
      000146 0B                    4353 	.db #0x0b	; 11
      000147 05                    4354 	.db #0x05	; 5
      000148 00                    4355 	.db #0x00	; 0
      000149 0E                    4356 	.db #0x0e	; 14
      00014A 07                    4357 	.db #0x07	; 7
      00014B 0B                    4358 	.db #0x0b	; 11
      00014C 0A                    4359 	.db #0x0a	; 10
      00014D 04                    4360 	.db #0x04	; 4
      00014E 0D                    4361 	.db #0x0d	; 13
      00014F 01                    4362 	.db #0x01	; 1
      000150 05                    4363 	.db #0x05	; 5
      000151 08                    4364 	.db #0x08	; 8
      000152 0C                    4365 	.db #0x0c	; 12
      000153 06                    4366 	.db #0x06	; 6
      000154 09                    4367 	.db #0x09	; 9
      000155 03                    4368 	.db #0x03	; 3
      000156 02                    4369 	.db #0x02	; 2
      000157 0F                    4370 	.db #0x0f	; 15
      000158 0D                    4371 	.db #0x0d	; 13
      000159 08                    4372 	.db #0x08	; 8
      00015A 0A                    4373 	.db #0x0a	; 10
      00015B 01                    4374 	.db #0x01	; 1
      00015C 03                    4375 	.db #0x03	; 3
      00015D 0F                    4376 	.db #0x0f	; 15
      00015E 04                    4377 	.db #0x04	; 4
      00015F 02                    4378 	.db #0x02	; 2
      000160 0B                    4379 	.db #0x0b	; 11
      000161 06                    4380 	.db #0x06	; 6
      000162 07                    4381 	.db #0x07	; 7
      000163 0C                    4382 	.db #0x0c	; 12
      000164 00                    4383 	.db #0x00	; 0
      000165 05                    4384 	.db #0x05	; 5
      000166 0E                    4385 	.db #0x0e	; 14
      000167 09                    4386 	.db #0x09	; 9
      000168                       4387 _s3:
      000168 0A                    4388 	.db #0x0a	; 10
      000169 00                    4389 	.db #0x00	; 0
      00016A 09                    4390 	.db #0x09	; 9
      00016B 0E                    4391 	.db #0x0e	; 14
      00016C 06                    4392 	.db #0x06	; 6
      00016D 03                    4393 	.db #0x03	; 3
      00016E 0F                    4394 	.db #0x0f	; 15
      00016F 05                    4395 	.db #0x05	; 5
      000170 01                    4396 	.db #0x01	; 1
      000171 0D                    4397 	.db #0x0d	; 13
      000172 0C                    4398 	.db #0x0c	; 12
      000173 07                    4399 	.db #0x07	; 7
      000174 0B                    4400 	.db #0x0b	; 11
      000175 04                    4401 	.db #0x04	; 4
      000176 02                    4402 	.db #0x02	; 2
      000177 08                    4403 	.db #0x08	; 8
      000178 0D                    4404 	.db #0x0d	; 13
      000179 07                    4405 	.db #0x07	; 7
      00017A 00                    4406 	.db #0x00	; 0
      00017B 09                    4407 	.db #0x09	; 9
      00017C 03                    4408 	.db #0x03	; 3
      00017D 04                    4409 	.db #0x04	; 4
      00017E 06                    4410 	.db #0x06	; 6
      00017F 0A                    4411 	.db #0x0a	; 10
      000180 02                    4412 	.db #0x02	; 2
      000181 08                    4413 	.db #0x08	; 8
      000182 05                    4414 	.db #0x05	; 5
      000183 0E                    4415 	.db #0x0e	; 14
      000184 0C                    4416 	.db #0x0c	; 12
      000185 0B                    4417 	.db #0x0b	; 11
      000186 0F                    4418 	.db #0x0f	; 15
      000187 01                    4419 	.db #0x01	; 1
      000188 0D                    4420 	.db #0x0d	; 13
      000189 06                    4421 	.db #0x06	; 6
      00018A 04                    4422 	.db #0x04	; 4
      00018B 09                    4423 	.db #0x09	; 9
      00018C 08                    4424 	.db #0x08	; 8
      00018D 0F                    4425 	.db #0x0f	; 15
      00018E 03                    4426 	.db #0x03	; 3
      00018F 00                    4427 	.db #0x00	; 0
      000190 0B                    4428 	.db #0x0b	; 11
      000191 01                    4429 	.db #0x01	; 1
      000192 02                    4430 	.db #0x02	; 2
      000193 0C                    4431 	.db #0x0c	; 12
      000194 05                    4432 	.db #0x05	; 5
      000195 0A                    4433 	.db #0x0a	; 10
      000196 0E                    4434 	.db #0x0e	; 14
      000197 07                    4435 	.db #0x07	; 7
      000198 01                    4436 	.db #0x01	; 1
      000199 0A                    4437 	.db #0x0a	; 10
      00019A 0D                    4438 	.db #0x0d	; 13
      00019B 00                    4439 	.db #0x00	; 0
      00019C 06                    4440 	.db #0x06	; 6
      00019D 09                    4441 	.db #0x09	; 9
      00019E 08                    4442 	.db #0x08	; 8
      00019F 07                    4443 	.db #0x07	; 7
      0001A0 04                    4444 	.db #0x04	; 4
      0001A1 0F                    4445 	.db #0x0f	; 15
      0001A2 0E                    4446 	.db #0x0e	; 14
      0001A3 03                    4447 	.db #0x03	; 3
      0001A4 0B                    4448 	.db #0x0b	; 11
      0001A5 05                    4449 	.db #0x05	; 5
      0001A6 02                    4450 	.db #0x02	; 2
      0001A7 0C                    4451 	.db #0x0c	; 12
      0001A8                       4452 _s4:
      0001A8 07                    4453 	.db #0x07	; 7
      0001A9 0D                    4454 	.db #0x0d	; 13
      0001AA 0E                    4455 	.db #0x0e	; 14
      0001AB 03                    4456 	.db #0x03	; 3
      0001AC 00                    4457 	.db #0x00	; 0
      0001AD 06                    4458 	.db #0x06	; 6
      0001AE 09                    4459 	.db #0x09	; 9
      0001AF 0A                    4460 	.db #0x0a	; 10
      0001B0 01                    4461 	.db #0x01	; 1
      0001B1 02                    4462 	.db #0x02	; 2
      0001B2 08                    4463 	.db #0x08	; 8
      0001B3 05                    4464 	.db #0x05	; 5
      0001B4 0B                    4465 	.db #0x0b	; 11
      0001B5 0C                    4466 	.db #0x0c	; 12
      0001B6 04                    4467 	.db #0x04	; 4
      0001B7 0F                    4468 	.db #0x0f	; 15
      0001B8 0D                    4469 	.db #0x0d	; 13
      0001B9 08                    4470 	.db #0x08	; 8
      0001BA 0B                    4471 	.db #0x0b	; 11
      0001BB 05                    4472 	.db #0x05	; 5
      0001BC 06                    4473 	.db #0x06	; 6
      0001BD 0F                    4474 	.db #0x0f	; 15
      0001BE 00                    4475 	.db #0x00	; 0
      0001BF 03                    4476 	.db #0x03	; 3
      0001C0 04                    4477 	.db #0x04	; 4
      0001C1 07                    4478 	.db #0x07	; 7
      0001C2 02                    4479 	.db #0x02	; 2
      0001C3 0C                    4480 	.db #0x0c	; 12
      0001C4 01                    4481 	.db #0x01	; 1
      0001C5 0A                    4482 	.db #0x0a	; 10
      0001C6 0E                    4483 	.db #0x0e	; 14
      0001C7 09                    4484 	.db #0x09	; 9
      0001C8 0A                    4485 	.db #0x0a	; 10
      0001C9 06                    4486 	.db #0x06	; 6
      0001CA 09                    4487 	.db #0x09	; 9
      0001CB 00                    4488 	.db #0x00	; 0
      0001CC 0C                    4489 	.db #0x0c	; 12
      0001CD 0B                    4490 	.db #0x0b	; 11
      0001CE 07                    4491 	.db #0x07	; 7
      0001CF 0D                    4492 	.db #0x0d	; 13
      0001D0 0F                    4493 	.db #0x0f	; 15
      0001D1 01                    4494 	.db #0x01	; 1
      0001D2 03                    4495 	.db #0x03	; 3
      0001D3 0E                    4496 	.db #0x0e	; 14
      0001D4 05                    4497 	.db #0x05	; 5
      0001D5 02                    4498 	.db #0x02	; 2
      0001D6 08                    4499 	.db #0x08	; 8
      0001D7 04                    4500 	.db #0x04	; 4
      0001D8 03                    4501 	.db #0x03	; 3
      0001D9 0F                    4502 	.db #0x0f	; 15
      0001DA 00                    4503 	.db #0x00	; 0
      0001DB 06                    4504 	.db #0x06	; 6
      0001DC 0A                    4505 	.db #0x0a	; 10
      0001DD 01                    4506 	.db #0x01	; 1
      0001DE 0D                    4507 	.db #0x0d	; 13
      0001DF 08                    4508 	.db #0x08	; 8
      0001E0 09                    4509 	.db #0x09	; 9
      0001E1 04                    4510 	.db #0x04	; 4
      0001E2 05                    4511 	.db #0x05	; 5
      0001E3 0B                    4512 	.db #0x0b	; 11
      0001E4 0C                    4513 	.db #0x0c	; 12
      0001E5 07                    4514 	.db #0x07	; 7
      0001E6 02                    4515 	.db #0x02	; 2
      0001E7 0E                    4516 	.db #0x0e	; 14
      0001E8                       4517 _s5:
      0001E8 02                    4518 	.db #0x02	; 2
      0001E9 0C                    4519 	.db #0x0c	; 12
      0001EA 04                    4520 	.db #0x04	; 4
      0001EB 01                    4521 	.db #0x01	; 1
      0001EC 07                    4522 	.db #0x07	; 7
      0001ED 0A                    4523 	.db #0x0a	; 10
      0001EE 0B                    4524 	.db #0x0b	; 11
      0001EF 06                    4525 	.db #0x06	; 6
      0001F0 08                    4526 	.db #0x08	; 8
      0001F1 05                    4527 	.db #0x05	; 5
      0001F2 03                    4528 	.db #0x03	; 3
      0001F3 0F                    4529 	.db #0x0f	; 15
      0001F4 0D                    4530 	.db #0x0d	; 13
      0001F5 00                    4531 	.db #0x00	; 0
      0001F6 0E                    4532 	.db #0x0e	; 14
      0001F7 09                    4533 	.db #0x09	; 9
      0001F8 0E                    4534 	.db #0x0e	; 14
      0001F9 0B                    4535 	.db #0x0b	; 11
      0001FA 02                    4536 	.db #0x02	; 2
      0001FB 0C                    4537 	.db #0x0c	; 12
      0001FC 04                    4538 	.db #0x04	; 4
      0001FD 07                    4539 	.db #0x07	; 7
      0001FE 0D                    4540 	.db #0x0d	; 13
      0001FF 01                    4541 	.db #0x01	; 1
      000200 05                    4542 	.db #0x05	; 5
      000201 00                    4543 	.db #0x00	; 0
      000202 0F                    4544 	.db #0x0f	; 15
      000203 0A                    4545 	.db #0x0a	; 10
      000204 03                    4546 	.db #0x03	; 3
      000205 09                    4547 	.db #0x09	; 9
      000206 08                    4548 	.db #0x08	; 8
      000207 06                    4549 	.db #0x06	; 6
      000208 04                    4550 	.db #0x04	; 4
      000209 02                    4551 	.db #0x02	; 2
      00020A 01                    4552 	.db #0x01	; 1
      00020B 0B                    4553 	.db #0x0b	; 11
      00020C 0A                    4554 	.db #0x0a	; 10
      00020D 0D                    4555 	.db #0x0d	; 13
      00020E 07                    4556 	.db #0x07	; 7
      00020F 08                    4557 	.db #0x08	; 8
      000210 0F                    4558 	.db #0x0f	; 15
      000211 09                    4559 	.db #0x09	; 9
      000212 0C                    4560 	.db #0x0c	; 12
      000213 05                    4561 	.db #0x05	; 5
      000214 06                    4562 	.db #0x06	; 6
      000215 03                    4563 	.db #0x03	; 3
      000216 00                    4564 	.db #0x00	; 0
      000217 0E                    4565 	.db #0x0e	; 14
      000218 0B                    4566 	.db #0x0b	; 11
      000219 08                    4567 	.db #0x08	; 8
      00021A 0C                    4568 	.db #0x0c	; 12
      00021B 07                    4569 	.db #0x07	; 7
      00021C 01                    4570 	.db #0x01	; 1
      00021D 0E                    4571 	.db #0x0e	; 14
      00021E 02                    4572 	.db #0x02	; 2
      00021F 0D                    4573 	.db #0x0d	; 13
      000220 06                    4574 	.db #0x06	; 6
      000221 0F                    4575 	.db #0x0f	; 15
      000222 00                    4576 	.db #0x00	; 0
      000223 09                    4577 	.db #0x09	; 9
      000224 0A                    4578 	.db #0x0a	; 10
      000225 04                    4579 	.db #0x04	; 4
      000226 05                    4580 	.db #0x05	; 5
      000227 03                    4581 	.db #0x03	; 3
      000228                       4582 _s6:
      000228 0C                    4583 	.db #0x0c	; 12
      000229 01                    4584 	.db #0x01	; 1
      00022A 0A                    4585 	.db #0x0a	; 10
      00022B 0F                    4586 	.db #0x0f	; 15
      00022C 09                    4587 	.db #0x09	; 9
      00022D 02                    4588 	.db #0x02	; 2
      00022E 06                    4589 	.db #0x06	; 6
      00022F 08                    4590 	.db #0x08	; 8
      000230 00                    4591 	.db #0x00	; 0
      000231 0D                    4592 	.db #0x0d	; 13
      000232 03                    4593 	.db #0x03	; 3
      000233 04                    4594 	.db #0x04	; 4
      000234 0E                    4595 	.db #0x0e	; 14
      000235 07                    4596 	.db #0x07	; 7
      000236 05                    4597 	.db #0x05	; 5
      000237 0B                    4598 	.db #0x0b	; 11
      000238 0A                    4599 	.db #0x0a	; 10
      000239 0F                    4600 	.db #0x0f	; 15
      00023A 04                    4601 	.db #0x04	; 4
      00023B 02                    4602 	.db #0x02	; 2
      00023C 07                    4603 	.db #0x07	; 7
      00023D 0C                    4604 	.db #0x0c	; 12
      00023E 09                    4605 	.db #0x09	; 9
      00023F 05                    4606 	.db #0x05	; 5
      000240 06                    4607 	.db #0x06	; 6
      000241 01                    4608 	.db #0x01	; 1
      000242 0D                    4609 	.db #0x0d	; 13
      000243 0E                    4610 	.db #0x0e	; 14
      000244 00                    4611 	.db #0x00	; 0
      000245 0B                    4612 	.db #0x0b	; 11
      000246 03                    4613 	.db #0x03	; 3
      000247 08                    4614 	.db #0x08	; 8
      000248 09                    4615 	.db #0x09	; 9
      000249 0E                    4616 	.db #0x0e	; 14
      00024A 0F                    4617 	.db #0x0f	; 15
      00024B 05                    4618 	.db #0x05	; 5
      00024C 02                    4619 	.db #0x02	; 2
      00024D 08                    4620 	.db #0x08	; 8
      00024E 0C                    4621 	.db #0x0c	; 12
      00024F 03                    4622 	.db #0x03	; 3
      000250 07                    4623 	.db #0x07	; 7
      000251 00                    4624 	.db #0x00	; 0
      000252 04                    4625 	.db #0x04	; 4
      000253 0A                    4626 	.db #0x0a	; 10
      000254 01                    4627 	.db #0x01	; 1
      000255 0D                    4628 	.db #0x0d	; 13
      000256 0B                    4629 	.db #0x0b	; 11
      000257 06                    4630 	.db #0x06	; 6
      000258 04                    4631 	.db #0x04	; 4
      000259 03                    4632 	.db #0x03	; 3
      00025A 02                    4633 	.db #0x02	; 2
      00025B 0C                    4634 	.db #0x0c	; 12
      00025C 09                    4635 	.db #0x09	; 9
      00025D 05                    4636 	.db #0x05	; 5
      00025E 0F                    4637 	.db #0x0f	; 15
      00025F 0A                    4638 	.db #0x0a	; 10
      000260 0B                    4639 	.db #0x0b	; 11
      000261 0E                    4640 	.db #0x0e	; 14
      000262 01                    4641 	.db #0x01	; 1
      000263 07                    4642 	.db #0x07	; 7
      000264 06                    4643 	.db #0x06	; 6
      000265 00                    4644 	.db #0x00	; 0
      000266 08                    4645 	.db #0x08	; 8
      000267 0D                    4646 	.db #0x0d	; 13
      000268                       4647 _s7:
      000268 04                    4648 	.db #0x04	; 4
      000269 0B                    4649 	.db #0x0b	; 11
      00026A 02                    4650 	.db #0x02	; 2
      00026B 0E                    4651 	.db #0x0e	; 14
      00026C 0F                    4652 	.db #0x0f	; 15
      00026D 00                    4653 	.db #0x00	; 0
      00026E 08                    4654 	.db #0x08	; 8
      00026F 0D                    4655 	.db #0x0d	; 13
      000270 03                    4656 	.db #0x03	; 3
      000271 0C                    4657 	.db #0x0c	; 12
      000272 09                    4658 	.db #0x09	; 9
      000273 07                    4659 	.db #0x07	; 7
      000274 05                    4660 	.db #0x05	; 5
      000275 0A                    4661 	.db #0x0a	; 10
      000276 06                    4662 	.db #0x06	; 6
      000277 01                    4663 	.db #0x01	; 1
      000278 0D                    4664 	.db #0x0d	; 13
      000279 00                    4665 	.db #0x00	; 0
      00027A 0B                    4666 	.db #0x0b	; 11
      00027B 07                    4667 	.db #0x07	; 7
      00027C 04                    4668 	.db #0x04	; 4
      00027D 09                    4669 	.db #0x09	; 9
      00027E 01                    4670 	.db #0x01	; 1
      00027F 0A                    4671 	.db #0x0a	; 10
      000280 0E                    4672 	.db #0x0e	; 14
      000281 03                    4673 	.db #0x03	; 3
      000282 05                    4674 	.db #0x05	; 5
      000283 0C                    4675 	.db #0x0c	; 12
      000284 02                    4676 	.db #0x02	; 2
      000285 0F                    4677 	.db #0x0f	; 15
      000286 08                    4678 	.db #0x08	; 8
      000287 06                    4679 	.db #0x06	; 6
      000288 01                    4680 	.db #0x01	; 1
      000289 04                    4681 	.db #0x04	; 4
      00028A 0B                    4682 	.db #0x0b	; 11
      00028B 0D                    4683 	.db #0x0d	; 13
      00028C 0C                    4684 	.db #0x0c	; 12
      00028D 03                    4685 	.db #0x03	; 3
      00028E 07                    4686 	.db #0x07	; 7
      00028F 0E                    4687 	.db #0x0e	; 14
      000290 0A                    4688 	.db #0x0a	; 10
      000291 0F                    4689 	.db #0x0f	; 15
      000292 06                    4690 	.db #0x06	; 6
      000293 08                    4691 	.db #0x08	; 8
      000294 00                    4692 	.db #0x00	; 0
      000295 05                    4693 	.db #0x05	; 5
      000296 09                    4694 	.db #0x09	; 9
      000297 02                    4695 	.db #0x02	; 2
      000298 06                    4696 	.db #0x06	; 6
      000299 0B                    4697 	.db #0x0b	; 11
      00029A 0D                    4698 	.db #0x0d	; 13
      00029B 08                    4699 	.db #0x08	; 8
      00029C 01                    4700 	.db #0x01	; 1
      00029D 04                    4701 	.db #0x04	; 4
      00029E 0A                    4702 	.db #0x0a	; 10
      00029F 07                    4703 	.db #0x07	; 7
      0002A0 09                    4704 	.db #0x09	; 9
      0002A1 05                    4705 	.db #0x05	; 5
      0002A2 00                    4706 	.db #0x00	; 0
      0002A3 0F                    4707 	.db #0x0f	; 15
      0002A4 0E                    4708 	.db #0x0e	; 14
      0002A5 02                    4709 	.db #0x02	; 2
      0002A6 03                    4710 	.db #0x03	; 3
      0002A7 0C                    4711 	.db #0x0c	; 12
      0002A8                       4712 _s8:
      0002A8 0D                    4713 	.db #0x0d	; 13
      0002A9 02                    4714 	.db #0x02	; 2
      0002AA 08                    4715 	.db #0x08	; 8
      0002AB 04                    4716 	.db #0x04	; 4
      0002AC 06                    4717 	.db #0x06	; 6
      0002AD 0F                    4718 	.db #0x0f	; 15
      0002AE 0B                    4719 	.db #0x0b	; 11
      0002AF 01                    4720 	.db #0x01	; 1
      0002B0 0A                    4721 	.db #0x0a	; 10
      0002B1 09                    4722 	.db #0x09	; 9
      0002B2 03                    4723 	.db #0x03	; 3
      0002B3 0E                    4724 	.db #0x0e	; 14
      0002B4 05                    4725 	.db #0x05	; 5
      0002B5 00                    4726 	.db #0x00	; 0
      0002B6 0C                    4727 	.db #0x0c	; 12
      0002B7 07                    4728 	.db #0x07	; 7
      0002B8 01                    4729 	.db #0x01	; 1
      0002B9 0F                    4730 	.db #0x0f	; 15
      0002BA 0D                    4731 	.db #0x0d	; 13
      0002BB 08                    4732 	.db #0x08	; 8
      0002BC 0A                    4733 	.db #0x0a	; 10
      0002BD 03                    4734 	.db #0x03	; 3
      0002BE 07                    4735 	.db #0x07	; 7
      0002BF 04                    4736 	.db #0x04	; 4
      0002C0 0C                    4737 	.db #0x0c	; 12
      0002C1 05                    4738 	.db #0x05	; 5
      0002C2 06                    4739 	.db #0x06	; 6
      0002C3 0B                    4740 	.db #0x0b	; 11
      0002C4 00                    4741 	.db #0x00	; 0
      0002C5 0E                    4742 	.db #0x0e	; 14
      0002C6 09                    4743 	.db #0x09	; 9
      0002C7 02                    4744 	.db #0x02	; 2
      0002C8 07                    4745 	.db #0x07	; 7
      0002C9 0B                    4746 	.db #0x0b	; 11
      0002CA 04                    4747 	.db #0x04	; 4
      0002CB 01                    4748 	.db #0x01	; 1
      0002CC 09                    4749 	.db #0x09	; 9
      0002CD 0C                    4750 	.db #0x0c	; 12
      0002CE 0E                    4751 	.db #0x0e	; 14
      0002CF 02                    4752 	.db #0x02	; 2
      0002D0 00                    4753 	.db #0x00	; 0
      0002D1 06                    4754 	.db #0x06	; 6
      0002D2 0A                    4755 	.db #0x0a	; 10
      0002D3 0D                    4756 	.db #0x0d	; 13
      0002D4 0F                    4757 	.db #0x0f	; 15
      0002D5 03                    4758 	.db #0x03	; 3
      0002D6 05                    4759 	.db #0x05	; 5
      0002D7 08                    4760 	.db #0x08	; 8
      0002D8 02                    4761 	.db #0x02	; 2
      0002D9 01                    4762 	.db #0x01	; 1
      0002DA 0E                    4763 	.db #0x0e	; 14
      0002DB 07                    4764 	.db #0x07	; 7
      0002DC 04                    4765 	.db #0x04	; 4
      0002DD 0A                    4766 	.db #0x0a	; 10
      0002DE 08                    4767 	.db #0x08	; 8
      0002DF 0D                    4768 	.db #0x0d	; 13
      0002E0 0F                    4769 	.db #0x0f	; 15
      0002E1 0C                    4770 	.db #0x0c	; 12
      0002E2 09                    4771 	.db #0x09	; 9
      0002E3 00                    4772 	.db #0x00	; 0
      0002E4 03                    4773 	.db #0x03	; 3
      0002E5 05                    4774 	.db #0x05	; 5
      0002E6 06                    4775 	.db #0x06	; 6
      0002E7 0B                    4776 	.db #0x0b	; 11
      0002E8                       4777 _e:
      0002E8 20                    4778 	.db #0x20	; 32
      0002E9 01                    4779 	.db #0x01	; 1
      0002EA 02                    4780 	.db #0x02	; 2
      0002EB 03                    4781 	.db #0x03	; 3
      0002EC 04                    4782 	.db #0x04	; 4
      0002ED 05                    4783 	.db #0x05	; 5
      0002EE 04                    4784 	.db #0x04	; 4
      0002EF 05                    4785 	.db #0x05	; 5
      0002F0 06                    4786 	.db #0x06	; 6
      0002F1 07                    4787 	.db #0x07	; 7
      0002F2 08                    4788 	.db #0x08	; 8
      0002F3 09                    4789 	.db #0x09	; 9
      0002F4 08                    4790 	.db #0x08	; 8
      0002F5 09                    4791 	.db #0x09	; 9
      0002F6 0A                    4792 	.db #0x0a	; 10
      0002F7 0B                    4793 	.db #0x0b	; 11
      0002F8 0C                    4794 	.db #0x0c	; 12
      0002F9 0D                    4795 	.db #0x0d	; 13
      0002FA 0C                    4796 	.db #0x0c	; 12
      0002FB 0D                    4797 	.db #0x0d	; 13
      0002FC 0E                    4798 	.db #0x0e	; 14
      0002FD 0F                    4799 	.db #0x0f	; 15
      0002FE 10                    4800 	.db #0x10	; 16
      0002FF 11                    4801 	.db #0x11	; 17
      000300 10                    4802 	.db #0x10	; 16
      000301 11                    4803 	.db #0x11	; 17
      000302 12                    4804 	.db #0x12	; 18
      000303 13                    4805 	.db #0x13	; 19
      000304 14                    4806 	.db #0x14	; 20
      000305 15                    4807 	.db #0x15	; 21
      000306 14                    4808 	.db #0x14	; 20
      000307 15                    4809 	.db #0x15	; 21
      000308 16                    4810 	.db #0x16	; 22
      000309 17                    4811 	.db #0x17	; 23
      00030A 18                    4812 	.db #0x18	; 24
      00030B 19                    4813 	.db #0x19	; 25
      00030C 18                    4814 	.db #0x18	; 24
      00030D 19                    4815 	.db #0x19	; 25
      00030E 1A                    4816 	.db #0x1a	; 26
      00030F 1B                    4817 	.db #0x1b	; 27
      000310 1C                    4818 	.db #0x1c	; 28
      000311 1D                    4819 	.db #0x1d	; 29
      000312 1C                    4820 	.db #0x1c	; 28
      000313 1D                    4821 	.db #0x1d	; 29
      000314 1E                    4822 	.db #0x1e	; 30
      000315 1F                    4823 	.db #0x1f	; 31
      000316 20                    4824 	.db #0x20	; 32
      000317 01                    4825 	.db #0x01	; 1
      000318                       4826 _p:
      000318 10                    4827 	.db #0x10	; 16
      000319 07                    4828 	.db #0x07	; 7
      00031A 14                    4829 	.db #0x14	; 20
      00031B 15                    4830 	.db #0x15	; 21
      00031C 1D                    4831 	.db #0x1d	; 29
      00031D 0C                    4832 	.db #0x0c	; 12
      00031E 1C                    4833 	.db #0x1c	; 28
      00031F 11                    4834 	.db #0x11	; 17
      000320 01                    4835 	.db #0x01	; 1
      000321 0F                    4836 	.db #0x0f	; 15
      000322 17                    4837 	.db #0x17	; 23
      000323 1A                    4838 	.db #0x1a	; 26
      000324 05                    4839 	.db #0x05	; 5
      000325 12                    4840 	.db #0x12	; 18
      000326 1F                    4841 	.db #0x1f	; 31
      000327 0A                    4842 	.db #0x0a	; 10
      000328 02                    4843 	.db #0x02	; 2
      000329 08                    4844 	.db #0x08	; 8
      00032A 18                    4845 	.db #0x18	; 24
      00032B 0E                    4846 	.db #0x0e	; 14
      00032C 20                    4847 	.db #0x20	; 32
      00032D 1B                    4848 	.db #0x1b	; 27
      00032E 03                    4849 	.db #0x03	; 3
      00032F 09                    4850 	.db #0x09	; 9
      000330 13                    4851 	.db #0x13	; 19
      000331 0D                    4852 	.db #0x0d	; 13
      000332 1E                    4853 	.db #0x1e	; 30
      000333 06                    4854 	.db #0x06	; 6
      000334 16                    4855 	.db #0x16	; 22
      000335 0B                    4856 	.db #0x0b	; 11
      000336 04                    4857 	.db #0x04	; 4
      000337 19                    4858 	.db #0x19	; 25
                                   4859 	.area XINIT   (CODE)
                                   4860 	.area CABS    (ABS,CODE)
